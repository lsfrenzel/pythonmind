# Quiz data for the Learning Management System

MODULES = {
    1: {
        'title': 'Introdu√ß√£o ao Python',
        'description': 'Fundamentos da linguagem Python, vari√°veis, tipos de dados e fun√ß√µes b√°sicas',
        'content': '''<div class="module-header">
            <h3>üöÄ M√≥dulo 1 - Introdu√ß√£o ao Python</h3>
            <p class="module-intro"><strong>Bem-vindo ao mundo Python!</strong> Uma linguagem poderosa, elegante e vers√°til que conquista desenvolvedores ao redor do mundo. Prepare-se para uma jornada incr√≠vel no universo da programa√ß√£o!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Hist√≥ria detalhada e filosofia do Python</li>
                <li>Configura√ß√£o completa do ambiente de desenvolvimento</li>
                <li>Vari√°veis, tipos de dados e convers√µes</li>
                <li>Operadores matem√°ticos, l√≥gicos e de compara√ß√£o</li>
                <li>Entrada, sa√≠da e formata√ß√£o de dados</li>
                <li>Coment√°rios e documenta√ß√£o de c√≥digo</li>
                <li>Primeiro programa completo</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Detalhado:</h4>
            
            <h5>1. Hist√≥ria e Filosofia do Python</h5>
            <p>Python foi criado por <strong>Guido van Rossum</strong> em 1989 na Holanda. Mais que uma linguagem, Python √© uma filosofia de programa√ß√£o que prioriza:</p>
            
            <div class="alert alert-info">
                <strong>O Zen do Python (PEP 20):</strong>
                <ul class="mb-0">
                    <li><em>"Bonito √© melhor que feio"</em></li>
                    <li><em>"Expl√≠cito √© melhor que impl√≠cito"</em></li>
                    <li><em>"Simples √© melhor que complexo"</em></li>
                    <li><em>"Legibilidade conta"</em></li>
                    <li><em>"Se a implementa√ß√£o √© dif√≠cil de explicar, √© uma m√° ideia"</em></li>
                </ul>
            </div>
            
            <h5>2. Por que Python √© Especial?</h5>
            <div class="row">
                <div class="col-md-6">
                    <h6>‚úÖ Vantagens:</h6>
                    <ul>
                        <li><strong>Sintaxe Clean:</strong> Parece ingl√™s!</li>
                        <li><strong>Multiprop√≥sito:</strong> Web, IA, automa√ß√£o, ci√™ncia</li>
                        <li><strong>Grande Comunidade:</strong> Milh√µes de desenvolvedores</li>
                        <li><strong>Bibliotecas Ricas:</strong> 400.000+ no PyPI</li>
                        <li><strong>Cross-platform:</strong> Roda em qualquer sistema</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6>‚ö†Ô∏è Considera√ß√µes:</h6>
                    <ul>
                        <li>Mais lento que C/C++ (mas otimiz√°vel)</li>
                        <li>N√£o ideal para apps m√≥veis nativos</li>
                        <li>Consome mais mem√≥ria</li>
                    </ul>
                </div>
            </div>
            
            <h5>3. Tipos de Dados Fundamentais</h5>
            
            <h6>üìä N√∫meros em Python:</h6>
            <div class="code-example">
                <pre><code># Inteiros (int) - n√∫meros sem casas decimais
idade = 25
ano_nascimento = 1998
pontos = -50  # Pode ser negativo
numero_grande = 1_000_000  # Use _ para facilitar leitura

# Decimais (float) - n√∫meros com casas decimais
altura = 1.75
temperatura = -10.5
pi = 3.14159
notacao_cientifica = 2.5e6  # 2.500.000

# N√∫meros complexos (complex) - usados em matem√°tica avan√ßada
numero_complexo = 3 + 4j
print(f"Parte real: {numero_complexo.real}")
print(f"Parte imagin√°ria: {numero_complexo.imag}")

# Opera√ß√µes matem√°ticas
resultado = 10 + 5   # Adi√ß√£o = 15
resultado = 10 - 3   # Subtra√ß√£o = 7
resultado = 4 * 5    # Multiplica√ß√£o = 20
resultado = 15 / 3   # Divis√£o = 5.0 (sempre retorna float)
resultado = 15 // 3  # Divis√£o inteira = 5
resultado = 10 % 3   # Resto da divis√£o = 1
resultado = 2 ** 3   # Exponencia√ß√£o = 8

# Verificando tipos
print(type(25))        # <class 'int'>
print(type(25.0))      # <class 'float'>
print(isinstance(25, int))  # True</code></pre>
            </div>
            
            <h6>üìù Strings (Texto) em Detalhes:</h6>
            <div class="code-example">
                <pre><code># Diferentes formas de criar strings
nome = "Jo√£o Silva"           # Aspas duplas
cidade = 'S√£o Paulo'          # Aspas simples
texto_multilinha = """Este √© um texto
que pode ocupar v√°rias
linhas sem problemas"""

# Escape characters (caracteres especiais)
texto_especial = "Ele disse: \"Ol√°!\" e foi embora"
caminho = "C:\\Users\\Nome\\Documentos"  # \\ para barra invertida
quebra_linha = "Primeira linha\nSegunda linha"
tab = "Nome\tIdade\tCidade"

# String methods (m√©todos √∫teis)
nome = "jo√£o silva santos"
print(nome.upper())          # JO√ÉO SILVA SANTOS
print(nome.lower())          # jo√£o silva santos
print(nome.title())          # Jo√£o Silva Santos
print(nome.capitalize())     # Jo√£o silva santos
print(nome.count('a'))       # 4 (conta ocorr√™ncias)
print(nome.find('silva'))    # 5 (posi√ß√£o da substring)
print(nome.replace('silva', 'pedro'))  # jo√£o pedro santos

# Verifica√ß√µes booleanas de strings
print(nome.startswith('jo√£o'))   # True
print(nome.endswith('santos'))   # True
print(nome.isalpha())           # False (tem espa√ßos)
print("12345".isdigit())        # True
print("abc123".isalnum())       # True

# Formata√ß√£o de strings (f-strings - m√©todo moderno)
nome = "Maria"
idade = 30
altura = 1.65
print(f"Ol√°, eu sou {nome}, tenho {idade} anos e {altura:.1f}m de altura")

# Formata√ß√£o com format() (m√©todo cl√°ssico)
template = "Nome: {}, Idade: {}, Profiss√£o: {}"
print(template.format("Pedro", 28, "Programador"))

# Fatiamento de strings (slicing)
palavra = "Python"
print(palavra[0])      # P (primeiro caractere)
print(palavra[-1])     # n (√∫ltimo caractere)
print(palavra[0:3])    # Pyt (do 0 ao 2)
print(palavra[2:])     # thon (do 2 ao final)
print(palavra[:4])     # Pyth (do in√≠cio ao 3)
print(palavra[::2])    # Pto (pula de 2 em 2)
print(palavra[::-1])   # nohtyP (inverte a string)</code></pre>
            </div>
            
            <h6>üîÑ Booleanos e L√≥gica:</h6>
            <div class="code-example">
                <pre><code># Valores booleanos
verdadeiro = True
falso = False

# Operadores de compara√ß√£o
print(5 > 3)    # True
print(5 < 3)    # False
print(5 == 5)   # True (igual)
print(5 != 3)   # True (diferente)
print(5 >= 5)   # True (maior ou igual)
print(3 <= 5)   # True (menor ou igual)

# Operadores l√≥gicos
print(True and True)   # True
print(True and False)  # False
print(True or False)   # True
print(not True)        # False

# Valores que s√£o considerados False em Python
print(bool(0))         # False
print(bool(""))        # False (string vazia)
print(bool([]))        # False (lista vazia)
print(bool(None))      # False

# Valores que s√£o considerados True
print(bool(1))         # True
print(bool("texto"))   # True
print(bool([1, 2]))    # True</code></pre>
            </div>
            
            <h5>4. Vari√°veis e Conven√ß√µes</h5>
            <div class="code-example">
                <pre><code># Conven√ß√µes de nomenclatura (PEP 8)
# ‚úÖ CORRETO:
nome_usuario = "Jo√£o"        # snake_case para vari√°veis
CONSTANTE_MAXIMA = 100       # UPPER_CASE para constantes
idade_minima = 18

# ‚ùå EVITE:
nomeUsuario = "Jo√£o"         # camelCase (reservado para classes)
nome-usuario = "Jo√£o"        # h√≠fen n√£o √© permitido
2nome = "Jo√£o"               # n√£o pode come√ßar com n√∫mero

# M√∫ltiplas atribui√ß√µes
x, y, z = 1, 2, 3
a = b = c = 0

# Troca de vari√°veis (pyth√¥nico!)
a, b = b, a

# Atribui√ß√£o com operadores
contador = 0
contador += 1    # equivale a: contador = contador + 1
contador -= 1    # equivale a: contador = contador - 1
contador *= 2    # equivale a: contador = contador * 2</code></pre>
            </div>
            
            <h5>5. Entrada e Sa√≠da de Dados</h5>
            <div class="code-example">
                <pre><code># Fun√ß√£o input() sempre retorna string
nome = input("Digite seu nome: ")
print(f"Ol√°, {nome}!")

# Convertendo entrada para n√∫meros
idade = int(input("Digite sua idade: "))
altura = float(input("Digite sua altura (em metros): "))
salario = float(input("Digite seu sal√°rio: "))

# Valida√ß√£o b√°sica de entrada
try:
    numero = int(input("Digite um n√∫mero: "))
    print(f"Voc√™ digitou: {numero}")
except ValueError:
    print("Erro: Isso n√£o √© um n√∫mero v√°lido!")

# Formata√ß√£o avan√ßada de sa√≠da
preco = 29.99
print(f"Pre√ßo: R$ {preco:.2f}")           # R$ 29.99
print(f"Pre√ßo: R$ {preco:>10.2f}")        # R$     29.99 (alinhado √† direita)
print(f"Produto: {'Notebook':<15} R$ {preco:>8.2f}")  # Notebook          R$    29.99

# Sa√≠da com separadores personalizados
print("A", "B", "C", sep=" - ")           # A - B - C
print("Primeira linha", end=" ")          # N√£o quebra linha
print("mesma linha")                      # Primeira linha mesma linha</code></pre>
            </div>
            
            <h5>6. Coment√°rios e Documenta√ß√£o</h5>
            <div class="code-example">
                <pre><code># Coment√°rio de linha simples
nome = "Jo√£o"  # Coment√°rio no final da linha

"""
Coment√°rio de m√∫ltiplas linhas
Usado para documenta√ß√£o extensa
ou para desabilitar blocos de c√≥digo
"""

# Docstrings - documenta√ß√£o de fun√ß√µes (veremos mais adiante)
def saudacao(nome):
    """
    Exibe uma sauda√ß√£o personalizada.
    
    Args:
        nome (str): O nome da pessoa a ser cumprimentada
        
    Returns:
        None
    """
    print(f"Ol√°, {nome}!")

# Coment√°rios informativos
valor_em_reais = 100
taxa_dolar = 5.20  # Taxa do d√≥lar em 27/08/2025
valor_em_dolares = valor_em_reais / taxa_dolar</code></pre>
            </div>
            
            <h5>7. Primeiro Programa Completo</h5>
            <div class="code-example">
                <pre><code># Programa: Calculadora de IMC
print("=" * 40)
print("    CALCULADORA DE IMC")
print("=" * 40)

# Coletando dados do usu√°rio
nome = input("Digite seu nome: ")
peso = float(input("Digite seu peso (kg): "))
altura = float(input("Digite sua altura (m): "))

# Calculando o IMC
imc = peso / (altura ** 2)

# Determinando a classifica√ß√£o
if imc < 18.5:
    classificacao = "Abaixo do peso"
elif imc < 25:
    classificacao = "Peso normal"
elif imc < 30:
    classificacao = "Sobrepeso"
else:
    classificacao = "Obesidade"

# Exibindo resultado
print(f"\n{nome}, seu IMC √© {imc:.1f}")
print(f"Classifica√ß√£o: {classificacao}")
print("=" * 40)</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Dicas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Use f-strings</strong> para formata√ß√£o (mais leg√≠vel que .format())</li>
                    <li><strong>Siga o PEP 8</strong> para conven√ß√µes de c√≥digo Python</li>
                    <li><strong>Python √© case-sensitive:</strong> 'nome' ‚â† 'Nome'</li>
                    <li><strong>Use nomes descritivos:</strong> 'idade_usuario' > 'x'</li>
                    <li><strong>Teste sempre:</strong> Use print() para verificar valores</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Erros Comuns:</h6>
                <ul class="mb-0">
                    <li>Esquecer de converter input() para int/float</li>
                    <li>Usar = ao inv√©s de == para compara√ß√£o</li>
                    <li>N√£o considerar espa√ßos em branco em strings</li>
                    <li>Dividir por zero sem verifica√ß√£o</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a fun√ß√£o usada para exibir texto na tela em Python?',
                'options': ['show()', 'display()', 'print()', 'output()'],
                'correct_answer': 'print()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar uma vari√°vel em Python?',
                'options': ['var nome = "Jo√£o"', 'nome = "Jo√£o"', 'string nome = "Jo√£o"', 'nome := "Jo√£o"'],
                'correct_answer': 'nome = "Jo√£o"'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual tipo de dado representa n√∫meros inteiros?',
                'options': ['float', 'string', 'int', 'number'],
                'correct_answer': 'int'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como capturar dados do usu√°rio?',
                'options': ['get()', 'input()', 'read()', 'scan()'],
                'correct_answer': 'input()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual s√≠mbolo √© usado para coment√°rios em Python?',
                'options': ['//', '/* */', '#', '--'],
                'correct_answer': '#'
            }
        ]
    },
    2: {
        'title': 'Estruturas Condicionais e Loops',
        'description': 'Aprenda a usar if, elif, else, for e while para controlar o fluxo do programa',
        'content': '''<div class="module-header">
            <h3>üéØ M√≥dulo 2 - Estruturas Condicionais e Loops</h3>
            <p class="module-intro"><strong>D√™ intelig√™ncia aos seus programas!</strong> Aprenda a tomar decis√µes complexas e criar repeti√ß√µes eficientes. Este m√≥dulo transformar√° seus programas de simples para verdadeiramente inteligentes!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Estruturas condicionais avan√ßadas (if, elif, else aninhados)</li>
                <li>Operadores de compara√ß√£o, l√≥gicos e de identidade</li>
                <li>Loops for e while com controle total</li>
                <li>Fun√ß√£o range() em todos os cen√°rios</li>
                <li>Controle de fluxo avan√ßado (break, continue, else)</li>
                <li>Loops aninhados e otimiza√ß√£o</li>
                <li>Condi√ß√µes complexas e operadores tern√°rios</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Estruturas Condicionais Detalhadas</h5>
            <p>As estruturas condicionais s√£o o c√©rebro dos seus programas, permitindo tomar decis√µes baseadas em dados e situa√ß√µes espec√≠ficas.</p>
            
            <div class="code-example">
                <h6>üî∏ If Simples - Tomando uma decis√£o:</h6>
                <pre><code># Sintaxe b√°sica
idade = 18
if idade >= 18:
    print("Voc√™ pode votar!")
    print("Voc√™ tem direitos plenos!")

# M√∫ltiplas a√ß√µes no if
salario = 5000
if salario > 3000:
    print("Sal√°rio acima da m√©dia")
    desconto_ir = salario * 0.275
    print(f"Desconto do IR: R$ {desconto_ir:.2f}")
    salario_liquido = salario - desconto_ir
    print(f"Sal√°rio l√≠quido: R$ {salario_liquido:.2f}")</code></pre>
                
                <h6>üî∏ If-Else - Duas possibilidades:</h6>
                <pre><code>nota = float(input("Digite sua nota: "))

if nota >= 7:
    print("üéâ Parab√©ns! Voc√™ foi aprovado!")
    if nota >= 9:
        print("üëë Nota excelente! Voc√™ est√° entre os melhores!")
else:
    print("üòî Infelizmente voc√™ foi reprovado")
    print(f"Voc√™ precisava de {7 - nota:.1f} pontos a mais")
    print("N√£o desista! Estude mais e tente novamente!")</code></pre>
                
                <h6>üî∏ If-Elif-Else - M√∫ltiplas condi√ß√µes:</h6>
                <pre><code>nota = float(input("Digite sua nota (0-10): "))

if nota >= 9:
    conceito = "A"
    mensagem = "Excelente! Performance excepcional!"
elif nota >= 8:
    conceito = "B"
    mensagem = "Muito bom! Continue assim!"
elif nota >= 7:
    conceito = "C"
    mensagem = "Bom trabalho! Aprovado!"
elif nota >= 5:
    conceito = "D"
    mensagem = "Regular. Precisa melhorar"
else:
    conceito = "F"
    mensagem = "Insuficiente. Reprovado"

print(f"Conceito: {conceito} - {mensagem}")</code></pre>
            </div>
            
            <h5>2. Operadores de Compara√ß√£o e L√≥gicos</h5>
            
            <div class="alert alert-info">
                <h6>üîç Operadores de Compara√ß√£o:</h6>
                <ul class="mb-0">
                    <li><code>==</code> - Igual a (aten√ß√£o: n√£o confundir com =)</li>
                    <li><code>!=</code> - Diferente de</li>
                    <li><code>&gt;</code> - Maior que</li>
                    <li><code>&lt;</code> - Menor que</li>
                    <li><code>&gt;=</code> - Maior ou igual</li>
                    <li><code>&lt;=</code> - Menor ou igual</li>
                    <li><code>in</code> - Pertence √† sequ√™ncia</li>
                    <li><code>not in</code> - N√£o pertence √† sequ√™ncia</li>
                    <li><code>is</code> - Identidade de objeto</li>
                    <li><code>is not</code> - N√£o √© o mesmo objeto</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>üî∏ Operadores L√≥gicos - Combinando Condi√ß√µes:</h6>
                <pre><code># AND - Todas as condi√ß√µes devem ser verdadeiras
idade = 25
salario = 4000
tem_carteira = True

if idade >= 21 and salario >= 3000 and tem_carteira:
    print("Aprovado para financiamento do carro!")
else:
    print("N√£o atende aos crit√©rios do financiamento")

# OR - Pelo menos uma condi√ß√£o deve ser verdadeira
dia_semana = "s√°bado"
feriado = False

if dia_semana in ["s√°bado", "domingo"] or feriado:
    print("Hoje n√£o √© dia de trabalho!")
else:
    print("Dia de trabalho!")

# NOT - Inverte o valor l√≥gico
usuario_logado = False

if not usuario_logado:
    print("Por favor, fa√ßa login para continuar")
else:
    print("Bem-vindo ao sistema!")

# Combina√ß√µes complexas
temperatura = 25
chuva = False
vento_forte = False

if temperatura > 20 and not chuva and not vento_forte:
    print("Dia perfeito para atividades ao ar livre!")
elif temperatura > 15 and not chuva:
    print("Dia bom para uma caminhada")
else:
    print("Melhor ficar em casa hoje")</code></pre>
            </div>
            
            <h5>3. Operadores de Pertencimento e Identidade</h5>
            <div class="code-example">
                <pre><code># Operador IN - verifica se elemento est√° em sequ√™ncia
frutas = ["ma√ß√£", "banana", "laranja", "uva"]
fruta_escolhida = input("Digite uma fruta: ").lower()

if fruta_escolhida in frutas:
    print(f"Temos {fruta_escolhida} dispon√≠vel!")
else:
    print(f"Desculpe, n√£o temos {fruta_escolhida}")
    print(f"Frutas dispon√≠veis: {', '.join(frutas)}")

# Verificando caracteres em string
email = input("Digite seu email: ")
if "@" in email and "." in email:
    print("Email parece v√°lido")
else:
    print("Email inv√°lido")

# Operador IS - verifica identidade de objeto
a = None
if a is None:
    print("Vari√°vel 'a' n√£o foi definida")
    
lista1 = [1, 2, 3]
lista2 = [1, 2, 3]
lista3 = lista1

print(lista1 == lista2)    # True (mesmo conte√∫do)
print(lista1 is lista2)    # False (objetos diferentes)
print(lista1 is lista3)    # True (mesmo objeto)</code></pre>
            </div>
            
            <h5>4. Loops - Repeti√ß√µes Inteligentes</h5>
            
            <h6>üîÑ Loop FOR - Quando sabemos quantas repeti√ß√µes:</h6>
            <div class="code-example">
                <pre><code># Range b√°sico
print("Contando de 0 a 4:")
for i in range(5):
    print(f"N√∫mero: {i}")

# Range com in√≠cio e fim
print("\nContando de 1 a 10:")
for numero in range(1, 11):
    print(f"N√∫mero: {numero}")

# Range com passo (step)
print("\nN√∫meros pares de 0 a 20:")
for par in range(0, 21, 2):
    print(par, end=" ")

print("\n\nContagem regressiva:")
for i in range(10, 0, -1):
    print(i, end=" ")
print("üöÄ Decolagem!")

# Loop em strings
nome = "Python"
print("\nLetras da palavra Python:")
for letra in nome:
    print(f"Letra: {letra}")

# Loop em listas
frutas = ["ma√ß√£", "banana", "laranja"]
print("\nFrutas dispon√≠veis:")
for fruta in frutas:
    print(f"- {fruta.title()}")

# Enumerate - obter √≠ndice e valor
print("\nFrutas com posi√ß√£o:")
for indice, fruta in enumerate(frutas, 1):
    print(f"{indice}. {fruta.title()}")

# Calculando a tabuada
numero = int(input("\nDigite um n√∫mero para a tabuada: "))
print(f"\nTabuada do {numero}:")
for i in range(1, 11):
    resultado = numero * i
    print(f"{numero} x {i:2d} = {resultado:2d}")</code></pre>
            </div>
            
            <h6>üîÑ Loop WHILE - Quando a condi√ß√£o define o fim:</h6>
            <div class="code-example">
                <pre><code># While b√°sico
contador = 0
print("Contando at√© 5:")
while contador <= 5:
    print(f"Contador: {contador}")
    contador += 1

# Loop at√© entrada v√°lida
while True:
    idade = input("Digite sua idade (ou 'sair'): ")
    if idade.lower() == 'sair':
        break
    try:
        idade = int(idade)
        if idade < 0:
            print("Idade n√£o pode ser negativa!")
        elif idade > 150:
            print("Idade muito alta!")
        else:
            print(f"Idade v√°lida: {idade} anos")
            break
    except ValueError:
        print("Por favor, digite um n√∫mero v√°lido!")

# Acumulador - somando n√∫meros
soma = 0
contador = 0
print("\nDigite n√∫meros para somar (0 para parar):")

while True:
    try:
        numero = float(input("N√∫mero: "))
        if numero == 0:
            break
        soma += numero
        contador += 1
        print(f"Soma atual: {soma}")
    except ValueError:
        print("Digite um n√∫mero v√°lido!")

if contador > 0:
    media = soma / contador
    print(f"\nEstat√≠sticas:")
    print(f"Total de n√∫meros: {contador}")
    print(f"Soma: {soma}")
    print(f"M√©dia: {media:.2f}")</code></pre>
            </div>
            
            <h5>5. Controle de Fluxo Avan√ßado</h5>
            
            <div class="code-example">
                <h6>üî∏ BREAK - Saindo do loop:</h6>
                <pre><code># Procurando um n√∫mero espec√≠fico
numeros = [1, 5, 3, 8, 2, 7, 4]
procurado = 8

for i, numero in enumerate(numeros):
    print(f"Verificando posi√ß√£o {i}: {numero}")
    if numero == procurado:
        print(f"‚úÖ Encontrei o n√∫mero {procurado} na posi√ß√£o {i}!")
        break
else:
    print(f"‚ùå N√∫mero {procurado} n√£o encontrado na lista")

# Sistema de login com tentativas limitadas
tentativas = 3
senha_correta = "python123"

while tentativas > 0:
    senha = input(f"Digite a senha ({tentativas} tentativas restantes): ")
    if senha == senha_correta:
        print("üéâ Login realizado com sucesso!")
        break
    else:
        tentativas -= 1
        if tentativas > 0:
            print(f"‚ùå Senha incorreta! {tentativas} tentativas restantes")
        else:
            print("üö´ Muitas tentativas inv√°lidas. Acesso bloqueado!")
            break</code></pre>
                
                <h6>üî∏ CONTINUE - Pular para pr√≥xima itera√ß√£o:</h6>
                <pre><code># Processando apenas n√∫meros pares
print("N√∫meros pares de 1 a 20:")
for numero in range(1, 21):
    if numero % 2 != 0:  # Se √© √≠mpar
        continue  # Pula para pr√≥xima itera√ß√£o
    print(f"Par: {numero}")

# Validando dados de uma lista
nomes = ["Jo√£o", "", "Maria", "123", "Pedro", "Ana"]
nomes_validos = []

for nome in nomes:
    if not nome:  # Nome vazio
        print("‚ùå Nome vazio ignorado")
        continue
    if nome.isdigit():  # Nome s√≥ com n√∫meros
        print(f"‚ùå '{nome}' n√£o √© um nome v√°lido")
        continue
    if len(nome) < 2:  # Nome muito curto
        print(f"‚ùå '{nome}' √© muito curto")
        continue
    
    # Se chegou aqui, o nome √© v√°lido
    nomes_validos.append(nome.title())
    print(f"‚úÖ '{nome.title()}' adicionado")

print(f"\nNomes v√°lidos: {nomes_validos}")</code></pre>
                
                <h6>üî∏ ELSE em Loops - Executado se n√£o houver break:</h6>
                <pre><code># Verificando se uma lista cont√©m apenas n√∫meros positivos
numeros = [1, 5, 3, 8, 2, 7, 4]

for numero in numeros:
    if numero <= 0:
        print(f"‚ùå Encontrado n√∫mero n√£o positivo: {numero}")
        break
else:
    print("‚úÖ Todos os n√∫meros s√£o positivos!")

# Procurando usu√°rio em sistema
usuarios = ["admin", "jo√£o", "maria", "pedro"]
usuario_procurado = input("Digite o nome do usu√°rio: ").lower()

for usuario in usuarios:
    if usuario == usuario_procurado:
        print(f"‚úÖ Usu√°rio '{usuario}' encontrado!")
        break
else:
    print(f"‚ùå Usu√°rio '{usuario_procurado}' n√£o est√° cadastrado")</code></pre>
            </div>
            
            <h5>6. Loops Aninhados - Loops dentro de Loops</h5>
            <div class="code-example">
                <pre><code># Tabuada completa (1 a 10)
print("TABUADA COMPLETA")
print("=" * 40)

for numero in range(1, 11):
    print(f"\nTabuada do {numero}:")
    for multiplicador in range(1, 11):
        resultado = numero * multiplicador
        print(f"{numero} x {multiplicador:2d} = {resultado:2d}")

# Padr√£o de estrelas
print("\nPadr√£o de estrelas:")
for linha in range(1, 6):
    for estrela in range(linha):
        print("*", end="")
    print()  # Quebra de linha

# Sistema de coordenadas
print("\nMapa de coordenadas 5x5:")
for y in range(5):
    for x in range(5):
        print(f"({x},{y})", end=" ")
    print()  # Nova linha ap√≥s cada linha</code></pre>
            </div>
            
            <h5>7. Operador Tern√°rio - If em Uma Linha</h5>
            <div class="code-example">
                <pre><code># Sintaxe: valor_se_verdadeiro if condi√ß√£o else valor_se_falso

idade = 20
status = "Maior de idade" if idade >= 18 else "Menor de idade"
print(status)

# Comparando com if normal
if idade >= 18:
    status = "Maior de idade"
else:
    status = "Menor de idade"

# Exemplos pr√°ticos
nota = 8.5
resultado = "Aprovado" if nota >= 7 else "Reprovado"

numero = -5
absoluto = numero if numero >= 0 else -numero

salario = 3000
categoria = "Alto" if salario > 5000 else "M√©dio" if salario > 2000 else "Baixo"

# Em fun√ß√£o
def classificar_temperatura(temp):
    return "Quente" if temp > 30 else "Agrad√°vel" if temp > 20 else "Frio"

print(classificar_temperatura(25))  # Agrad√°vel</code></pre>
            </div>
            
            <h5>8. Projeto Pr√°tico Completo</h5>
            <div class="code-example">
                <pre><code># JOGO DE ADIVINHA√á√ÉO AVAN√áADO
import random

print("üéØ JOGO DE ADIVINHA√á√ÉO")
print("=" * 40)

# Configura√ß√µes do jogo
numero_secreto = random.randint(1, 100)
tentativas_maximas = 7
tentativas = 0
acertou = False

print("Pensei em um n√∫mero entre 1 e 100!")
print(f"Voc√™ tem {tentativas_maximas} tentativas para acertar.")
print("üí° Dicas: 'maior' ou 'menor' te ajudar√£o!")

while tentativas < tentativas_maximas and not acertou:
    try:
        # Entrada do usu√°rio
        chute = int(input(f"\nTentativa {tentativas + 1}: "))
        tentativas += 1
        
        # Verifica√ß√£o
        if chute == numero_secreto:
            acertou = True
            print(f"üéâ PARAB√âNS! Voc√™ acertou em {tentativas} tentativas!")
            
            # Classifica√ß√£o da performance
            if tentativas <= 3:
                print("üëë Performance EXCEPCIONAL!")
            elif tentativas <= 5:
                print("‚≠ê Performance √ìTIMA!")
            else:
                print("üëç Performance BOA!")
        
        elif chute < numero_secreto:
            print("üìà O n√∫mero √© MAIOR que", chute)
        else:
            print("üìâ O n√∫mero √© MENOR que", chute)
        
        # Dicas baseadas na proximidade
        diferenca = abs(chute - numero_secreto)
        if diferenca <= 5 and not acertou:
            print("üî• MUITO QUENTE! Voc√™ est√° bem pr√≥ximo!")
        elif diferenca <= 15 and not acertou:
            print("üå°Ô∏è Quente! Est√° no caminho certo!")
        
        # Aviso de tentativas restantes
        if tentativas < tentativas_maximas and not acertou:
            restantes = tentativas_maximas - tentativas
            print(f"‚è∞ Restam {restantes} tentativas")
    
    except ValueError:
        print("‚ùå Por favor, digite apenas n√∫meros!")

# Resultado final
if not acertou:
    print(f"\nüíî Game Over! O n√∫mero era {numero_secreto}")
    print("üîÑ Tente novamente!")

print("\nüìä ESTAT√çSTICAS DO JOGO:")
print(f"N√∫mero secreto: {numero_secreto}")
print(f"Tentativas usadas: {tentativas}")
print(f"Taxa de acerto: {(1/tentativas)*100:.1f}%")
print("=" * 40)</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Dicas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Use elif</strong> ao inv√©s de m√∫ltiplos if quando as condi√ß√µes s√£o mutuamente exclusivas</li>
                    <li><strong>Combine condi√ß√µes</strong> com and/or para l√≥gica mais complexa</li>
                    <li><strong>For vs While:</strong> Use for quando souber o n√∫mero de itera√ß√µes, while quando depender de condi√ß√£o</li>
                    <li><strong>Evite loops infinitos:</strong> Sempre garanta que a condi√ß√£o do while eventualmente seja False</li>
                    <li><strong>Use break e continue</strong> para controlar o fluxo com precis√£o</li>
                    <li><strong>Operador tern√°rio</strong> torna o c√≥digo mais conciso para condi√ß√µes simples</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Armadilhas Comuns:</h6>
                <ul class="mb-0">
                    <li><strong>= vs ==:</strong> = √© atribui√ß√£o, == √© compara√ß√£o</li>
                    <li><strong>Indenta√ß√£o:</strong> Python usa indenta√ß√£o para definir blocos</li>
                    <li><strong>range(10):</strong> vai de 0 a 9, n√£o at√© 10</li>
                    <li><strong>input() sempre retorna string:</strong> converta com int() ou float()</li>
                    <li><strong>Loop infinito:</strong> certifique-se de que a condi√ß√£o mude dentro do loop</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave √© usada para estruturas condicionais?',
                'options': ['when', 'if', 'check', 'condition'],
                'correct_answer': 'if'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar um loop que repete 5 vezes?',
                'options': ['for i in range(5):', 'loop 5 times:', 'repeat(5):', 'while 5:'],
                'correct_answer': 'for i in range(5):'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual a diferen√ßa entre "if" e "elif"?',
                'options': ['S√£o iguais', 'elif √© usado para condi√ß√µes adicionais', 'elif √© mais r√°pido', 'if √© obrigat√≥rio'],
                'correct_answer': 'elif √© usado para condi√ß√µes adicionais'
            },
            {
                'type': 'multiple_choice',
                'question': 'Quando usar while ao inv√©s de for?',
                'options': ['Sempre', 'Nunca', 'Quando n√£o sabemos quantas repeti√ß√µes', 'When √© mais r√°pido'],
                'correct_answer': 'Quando n√£o sabemos quantas repeti√ß√µes'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que faz range(1, 6)?',
                'options': ['N√∫meros de 1 a 6', 'N√∫meros de 1 a 5', 'N√∫meros de 0 a 6', 'N√∫meros de 0 a 5'],
                'correct_answer': 'N√∫meros de 1 a 5'
            }
        ]
    },
    3: {
        'title': 'Manipula√ß√£o de Arquivos',
        'description': 'Domine leitura, escrita e processamento de arquivos e formatos como CSV e JSON',
        'content': '''<div class="module-header">
            <h3>üìÅ M√≥dulo 3 - Manipula√ß√£o de Arquivos</h3>
            <p class="module-intro"><strong>Domine a persist√™ncia de dados!</strong> Aprenda a ler, escrever e processar arquivos de forma profissional. Transforme seus programas em sistemas que lembram e processam informa√ß√µes!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Manipula√ß√£o avan√ßada de arquivos de texto</li>
                <li>Todos os modos de abertura e suas aplica√ß√µes</li>
                <li>Gerenciamento seguro e tratamento de erros</li>
                <li>Processamento completo de CSV e planilhas</li>
                <li>Trabalhando com JSON e configura√ß√µes</li>
                <li>Opera√ß√µes com diret√≥rios e caminhos</li>
                <li>Encoding e arquivos internacionais</li>
                <li>Backup autom√°tico e versionamento</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Avan√ßado:</h4>
            
            <h5>1. Fundamentos de Arquivos</h5>
            <p>Arquivos s√£o a ponte entre seus programas e o mundo real. Dominar sua manipula√ß√£o √© essencial para qualquer aplica√ß√£o profissional.</p>
            
            <div class="alert alert-info">
                <h6>üîß Modos de Abertura Completos:</h6>
                <ul class="mb-0">
                    <li><code>'r'</code> - Leitura (padr√£o, arquivo deve existir)</li>
                    <li><code>'w'</code> - Escrita (sobrescreve ou cria novo)</li>
                    <li><code>'a'</code> - Anexar (adiciona ao final)</li>
                    <li><code>'x'</code> - Cria√ß√£o exclusiva (falha se j√° existir)</li>
                    <li><code>'r+'</code> - Leitura e escrita</li>
                    <li><code>'w+'</code> - Escrita e leitura (trunca arquivo)</li>
                    <li><code>'a+'</code> - Anexar e leitura</li>
                    <li><code>'b'</code> - Modo bin√°rio (combina com outros)</li>
                    <li><code>'t'</code> - Modo texto (padr√£o)</li>
                </ul>
            </div>
            
            <h5>2. Leitura Avan√ßada de Arquivos</h5>
            <div class="code-example">
                <pre><code># Diferentes formas de ler arquivos
import os

# Verificando se arquivo existe
if os.path.exists('dados.txt'):
    print("Arquivo encontrado!")
else:
    print("Arquivo n√£o existe")

# Lendo arquivo completo
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    conteudo_completo = arquivo.read()
    print("Conte√∫do completo:")
    print(conteudo_completo)

# Lendo linha por linha (economiza mem√≥ria)
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    numero_linha = 1
    for linha in arquivo:
        print(f"Linha {numero_linha}: {linha.strip()}")
        numero_linha += 1

# Lendo todas as linhas em uma lista
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    linhas = arquivo.readlines()
    print(f"Total de linhas: {len(linhas)}")
    for i, linha in enumerate(linhas, 1):
        print(f"{i:2d}: {linha.strip()}")

# Lendo quantidade espec√≠fica de caracteres
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    primeiros_100_chars = arquivo.read(100)
    print(f"Primeiros 100 caracteres: {primeiros_100_chars}")

# Lendo com tratamento de erro robusto
def ler_arquivo_seguro(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            return arquivo.read()
    except FileNotFoundError:
        print(f"‚ùå Arquivo '{nome_arquivo}' n√£o encontrado")
        return None
    except PermissionError:
        print(f"‚ùå Sem permiss√£o para ler '{nome_arquivo}'")
        return None
    except UnicodeDecodeError:
        print(f"‚ùå Erro de codifica√ß√£o em '{nome_arquivo}'")
        try:
            # Tenta com encoding diferente
            with open(nome_arquivo, 'r', encoding='latin-1') as arquivo:
                return arquivo.read()
        except:
            return None

conteudo = ler_arquivo_seguro('exemplo.txt')</code></pre>
            </div>
            
            <h5>3. Escrita Profissional de Arquivos</h5>
            <div class="code-example">
                <pre><code># Escrevendo dados estruturados
import datetime

def criar_log(mensagem, nivel="INFO"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {nivel}: {mensagem}\n"
    
    with open('sistema.log', 'a', encoding='utf-8') as arquivo:
        arquivo.write(log_entry)

# Salvando dados de usu√°rios
usuarios = [
    {"nome": "Jo√£o", "idade": 30, "email": "joao@email.com"},
    {"nome": "Maria", "idade": 25, "email": "maria@email.com"},
    {"nome": "Pedro", "idade": 35, "email": "pedro@email.com"}
]

# Salvando como texto formatado
with open('usuarios.txt', 'w', encoding='utf-8') as arquivo:
    arquivo.write("RELAT√ìRIO DE USU√ÅRIOS\n")
    arquivo.write("=" * 50 + "\n")
    arquivo.write(f"Gerado em: {datetime.datetime.now()}\n\n")
    
    for i, usuario in enumerate(usuarios, 1):
        arquivo.write(f"{i}. Nome: {usuario['nome']}\n")
        arquivo.write(f"   Idade: {usuario['idade']} anos\n")
        arquivo.write(f"   Email: {usuario['email']}\n")
        arquivo.write("-" * 30 + "\n")

# Backup autom√°tico
def criar_backup(arquivo_original):
    import shutil
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    nome_backup = f"{arquivo_original}.backup_{timestamp}"
    try:
        shutil.copy2(arquivo_original, nome_backup)
        print(f"‚úÖ Backup criado: {nome_backup}")
        return nome_backup
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return None

# Escrevendo com backup autom√°tico
def escrever_com_backup(nome_arquivo, conteudo):
    # Cria backup se arquivo j√° existe
    if os.path.exists(nome_arquivo):
        criar_backup(nome_arquivo)
    
    # Escreve novo conteudo
    with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
        arquivo.write(conteudo)
    print(f"‚úÖ Arquivo '{nome_arquivo}' atualizado")</code></pre>
            </div>
            
            <h5>4. Trabalhando com CSV - Dados Tabulares</h5>
            <div class="code-example">
                <pre><code>import csv

# Lendo arquivo CSV
def ler_vendas_csv(nome_arquivo):
    vendas = []
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            leitor = csv.DictReader(arquivo)
            for linha in leitor:
                # Convertendo tipos apropriados
                venda = {
                    'produto': linha['produto'],
                    'quantidade': int(linha['quantidade']),
                    'preco': float(linha['preco']),
                    'data': linha['data']
                }
                vendas.append(venda)
    except FileNotFoundError:
        print("‚ùå Arquivo de vendas n√£o encontrado")
    except ValueError as e:
        print(f"‚ùå Erro de convers√£o: {e}")
    
    return vendas

# Criando arquivo CSV com dados
def salvar_vendas_csv(vendas, nome_arquivo):
    with open(nome_arquivo, 'w', newline='', encoding='utf-8') as arquivo:
        campos = ['produto', 'quantidade', 'preco', 'data', 'total']
        escritor = csv.DictWriter(arquivo, fieldnames=campos)
        
        # Escreve cabe√ßalho
        escritor.writeheader()
        
        # Escreve dados com c√°lculo autom√°tico
        for venda in vendas:
            venda['total'] = venda['quantidade'] * venda['preco']
            escritor.writerow(venda)

# Exemplo de uso
vendas_exemplo = [
    {'produto': 'Notebook', 'quantidade': 2, 'preco': 2500.00, 'data': '2025-01-15'},
    {'produto': 'Mouse', 'quantidade': 5, 'preco': 45.00, 'data': '2025-01-15'},
    {'produto': 'Teclado', 'quantidade': 3, 'preco': 120.00, 'data': '2025-01-16'}
]

salvar_vendas_csv(vendas_exemplo, 'vendas.csv')

# Analisando dados CSV
def analisar_vendas(nome_arquivo):
    vendas = ler_vendas_csv(nome_arquivo)
    
    if not vendas:
        return
    
    # Estat√≠sticas
    total_vendas = sum(v['quantidade'] * v['preco'] for v in vendas)
    total_produtos = sum(v['quantidade'] for v in vendas)
    ticket_medio = total_vendas / len(vendas)
    
    print(f"üìä AN√ÅLISE DE VENDAS")
    print(f"Total de transa√ß√µes: {len(vendas)}")
    print(f"Total em vendas: R$ {total_vendas:,.2f}")
    print(f"Total de produtos: {total_produtos}")
    print(f"Ticket m√©dio: R$ {ticket_medio:.2f}")
    
    # Produto mais vendido
    produtos = {}
    for venda in vendas:
        produto = venda['produto']
        quantidade = venda['quantidade']
        produtos[produto] = produtos.get(produto, 0) + quantidade
    
    mais_vendido = max(produtos.items(), key=lambda x: x[1])
    print(f"Produto mais vendido: {mais_vendido[0]} ({mais_vendido[1]} unidades)")

analisar_vendas('vendas.csv')</code></pre>
            </div>
            
            <h5>5. JSON - Formato Moderno de Dados</h5>
            <div class="code-example">
                <pre><code>import json
from datetime import datetime

# Estrutura de dados complexa
sistema_config = {
    "aplicacao": {
        "nome": "Sistema de Vendas",
        "versao": "2.1.0",
        "desenvolvedor": "Python Dev Team"
    },
    "database": {
        "host": "localhost",
        "porta": 5432,
        "nome": "vendas_db",
        "ssl": True
    },
    "usuarios": [
        {"id": 1, "nome": "Admin", "perfil": "administrador", "ativo": True},
        {"id": 2, "nome": "Jo√£o", "perfil": "vendedor", "ativo": True},
        {"id": 3, "nome": "Maria", "perfil": "gerente", "ativo": False}
    ],
    "configuracoes": {
        "tema": "escuro",
        "idioma": "pt-BR",
        "timezone": "America/Sao_Paulo",
        "backup_automatico": True,
        "ultima_atualizacao": datetime.now().isoformat()
    }
}

# Salvando JSON formatado
def salvar_config(config, nome_arquivo):
    try:
        with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
            json.dump(config, arquivo, indent=4, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√£o salva em '{nome_arquivo}'")
    except Exception as e:
        print(f"‚ùå Erro ao salvar: {e}")

salvar_config(sistema_config, 'config.json')

# Carregando e modificando JSON
def carregar_config(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            return json.load(arquivo)
    except FileNotFoundError:
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON inv√°lido: {e}")
        return {}

# Sistema de configura√ß√£o din√¢mica
class ConfigManager:
    def __init__(self, arquivo_config):
        self.arquivo = arquivo_config
        self.config = carregar_config(arquivo_config)
    
    def get(self, chave, padrao=None):
        """Obt√©m valor de configura√ß√£o usando nota√ß√£o de ponto"""
        keys = chave.split('.')
        valor = self.config
        
        for key in keys:
            if isinstance(valor, dict) and key in valor:
                valor = valor[key]
            else:
                return padrao
        return valor
    
    def set(self, chave, valor):
        """Define valor de configura√ß√£o"""
        keys = chave.split('.')
        config_atual = self.config
        
        for key in keys[:-1]:
            if key not in config_atual:
                config_atual[key] = {}
            config_atual = config_atual[key]
        
        config_atual[keys[-1]] = valor
        self.salvar()
    
    def salvar(self):
        """Salva configura√ß√µes no arquivo"""
        salvar_config(self.config, self.arquivo)

# Usando o gerenciador
config = ConfigManager('config.json')
print(f"Nome da aplica√ß√£o: {config.get('aplicacao.nome')}")
print(f"Porta do banco: {config.get('database.porta')}")

# Modificando configura√ß√£o
config.set('configuracoes.tema', 'claro')
config.set('aplicacao.versao', '2.1.1')</code></pre>
            </div>
            
            <h5>6. Opera√ß√µes com Diret√≥rios</h5>
            <div class="code-example">
                <pre><code>import os
import glob
from pathlib import Path

# Trabalhando com caminhos
def organizar_arquivos():
    # Criando estrutura de diret√≥rios
    diretorios = ['documentos', 'imagens', 'videos', 'arquivos']
    
    for diretorio in diretorios:
        if not os.path.exists(diretorio):
            os.makedirs(diretorio)
            print(f"üìÅ Diret√≥rio '{diretorio}' criado")
    
    # Listando arquivos por extens√£o
    arquivos_txt = glob.glob("*.txt")
    arquivos_csv = glob.glob("*.csv")
    arquivos_json = glob.glob("*.json")
    
    print(f"Arquivos .txt encontrados: {len(arquivos_txt)}")
    print(f"Arquivos .csv encontrados: {len(arquivos_csv)}")
    print(f"Arquivos .json encontrados: {len(arquivos_json)}")
    
    # Movendo arquivos (simula√ß√£o)
    import shutil
    for arquivo in arquivos_txt:
        destino = os.path.join('documentos', arquivo)
        print(f"Moveria {arquivo} para {destino}")
        # shutil.move(arquivo, destino)  # Descomente para mover de verdade

# Informa√ß√µes detalhadas de arquivos
def info_arquivo(nome_arquivo):
    if os.path.exists(nome_arquivo):
        stat = os.stat(nome_arquivo)
        tamanho = stat.st_size
        
        # Convertendo tamanho para formato leg√≠vel
        if tamanho < 1024:
            tamanho_str = f"{tamanho} bytes"
        elif tamanho < 1024**2:
            tamanho_str = f"{tamanho/1024:.1f} KB"
        elif tamanho < 1024**3:
            tamanho_str = f"{tamanho/(1024**2):.1f} MB"
        else:
            tamanho_str = f"{tamanho/(1024**3):.1f} GB"
        
        modificado = datetime.fromtimestamp(stat.st_mtime)
        
        print(f"üìã Informa√ß√µes do arquivo '{nome_arquivo}':")
        print(f"   Tamanho: {tamanho_str}")
        print(f"   Modificado: {modificado.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"   Leg√≠vel: {'Sim' if os.access(nome_arquivo, os.R_OK) else 'N√£o'}")
        print(f"   Escrev√≠vel: {'Sim' if os.access(nome_arquivo, os.W_OK) else 'N√£o'}")

organizar_arquivos()
info_arquivo('config.json')</code></pre>
            </div>
            
            <h5>7. Sistema Completo de Logs</h5>
            <div class="code-example">
                <pre><code>import logging
from datetime import datetime
import os

class SistemaLog:
    def __init__(self, nome_arquivo="sistema.log", nivel=logging.INFO):
        # Cria diret√≥rio de logs se n√£o existir
        if not os.path.exists('logs'):
            os.makedirs('logs')
        
        # Configura o sistema de log
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(nivel)
        
        # Formato das mensagens
        formato = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Handler para arquivo
        arquivo_handler = logging.FileHandler(
            f'logs/{nome_arquivo}', 
            encoding='utf-8'
        )
        arquivo_handler.setFormatter(formato)
        self.logger.addHandler(arquivo_handler)
        
        # Handler para console
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formato)
        self.logger.addHandler(console_handler)
    
    def info(self, mensagem):
        self.logger.info(mensagem)
    
    def erro(self, mensagem):
        self.logger.error(mensagem)
    
    def aviso(self, mensagem):
        self.logger.warning(mensagem)
    
    def debug(self, mensagem):
        self.logger.debug(mensagem)

# Usando o sistema de log
log = SistemaLog("aplicacao.log")

log.info("Sistema iniciado")
log.aviso("Configura√ß√£o de rede n√£o encontrada")
log.erro("Falha ao conectar com banco de dados")
log.info("Sistema finalizado")</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Boas Pr√°ticas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Sempre use 'with open()'</strong> para garantir fechamento autom√°tico</li>
                    <li><strong>Especifique encoding='utf-8'</strong> para caracteres especiais</li>
                    <li><strong>Trate erros espec√≠ficos</strong> (FileNotFoundError, PermissionError)</li>
                    <li><strong>Fa√ßa backup</strong> antes de modificar arquivos importantes</li>
                    <li><strong>Use pathlib</strong> para opera√ß√µes modernas com caminhos</li>
                    <li><strong>Implemente logs</strong> para rastrear opera√ß√µes importantes</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Cuidados Importantes:</h6>
                <ul class="mb-0">
                    <li><strong>Modo 'w' apaga</strong> todo o conte√∫do do arquivo</li>
                    <li><strong>Verifique permiss√µes</strong> antes de tentar acessar arquivos</li>
                    <li><strong>Cuidado com encoding</strong> ao trabalhar com caracteres especiais</li>
                    <li><strong>Grandes arquivos</strong> podem consumir muita mem√≥ria com read()</li>
                    <li><strong>Sempre valide dados</strong> ao ler de arquivos externos</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como abrir um arquivo para leitura em Python?',
                'options': ['open("file.txt", "r")', 'read("file.txt")', 'file.open("r")', 'load("file.txt")'],
                'correct_answer': 'open("file.txt", "r")'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a vantagem de usar "with open()"?',
                'options': ['√â mais r√°pido', 'Fecha o arquivo automaticamente', 'Usa menos mem√≥ria', '√â obrigat√≥rio'],
                'correct_answer': 'Fecha o arquivo automaticamente'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual modo de abertura sobrescreve um arquivo existente?',
                'options': ['"r"', '"a"', '"w"', '"x"'],
                'correct_answer': '"w"'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual biblioteca √© usada para trabalhar com arquivos CSV?',
                'options': ['json', 'csv', 'pandas', 'file'],
                'correct_answer': 'csv'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como converter um dicion√°rio Python para JSON?',
                'options': ['json.loads()', 'json.dump()', 'json.save()', 'json.convert()'],
                'correct_answer': 'json.dump()'
            }
        ]
    },
    4: {
        'title': 'Fun√ß√µes e M√≥dulos',
        'description': 'Organize seu c√≥digo com fun√ß√µes reutiliz√°veis e modulariza√ß√£o',
        'content': '''<div class="module-header">
            <h3>‚ö° M√≥dulo 4 - Fun√ß√µes e M√≥dulos</h3>
            <p class="module-intro"><strong>Transforme-se em um arquiteto de c√≥digo!</strong> Domine fun√ß√µes avan√ßadas, escopo, decoradores e modulariza√ß√£o. Construa c√≥digo profissional, reutiliz√°vel e elegante!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Fun√ß√µes avan√ßadas com argumentos flex√≠veis</li>
                <li>Escopo de vari√°veis e closures</li>
                <li>Fun√ß√µes lambda e funcionais</li>
                <li>Decoradores e metaprograma√ß√£o</li>
                <li>M√≥dulos personalizados e packages</li>
                <li>Geradores e fun√ß√µes ass√≠ncronas</li>
                <li>Documenta√ß√£o profissional de c√≥digo</li>
                <li>Testes unit√°rios b√°sicos</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Fun√ß√µes Fundamentais e Avan√ßadas</h5>
            
            <div class="code-example">
                <h6>üî∏ Fun√ß√µes B√°sicas - Construindo Blocos:</h6>
                <pre><code># Fun√ß√£o simples sem par√¢metros
def saudacao():
    """Exibe uma sauda√ß√£o padr√£o"""
    print("üéâ Bem-vindo ao Sistema Python!")
    print("Vamos programar juntos!")

# Fun√ß√£o com par√¢metro √∫nico
def saudacao_personalizada(nome):
    """Exibe sauda√ß√£o personalizada"""
    print(f"Ol√°, {nome}! Que bom te ver aqui! üòä")

# Fun√ß√£o com m√∫ltiplos par√¢metros
def calcular_area_retangulo(largura, altura):
    """
    Calcula a √°rea de um ret√¢ngulo
    
    Args:
        largura (float): Largura do ret√¢ngulo
        altura (float): Altura do ret√¢ngulo
    
    Returns:
        float: √Årea calculada
    """
    area = largura * altura
    perimetro = 2 * (largura + altura)
    
    print(f"üìê Dimens√µes: {largura} x {altura}")
    print(f"üìè √Årea: {area}")
    print(f"‚≠ï Per√≠metro: {perimetro}")
    
    return area

# Chamando as fun√ß√µes
saudacao()
saudacao_personalizada("Maria")
resultado = calcular_area_retangulo(5.0, 3.0)</code></pre>
            </div>
            
            <h5>2. Par√¢metros Avan√ßados e Flexibilidade</h5>
            <div class="code-example">
                <pre><code># Par√¢metros com valores padr√£o
def criar_perfil(nome, idade=25, cidade="S√£o Paulo", ativo=True):
    """Cria perfil de usu√°rio com valores padr√£o"""
    perfil = {
        'nome': nome,
        'idade': idade,
        'cidade': cidade,
        'ativo': ativo,
        'id': hash(nome) % 10000  # ID simples baseado no nome
    }
    return perfil

# Diferentes formas de chamar
perfil1 = criar_perfil("Jo√£o")  # Usa valores padr√£o
perfil2 = criar_perfil("Maria", 30)  # Sobrescreve idade
perfil3 = criar_perfil("Pedro", cidade="Rio de Janeiro")  # Argumentos nomeados
perfil4 = criar_perfil(nome="Ana", idade=28, ativo=False)  # Todos nomeados

# *args - Argumentos posicionais vari√°veis
def calcular_media(*numeros):
    """Calcula m√©dia de qualquer quantidade de n√∫meros"""
    if not numeros:
        return 0
    
    total = sum(numeros)
    quantidade = len(numeros)
    media = total / quantidade
    
    print(f"üìä N√∫meros: {numeros}")
    print(f"üìà Soma: {total}")
    print(f"üéØ M√©dia: {media:.2f}")
    
    return media

# Exemplos de uso
media1 = calcular_media(10, 20, 30)
media2 = calcular_media(5, 7, 9, 11, 13, 15)
media3 = calcular_media(100)

# **kwargs - Argumentos nomeados vari√°veis
def criar_relatorio(**dados):
    """Cria relat√≥rio com informa√ß√µes din√¢micas"""
    print("üìã RELAT√ìRIO GERADO")
    print("=" * 30)
    
    for chave, valor in dados.items():
        chave_formatada = chave.replace('_', ' ').title()
        print(f"{chave_formatada}: {valor}")
    
    print("=" * 30)
    return dados

# Exemplos de uso
relatorio1 = criar_relatorio(
    vendas_hoje=1500,
    clientes_novos=23,
    ticket_medio=65.50
)

relatorio2 = criar_relatorio(
    temperatura_maxima=32,
    umidade=75,
    pressao_atmosferica=1013
)

# Combinando *args e **kwargs
def funcao_completa(obrigatorio, padrao=10, *args, **kwargs):
    """Demonstra todos os tipos de par√¢metros"""
    print(f"Obrigat√≥rio: {obrigatorio}")
    print(f"Padr√£o: {padrao}")
    print(f"Args extras: {args}")
    print(f"Kwargs: {kwargs}")

funcao_completa("teste", 20, "extra1", "extra2", nome="Jo√£o", idade=30)</code></pre>
            </div>
            
            <h5>3. Escopo de Vari√°veis e Closures</h5>
            <div class="code-example">
                <pre><code># Escopo local vs global
contador_global = 0  # Vari√°vel global

def incrementar_contador():
    global contador_global  # Modifica vari√°vel global
    contador_global += 1
    contador_local = 100  # Vari√°vel local
    print(f"Local: {contador_local}, Global: {contador_global}")

def demonstrar_escopo():
    x = "local"  # Vari√°vel local
    
    def funcao_interna():
        nonlocal x  # Modifica vari√°vel do escopo envolvente
        x = "modificada"
        y = "muito local"  # S√≥ existe aqui
        print(f"Dentro da fun√ß√£o interna: x={x}, y={y}")
    
    print(f"Antes: x={x}")
    funcao_interna()
    print(f"Depois: x={x}")

# Closures - Fun√ß√µes que "lembram" do ambiente
def criar_multiplicador(fator):
    """Cria fun√ß√£o que multiplica por um fator espec√≠fico"""
    def multiplicar(numero):
        return numero * fator  # 'fator' √© "lembrado"
    return multiplicar

# Criando multiplicadores espec√≠ficos
dobrar = criar_multiplicador(2)
triplicar = criar_multiplicador(3)
multiplicar_por_10 = criar_multiplicador(10)

print(f"Dobrar 5: {dobrar(5)}")  # 10
print(f"Triplicar 4: {triplicar(4)}")  # 12
print(f"Multiplicar 7 por 10: {multiplicar_por_10(7)}")  # 70

# Closure pr√°tico - Contador privado
def criar_contador():
    """Cria contador com estado privado"""
    count = 0
    
    def incrementar():
        nonlocal count
        count += 1
        return count
    
    def decrementar():
        nonlocal count
        count -= 1
        return count
    
    def obter_valor():
        return count
    
    def resetar():
        nonlocal count
        count = 0
        return count
    
    return {
        'incrementar': incrementar,
        'decrementar': decrementar,
        'valor': obter_valor,
        'resetar': resetar
    }

# Usando o contador
contador = criar_contador()
print(f"Valor inicial: {contador['valor']()}")  # 0
print(f"Incrementar: {contador['incrementar']()}")  # 1
print(f"Incrementar: {contador['incrementar']()}")  # 2
print(f"Decrementar: {contador['decrementar']()}")  # 1</code></pre>
            </div>
            
            <h5>4. Fun√ß√µes Lambda e Programa√ß√£o Funcional</h5>
            <div class="code-example">
                <pre><code># Fun√ß√µes lambda - Fun√ß√µes an√¥nimas
# Sintaxe: lambda argumentos: express√£o

# Lambda simples
quadrado = lambda x: x ** 2
print(f"Quadrado de 5: {quadrado(5)}")  # 25

# Lambda com m√∫ltiplos argumentos
somar = lambda a, b: a + b
print(f"Soma 3 + 7: {somar(3, 7)}")  # 10

# Usando lambda com fun√ß√µes built-in
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# map() - Aplica fun√ß√£o a cada elemento
quadrados = list(map(lambda x: x**2, numeros))
print(f"Quadrados: {quadrados}")

# filter() - Filtra elementos com base em condi√ß√£o
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(f"N√∫meros pares: {pares}")

# Exemplo mais complexo com dados estruturados
funcionarios = [
    {'nome': 'Jo√£o', 'salario': 5000, 'departamento': 'TI'},
    {'nome': 'Maria', 'salario': 6000, 'departamento': 'Vendas'},
    {'nome': 'Pedro', 'salario': 4500, 'departamento': 'TI'},
    {'nome': 'Ana', 'salario': 7000, 'departamento': 'Ger√™ncia'}
]

# Filtrando funcion√°rios de TI
funcionarios_ti = list(filter(
    lambda f: f['departamento'] == 'TI', 
    funcionarios
))

# Calculando sal√°rios com aumento de 10%
salarios_aumento = list(map(
    lambda f: {**f, 'salario_novo': f['salario'] * 1.1},
    funcionarios
))

# Ordenando por sal√°rio (descendente)
funcionarios_ordenados = sorted(
    funcionarios,
    key=lambda f: f['salario'],
    reverse=True
)

print("Funcion√°rios de TI:", funcionarios_ti)
print("Primeiro funcion√°rio ordenado:", funcionarios_ordenados[0])</code></pre>
            </div>
            
            <h5>5. Decoradores - Metaprograma√ß√£o</h5>
            <div class="code-example">
                <pre><code>import time
import functools

# Decorador simples para medir tempo de execu√ß√£o
def medir_tempo(func):
    """Decorador que mede tempo de execu√ß√£o de fun√ß√£o"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        inicio = time.time()
        resultado = func(*args, **kwargs)
        fim = time.time()
        print(f"‚è±Ô∏è {func.__name__} executou em {fim - inicio:.4f} segundos")
        return resultado
    return wrapper

# Decorador para log de fun√ß√£o
def log_funcao(func):
    """Decorador que registra chamadas de fun√ß√£o"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        args_str = ', '.join(map(str, args))
        kwargs_str = ', '.join(f"{k}={v}" for k, v in kwargs.items())
        params = ', '.join(filter(None, [args_str, kwargs_str]))
        
        print(f"üìù Chamando {func.__name__}({params})")
        resultado = func(*args, **kwargs)
        print(f"‚úÖ {func.__name__} retornou: {resultado}")
        return resultado
    return wrapper

# Decorador com par√¢metros
def repetir(vezes):
    """Decorador que repete execu√ß√£o de fun√ß√£o"""
    def decorador(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            for i in range(vezes):
                print(f"üîÑ Execu√ß√£o {i+1}/{vezes}")
                resultado = func(*args, **kwargs)
            return resultado
        return wrapper
    return decorador

# Usando os decoradores
@medir_tempo
@log_funcao
def calcular_fibonacci(n):
    """Calcula n√∫mero de Fibonacci"""
    if n <= 1:
        return n
    return calcular_fibonacci(n-1) + calcular_fibonacci(n-2)

@repetir(3)
def saudacao_especial(nome):
    """Sauda√ß√£o que ser√° repetida"""
    print(f"üéâ Ol√°, {nome}!")

# Testando decoradores
resultado_fib = calcular_fibonacci(10)
saudacao_especial("Python")

# Decorador de cache para otimiza√ß√£o
def cache(func):
    """Decorador que cacheia resultados de fun√ß√£o"""
    cache_dict = {}
    
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # Cria chave √∫nica para argumentos
        chave = str(args) + str(sorted(kwargs.items()))
        
        if chave in cache_dict:
            print(f"üíæ Cache hit para {func.__name__}")
            return cache_dict[chave]
        
        print(f"üîÑ Calculando {func.__name__}")
        resultado = func(*args, **kwargs)
        cache_dict[chave] = resultado
        return resultado
    
    return wrapper

@cache
@medir_tempo
def fibonacci_otimizado(n):
    """Fibonacci com cache para melhor performance"""
    if n <= 1:
        return n
    return fibonacci_otimizado(n-1) + fibonacci_otimizado(n-2)

print(f"Fibonacci de 35: {fibonacci_otimizado(35)}")</code></pre>
            </div>
            
            <h5>6. M√≥dulos e Packages</h5>
            <div class="code-example">
                <pre><code># Criando m√≥dulo personalizado (salvar como 'calculadora.py')
# ===========================================

"""
M√≥dulo de Calculadora Avan√ßada
Cont√©m fun√ß√µes matem√°ticas √∫teis para c√°lculos diversos
"""

import math

# Constantes do m√≥dulo
PI = 3.14159265359
E = 2.71828182846

def somar(a, b):
    """Soma dois n√∫meros"""
    return a + b

def subtrair(a, b):
    """Subtrai dois n√∫meros"""
    return a - b

def multiplicar(a, b):
    """Multiplica dois n√∫meros"""
    return a * b

def dividir(a, b):
    """Divide dois n√∫meros com tratamento de erro"""
    if b == 0:
        raise ValueError("Divis√£o por zero n√£o √© permitida")
    return a / b

def calcular_imc(peso, altura):
    """
    Calcula o √çndice de Massa Corporal
    
    Args:
        peso (float): Peso em quilogramas
        altura (float): Altura em metros
    
    Returns:
        dict: IMC e classifica√ß√£o
    """
    imc = peso / (altura ** 2)
    
    if imc < 18.5:
        classificacao = "Abaixo do peso"
    elif imc < 25:
        classificacao = "Peso normal"
    elif imc < 30:
        classificacao = "Sobrepeso"
    else:
        classificacao = "Obesidade"
    
    return {
        'imc': round(imc, 2),
        'classificacao': classificacao
    }

def calcular_juros_compostos(capital, taxa, tempo):
    """
    Calcula juros compostos
    
    Args:
        capital (float): Valor inicial
        taxa (float): Taxa de juros (decimal)
        tempo (int): Per√≠odo em anos
    
    Returns:
        dict: Montante final e juros ganhos
    """
    montante = capital * (1 + taxa) ** tempo
    juros = montante - capital
    
    return {
        'capital_inicial': capital,
        'montante_final': round(montante, 2),
        'juros_ganhos': round(juros, 2),
        'rentabilidade': round((juros / capital) * 100, 2)
    }

class Calculadora:
    """Classe calculadora com hist√≥rico"""
    
    def __init__(self):
        self.historico = []
    
    def calcular(self, operacao, a, b=None):
        """Executa opera√ß√£o e salva no hist√≥rico"""
        try:
            if operacao == '+':
                resultado = a + b
                expressao = f"{a} + {b} = {resultado}"
            elif operacao == '-':
                resultado = a - b
                expressao = f"{a} - {b} = {resultado}"
            elif operacao == '*':
                resultado = a * b
                expressao = f"{a} * {b} = {resultado}"
            elif operacao == '/':
                resultado = dividir(a, b)
                expressao = f"{a} / {b} = {resultado}"
            elif operacao == '^':
                resultado = a ** b
                expressao = f"{a} ^ {b} = {resultado}"
            elif operacao == 'sqrt':
                resultado = math.sqrt(a)
                expressao = f"‚àö{a} = {resultado}"
            else:
                raise ValueError(f"Opera√ß√£o '{operacao}' n√£o reconhecida")
            
            self.historico.append(expressao)
            return resultado
            
        except Exception as e:
            error_msg = f"Erro: {e}"
            self.historico.append(error_msg)
            raise
    
    def obter_historico(self):
        """Retorna hist√≥rico de c√°lculos"""
        return self.historico.copy()
    
    def limpar_historico(self):
        """Limpa hist√≥rico de c√°lculos"""
        self.historico.clear()

# Vari√°vel global para demonstra√ß√£o
versao_modulo = "1.0.0"

if __name__ == "__main__":
    # C√≥digo que s√≥ executa se m√≥dulo for executado diretamente
    print("Testando m√≥dulo calculadora...")
    
    calc = Calculadora()
    print(f"5 + 3 = {calc.calcular('+', 5, 3)}")
    print(f"10 / 2 = {calc.calcular('/', 10, 2)}")
    print(f"Hist√≥rico: {calc.obter_historico()}")

# ===========================================
# Usando o m√≥dulo (em outro arquivo)

# import calculadora
# from calculadora import Calculadora, calcular_imc
# import calculadora as calc

# # Usando fun√ß√µes do m√≥dulo
# resultado = calculadora.somar(10, 20)
# imc_info = calcular_imc(70, 1.75)

# # Usando classe do m√≥dulo
# minha_calc = Calculadora()
# resultado = minha_calc.calcular('+', 15, 25)</code></pre>
            </div>
            
            <h5>7. Geradores e Fun√ß√µes Avan√ßadas</h5>
            <div class="code-example">
                <pre><code># Geradores - Fun√ß√µes que produzem valores sob demanda
def fibonacci_generator():
    """Gerador infinito de n√∫meros de Fibonacci"""
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Usando o gerador
fib = fibonacci_generator()
primeiros_10_fib = [next(fib) for _ in range(10)]
print(f"Primeiros 10 Fibonacci: {primeiros_10_fib}")

# Gerador com par√¢metros
def gerar_numeros_pares(limite):
    """Gera n√∫meros pares at√© o limite"""
    numero = 0
    while numero <= limite:
        if numero % 2 == 0:
            yield numero
        numero += 1

pares_ate_20 = list(gerar_numeros_pares(20))
print(f"Pares at√© 20: {pares_ate_20}")

# Generator expression
quadrados = (x**2 for x in range(10))
print(f"Soma dos quadrados: {sum(quadrados)}")

# Fun√ß√£o recursiva
def fatorial(n):
    """Calcula fatorial de forma recursiva"""
    if n == 0 or n == 1:
        return 1
    return n * fatorial(n - 1)

print(f"Fatorial de 5: {fatorial(5)}")

# Fun√ß√£o que retorna m√∫ltiplos valores
def analisar_numeros(lista):
    """Analisa lista de n√∫meros e retorna estat√≠sticas"""
    if not lista:
        return 0, 0, 0, 0
    
    total = sum(lista)
    media = total / len(lista)
    maximo = max(lista)
    minimo = min(lista)
    
    return total, media, maximo, minimo

# Desempacotando retorno m√∫ltiplo
numeros = [10, 20, 30, 40, 50]
soma, media, max_val, min_val = analisar_numeros(numeros)
print(f"Soma: {soma}, M√©dia: {media}, Max: {max_val}, Min: {min_val}")</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Boas Pr√°ticas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Princ√≠pio DRY:</strong> "Don't Repeat Yourself" - Evite duplica√ß√£o</li>
                    <li><strong>Fun√ß√£o √∫nica:</strong> Cada fun√ß√£o deve ter uma responsabilidade espec√≠fica</li>
                    <li><strong>Nomes descritivos:</strong> Use nomes que expliquem o que a fun√ß√£o faz</li>
                    <li><strong>Docstrings:</strong> Documente todas as fun√ß√µes importantes</li>
                    <li><strong>Par√¢metros padr√£o:</strong> Use valores padr√£o para maior flexibilidade</li>
                    <li><strong>Type hints:</strong> Use anota√ß√µes de tipo para clareza</li>
                    <li><strong>Testes:</strong> Teste suas fun√ß√µes com diferentes entradas</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Armadilhas Comuns:</h6>
                <ul class="mb-0">
                    <li><strong>Mut√°veis como padr√£o:</strong> Evite listas/dicts como valores padr√£o</li>
                    <li><strong>Escopo global:</strong> Minimize uso de vari√°veis globais</li>
                    <li><strong>Fun√ß√µes muito grandes:</strong> Divida fun√ß√µes complexas em menores</li>
                    <li><strong>Recurs√£o infinita:</strong> Sempre defina caso base</li>
                    <li><strong>Efeitos colaterais:</strong> Fun√ß√µes devem ser previs√≠veis</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como definir uma fun√ß√£o em Python?',
                'options': ['def funcao():', 'function funcao():', 'create funcao():', 'func funcao():'],
                'correct_answer': 'def funcao():'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que a palavra-chave "return" faz em uma fun√ß√£o?',
                'options': ['Inicia a fun√ß√£o', 'Retorna um valor', 'Para a execu√ß√£o', 'Imprime na tela'],
                'correct_answer': 'Retorna um valor'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como importar uma fun√ß√£o espec√≠fica de um m√≥dulo?',
                'options': ['import modulo.funcao', 'from modulo import funcao', 'get modulo.funcao', 'use modulo.funcao'],
                'correct_answer': 'from modulo import funcao'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a diferen√ßa entre par√¢metros e argumentos?',
                'options': ['S√£o a mesma coisa', 'Par√¢metros s√£o na defini√ß√£o, argumentos na chamada', 'Argumentos s√£o na defini√ß√£o, par√¢metros na chamada', 'Par√¢metros s√£o obrigat√≥rios'],
                'correct_answer': 'Par√¢metros s√£o na defini√ß√£o, argumentos na chamada'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar um par√¢metro com valor padr√£o?',
                'options': ['def func(x=10):', 'def func(x:10):', 'def func(x->10):', 'def func(x default 10):'],
                'correct_answer': 'def func(x=10):'
            }
        ]
    },
    5: {
        'title': 'Programa√ß√£o Orientada a Objetos',
        'description': 'Domine classes, objetos, heran√ßa e encapsulamento em Python',
        'content': '''<div class="module-header">
            <h3>üè¢ M√≥dulo 5 - Programa√ß√£o Orientada a Objetos</h3>
            <p class="module-intro"><strong>Construa c√≥digo mais inteligente!</strong> Descubra o poder das classes e objetos.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Conceitos de classes e objetos</li>
                <li>M√©todos e atributos</li>
                <li>Construtor __init__</li>
                <li>Heran√ßa e polimorfismo</li>
                <li>Encapsulamento</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Classes e Objetos</h5>
            <p>Uma classe √© um modelo para criar objetos. Um objeto √© uma inst√¢ncia de uma classe.</p>
            
            <div class="code-example">
                <h6>Criando uma classe:</h6>
                <pre><code>class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    
    def apresentar(self):
        return f"Ol√°, eu sou {self.nome} e tenho {self.idade} anos"
    
    def fazer_aniversario(self):
        self.idade += 1
        print(f"{self.nome} fez anivers√°rio! Agora tem {self.idade} anos")

# Criando objetos
pessoa1 = Pessoa("Jo√£o", 25)
pessoa2 = Pessoa("Maria", 30)

print(pessoa1.apresentar())
pessoa1.fazer_aniversario()</code></pre>
            </div>
            
            <div class="alert alert-info">
                <h6><i class="fas fa-info-circle"></i> Conceitos Importantes:</h6>
                <ul class="mb-0">
                    <li><strong>self:</strong> Refer√™ncia ao objeto atual</li>
                    <li><strong>__init__:</strong> Construtor da classe</li>
                    <li><strong>_atributo:</strong> Indica atributo "privado"</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como definir uma classe em Python?',
                'options': ['class MinhaClasse:', 'create MinhaClasse:', 'def MinhaClasse:', 'object MinhaClasse:'],
                'correct_answer': 'class MinhaClasse:'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo √© chamado automaticamente ao criar um objeto?',
                'options': ['__create__', '__init__', '__new__', '__start__'],
                'correct_answer': '__init__'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© heran√ßa em POO?',
                'options': ['Copiar c√≥digo', 'Uma classe filha herda caracter√≠sticas da classe pai', 'Deletar classes', 'Renomear m√©todos'],
                'correct_answer': 'Uma classe filha herda caracter√≠sticas da classe pai'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que significa "self" em Python?',
                'options': ['Refer√™ncia ao objeto atual', 'Nome da classe', 'M√©todo especial', 'Vari√°vel global'],
                'correct_answer': 'Refer√™ncia ao objeto atual'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como indicar que um atributo √© privado por conven√ß√£o?',
                'options': ['Usar mai√∫scula', 'Come√ßar com _', 'Usar @private', 'Come√ßar com #'],
                'correct_answer': 'Come√ßar com _'
            }
        ]
    },
    6: {
        'title': 'Tratamento de Exce√ß√µes',
        'description': 'Aprenda a lidar com erros usando try, except, finally e raise',
        'content': '''<div class="module-header">
            <h3>‚ö†Ô∏è M√≥dulo 6 - Tratamento de Exce√ß√µes</h3>
            <p class="module-intro"><strong>Torne seus programas √† prova de erros!</strong> Aprenda a antecipar e tratar erros.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Tipos comuns de exce√ß√µes</li>
                <li>Blocos try, except, else, finally</li>
                <li>Capturando exce√ß√µes espec√≠ficas</li>
                <li>Lan√ßando exce√ß√µes com raise</li>
                <li>Criando exce√ß√µes personalizadas</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Por que Tratar Exce√ß√µes?</h5>
            <p>Exce√ß√µes s√£o erros que podem ocorrer durante a execu√ß√£o. Trat√°-las evita que o programa "quebre".</p>
            
            <div class="alert alert-warning">
                <strong>Exce√ß√µes comuns:</strong>
                <ul class="mb-0">
                    <li><code>ZeroDivisionError</code> - Divis√£o por zero</li>
                    <li><code>ValueError</code> - Valor inadequado</li>
                    <li><code>TypeError</code> - Tipo incorreto</li>
                    <li><code>FileNotFoundError</code> - Arquivo n√£o encontrado</li>
                    <li><code>KeyError</code> - Chave inexistente</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>Tratamento b√°sico:</h6>
                <pre><code>try:
    numero = int(input("Digite um n√∫mero: "))
    resultado = 10 / numero
    print(f"Resultado: {resultado}")
except ZeroDivisionError:
    print("Erro: N√£o √© poss√≠vel dividir por zero!")
except ValueError:
    print("Erro: Digite um n√∫mero v√°lido!")</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Boa Pr√°tica:</h6>
                <p class="mb-0">Sempre trate exce√ß√µes espec√≠ficas antes de capturar Exception gen√©rica. Isso torna o c√≥digo mais robusto.</p>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave inicia um bloco de tratamento de exce√ß√£o?',
                'options': ['try', 'catch', 'except', 'handle'],
                'correct_answer': 'try'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave captura uma exce√ß√£o?',
                'options': ['catch', 'except', 'handle', 'grab'],
                'correct_answer': 'except'
            },
            {
                'type': 'multiple_choice',
                'question': 'Quando o bloco "finally" √© executado?',
                'options': ['Apenas se houver erro', 'Apenas se n√£o houver erro', 'Sempre', 'Nunca'],
                'correct_answer': 'Sempre'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como lan√ßar uma exce√ß√£o manualmente?',
                'options': ['throw Exception', 'raise Exception', 'error Exception', 'exception Exception'],
                'correct_answer': 'raise Exception'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que acontece se uma exce√ß√£o n√£o for tratada?',
                'options': ['O programa continua', 'O programa para com erro', 'O erro √© ignorado', 'Nada acontece'],
                'correct_answer': 'O programa para com erro'
            }
        ]
    },
    7: {
        'title': 'Bibliotecas e APIs',
        'description': 'Use bibliotecas externas e integre com APIs para expandir funcionalidades',
        'content': '''<div class="module-header">
            <h3>üìö M√≥dulo 7 - Bibliotecas e APIs</h3>
            <p class="module-intro"><strong>Expanda o poder do Python!</strong> Descubra como usar bibliotecas externas e APIs.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Instalando bibliotecas com pip</li>
                <li>Fazendo requisi√ß√µes HTTP</li>
                <li>Consumindo APIs REST</li>
                <li>Processando dados JSON</li>
                <li>Bibliotecas populares do Python</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Gerenciamento de Pacotes</h5>
            <p>O pip √© o gerenciador de pacotes do Python que permite instalar bibliotecas externas.</p>
            
            <div class="code-example">
                <h6>Comandos pip essenciais:</h6>
                <pre><code># Instalar uma biblioteca
pip install requests
pip install pandas numpy

# Listar bibliotecas instaladas
pip list

# Mostrar informa√ß√µes de uma biblioteca
pip show requests

# Atualizar uma biblioteca
pip install --upgrade requests

# Desinstalar
pip uninstall requests</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Dica Profissional:</h6>
                <p class="mb-0">Sempre verifique a documenta√ß√£o oficial das APIs antes de us√°-las. Muitas requerem autentica√ß√£o via chaves API.</p>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como instalar uma biblioteca externa?',
                'options': ['pip install nome_biblioteca', 'python install nome_biblioteca', 'import install nome_biblioteca', 'get nome_biblioteca'],
                'correct_answer': 'pip install nome_biblioteca'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual biblioteca √© popular para fazer requisi√ß√µes HTTP?',
                'options': ['http', 'requests', 'urllib', 'web'],
                'correct_answer': 'requests'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© uma API?',
                'options': ['Um tipo de vari√°vel', 'Interface de Programa√ß√£o de Aplica√ß√µes', 'Uma biblioteca Python', 'Um banco de dados'],
                'correct_answer': 'Interface de Programa√ß√£o de Aplica√ß√µes'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo HTTP √© usado para buscar dados de uma API?',
                'options': ['POST', 'PUT', 'GET', 'DELETE'],
                'correct_answer': 'GET'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como listar todas as bibliotecas instaladas?',
                'options': ['pip show', 'pip list', 'pip install', 'pip check'],
                'correct_answer': 'pip list'
            }
        ]
    },
    8: {
        'title': 'Banco de Dados',
        'description': 'Conecte e manipule bancos de dados usando SQLite e opera√ß√µes CRUD',
        'content': '''<div class="module-header">
            <h3>üóÑÔ∏è M√≥dulo 8 - Banco de Dados</h3>
            <p class="module-intro"><strong>Persista seus dados!</strong> Aprenda a armazenar e gerenciar dados usando bancos de dados.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Conceitos de banco de dados</li>
                <li>SQLite com Python</li>
                <li>Opera√ß√µes CRUD (Create, Read, Update, Delete)</li>
                <li>Consultas SQL b√°sicas</li>
                <li>Boas pr√°ticas de seguran√ßa</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Introdu√ß√£o a Bancos de Dados</h5>
            <p>Bancos de dados s√£o sistemas organizados para armazenar, gerenciar e recuperar informa√ß√µes.</p>
            
            <div class="alert alert-info">
                <strong>Conceitos importantes:</strong>
                <ul class="mb-0">
                    <li><strong>Tabela:</strong> Estrutura que organiza dados</li>
                    <li><strong>Linha/Registro:</strong> Um conjunto de dados</li>
                    <li><strong>Coluna/Campo:</strong> Um tipo de informa√ß√£o</li>
                    <li><strong>Chave Prim√°ria:</strong> Identificador √∫nico</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-shield-alt"></i> Seguran√ßa:</h6>
                <p class="mb-0">Sempre use par√¢metros (?) para evitar ataques de SQL Injection. Nunca concatene strings diretamente nas consultas!</p>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual biblioteca √© comumente usada para conectar ao SQLite?',
                'options': ['sqlite3', 'database', 'sqlconnector', 'dbapi'],
                'correct_answer': 'sqlite3'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual comando SQL √© usado para criar uma tabela?',
                'options': ['MAKE TABLE', 'CREATE TABLE', 'NEW TABLE', 'ADD TABLE'],
                'correct_answer': 'CREATE TABLE'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que significa CRUD em banco de dados?',
                'options': ['Create, Read, Update, Delete', 'Connect, Run, Update, Drop', 'Copy, Rename, Upload, Download', 'Create, Remove, Use, Data'],
                'correct_answer': 'Create, Read, Update, Delete'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo √© usado para executar comandos SQL?',
                'options': ['cursor.run()', 'cursor.execute()', 'cursor.query()', 'cursor.command()'],
                'correct_answer': 'cursor.execute()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Para que serve o comando "commit()"?',
                'options': ['Conectar ao banco', 'Salvar as mudan√ßas', 'Fechar a conex√£o', 'Criar tabelas'],
                'correct_answer': 'Salvar as mudan√ßas'
            }
        ]
    },
    9: {
        'title': 'Projeto Final',
        'description': 'Integre todos os conceitos aprendidos em um projeto Python completo',
        'content': '''<div class="module-header">
            <h3>üéÜ M√≥dulo 9 - Projeto Final</h3>
            <p class="module-intro"><strong>Integre todos os conceitos!</strong> Crie um projeto completo que demonstra dom√≠nio em Python.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aplicar:</h4>
            <ul class="learning-objectives">
                <li>Planejamento e arquitetura de projeto</li>
                <li>Integra√ß√£o de todos os conceitos aprendidos</li>
                <li>Boas pr√°ticas de programa√ß√£o</li>
                <li>Documenta√ß√£o e testes</li>
                <li>Versionamento com Git</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Planejamento do Projeto</h5>
            <p>Antes de come√ßar a programar, √© essencial planejar bem o projeto.</p>
            
            <div class="alert alert-info">
                <strong>Etapas do planejamento:</strong>
                <ol class="mb-0">
                    <li>Definir o problema a ser resolvido</li>
                    <li>Listar funcionalidades principais</li>
                    <li>Escolher tecnologias e bibliotecas</li>
                    <li>Criar estrutura de pastas</li>
                    <li>Definir fluxo de dados</li>
                </ol>
            </div>
            
            <div class="alert alert-success">
                <strong>Princ√≠pios importantes:</strong>
                <ul class="mb-0">
                    <li><strong>DRY:</strong> Don't Repeat Yourself</li>
                    <li><strong>KISS:</strong> Keep It Simple, Stupid</li>
                    <li><strong>SRP:</strong> Single Responsibility Principle</li>
                    <li><strong>Coment√°rios:</strong> Explique o "porqu√™", n√£o o "o qu√™"</li>
                    <li><strong>Nomes:</strong> Use nomes descritivos</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-trophy"></i> Desafio Final:</h6>
                <p class="mb-0">Crie um projeto que use pelo menos: classes, arquivos, banco de dados, tratamento de exce√ß√µes e uma API externa. Mostre sua evolu√ß√£o!</p>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'O que √© mais importante em um projeto Python?',
                'options': ['C√≥digo limpo e organizado', 'Usar muitas bibliotecas', 'Ter muitas linhas', 'Ser complexo'],
                'correct_answer': 'C√≥digo limpo e organizado'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a melhor pr√°tica para organizar um projeto Python?',
                'options': ['Tudo em um arquivo', 'Separar em m√≥dulos tem√°ticos', 'Usar apenas fun√ß√µes', 'Evitar comentarios'],
                'correct_answer': 'Separar em m√≥dulos tem√°ticos'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que significa SOLID em programa√ß√£o?',
                'options': ['Um tipo de banco de dados', 'Princ√≠pios de design de software', 'Uma biblioteca Python', 'Um framework web'],
                'correct_answer': 'Princ√≠pios de design de software'
            },
            {
                'type': 'multiple_choice',
                'question': 'Por que √© importante tratar exce√ß√µes em um projeto?',
                'options': ['Para o programa rodar mais r√°pido', 'Para evitar que o programa pare inesperadamente', 'Para usar menos mem√≥ria', 'N√£o √© importante'],
                'correct_answer': 'Para evitar que o programa pare inesperadamente'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© refatora√ß√£o de c√≥digo?',
                'options': ['Deletar o c√≥digo', 'Melhorar a estrutura sem mudar a funcionalidade', 'Adicionar novos recursos', 'Corrigir bugs'],
                'correct_answer': 'Melhorar a estrutura sem mudar a funcionalidade'
            }
        ]
    }
}

# Final exam questions covering all modules
FINAL_EXAM = {
    'title': 'Exame Final - Python Completo',
    'description': 'Teste seus conhecimentos em todos os m√≥dulos do curso',
    'questions': [
        {
            'type': 'multiple_choice',
            'question': 'Qual √© a sa√≠da do c√≥digo: print(type(42))?',
            'options': ['<class "number">', '<class "integer">', '<class "int">', '<class "num">'],
            'correct_answer': '<class "int">'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ criaria uma lista com n√∫meros de 0 a 4?',
            'options': ['list(range(5))', 'list(0,4)', 'range(0,5)', 'list(range(0,4))'],
            'correct_answer': 'list(range(5))'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual m√©todo √© usado para adicionar um elemento ao final de uma lista?',
            'options': ['add()', 'append()', 'insert()', 'push()'],
            'correct_answer': 'append()'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ abriria um arquivo chamado "dados.txt" para escrita?',
            'options': ['open("dados.txt", "w")', 'file("dados.txt", "write")', 'open("dados.txt", "write")', 'write("dados.txt")'],
            'correct_answer': 'open("dados.txt", "w")'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual palavra-chave √© usada para definir uma fun√ß√£o?',
            'options': ['function', 'def', 'func', 'define'],
            'correct_answer': 'def'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ criaria uma classe chamada "Pessoa" em Python?',
            'options': ['class Pessoa():', 'create class Pessoa:', 'def class Pessoa:', 'new Pessoa():'],
            'correct_answer': 'class Pessoa():'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual bloco de c√≥digo √© executado quando uma exce√ß√£o N√ÉO ocorre?',
            'options': ['except', 'finally', 'else', 'catch'],
            'correct_answer': 'else'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ instalaria a biblioteca "requests"?',
            'options': ['python install requests', 'pip install requests', 'install requests', 'get requests'],
            'correct_answer': 'pip install requests'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual biblioteca Python √© padr√£o para trabalhar com bancos SQLite?',
            'options': ['sqlite', 'sqlite3', 'database', 'sql'],
            'correct_answer': 'sqlite3'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual √© uma caracter√≠stica importante de um c√≥digo bem escrito?',
            'options': ['Ser o mais longo poss√≠vel', 'Usar vari√°veis com nomes confusos', 'Ser leg√≠vel e bem documentado', 'Evitar coment√°rios'],
            'correct_answer': 'Ser leg√≠vel e bem documentado'
        }
    ]
}