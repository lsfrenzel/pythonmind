# Quiz data for the Learning Management System

MODULES = {
    1: {
        'title': 'Introdu√ß√£o ao Python',
        'description': 'Fundamentos da linguagem Python, vari√°veis, tipos de dados e fun√ß√µes b√°sicas',
        'content': '''<div class="module-header">
            <h3>üöÄ M√≥dulo 1 - Introdu√ß√£o ao Python</h3>
            <p class="module-intro"><strong>Bem-vindo ao mundo Python!</strong> Uma linguagem poderosa, elegante e vers√°til que conquista desenvolvedores ao redor do mundo. Prepare-se para uma jornada incr√≠vel no universo da programa√ß√£o!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aprender:</h4>
            <ul class="learning-objectives">
                <li>Hist√≥ria detalhada e filosofia do Python</li>
                <li>Configura√ß√£o completa do ambiente de desenvolvimento</li>
                <li>Vari√°veis, tipos de dados e convers√µes</li>
                <li>Operadores matem√°ticos, l√≥gicos e de compara√ß√£o</li>
                <li>Entrada, sa√≠da e formata√ß√£o de dados</li>
                <li>Coment√°rios e documenta√ß√£o de c√≥digo</li>
                <li>Primeiro programa completo</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Detalhado:</h4>
            
            <h5>1. Hist√≥ria e Filosofia do Python</h5>
            <p>Python foi criado por <strong>Guido van Rossum</strong> em 1989 na Holanda. Mais que uma linguagem, Python √© uma filosofia de programa√ß√£o que prioriza:</p>
            
            <div class="alert alert-info">
                <strong>O Zen do Python (PEP 20):</strong>
                <ul class="mb-0">
                    <li><em>"Bonito √© melhor que feio"</em></li>
                    <li><em>"Expl√≠cito √© melhor que impl√≠cito"</em></li>
                    <li><em>"Simples √© melhor que complexo"</em></li>
                    <li><em>"Legibilidade conta"</em></li>
                    <li><em>"Se a implementa√ß√£o √© dif√≠cil de explicar, √© uma m√° ideia"</em></li>
                </ul>
            </div>
            
            <h5>2. Por que Python √© Especial?</h5>
            <div class="row">
                <div class="col-md-6">
                    <h6>‚úÖ Vantagens:</h6>
                    <ul>
                        <li><strong>Sintaxe Clean:</strong> Parece ingl√™s!</li>
                        <li><strong>Multiprop√≥sito:</strong> Web, IA, automa√ß√£o, ci√™ncia</li>
                        <li><strong>Grande Comunidade:</strong> Milh√µes de desenvolvedores</li>
                        <li><strong>Bibliotecas Ricas:</strong> 400.000+ no PyPI</li>
                        <li><strong>Cross-platform:</strong> Roda em qualquer sistema</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <h6>‚ö†Ô∏è Considera√ß√µes:</h6>
                    <ul>
                        <li>Mais lento que C/C++ (mas otimiz√°vel)</li>
                        <li>N√£o ideal para apps m√≥veis nativos</li>
                        <li>Consome mais mem√≥ria</li>
                    </ul>
                </div>
            </div>
            
            <h5>3. Tipos de Dados Fundamentais</h5>
            
            <h6>üìä N√∫meros em Python:</h6>
            <div class="code-example">
                <pre><code># Inteiros (int) - n√∫meros sem casas decimais
idade = 25
ano_nascimento = 1998
pontos = -50  # Pode ser negativo
numero_grande = 1_000_000  # Use _ para facilitar leitura

# Decimais (float) - n√∫meros com casas decimais
altura = 1.75
temperatura = -10.5
pi = 3.14159
notacao_cientifica = 2.5e6  # 2.500.000

# N√∫meros complexos (complex) - usados em matem√°tica avan√ßada
numero_complexo = 3 + 4j
print(f"Parte real: {numero_complexo.real}")
print(f"Parte imagin√°ria: {numero_complexo.imag}")

# Opera√ß√µes matem√°ticas
resultado = 10 + 5   # Adi√ß√£o = 15
resultado = 10 - 3   # Subtra√ß√£o = 7
resultado = 4 * 5    # Multiplica√ß√£o = 20
resultado = 15 / 3   # Divis√£o = 5.0 (sempre retorna float)
resultado = 15 // 3  # Divis√£o inteira = 5
resultado = 10 % 3   # Resto da divis√£o = 1
resultado = 2 ** 3   # Exponencia√ß√£o = 8

# Verificando tipos
print(type(25))        # <class 'int'>
print(type(25.0))      # <class 'float'>
print(isinstance(25, int))  # True</code></pre>
            </div>
            
            <h6>üìù Strings (Texto) em Detalhes:</h6>
            <div class="code-example">
                <pre><code># Diferentes formas de criar strings
nome = "Jo√£o Silva"           # Aspas duplas
cidade = 'S√£o Paulo'          # Aspas simples
texto_multilinha = """Este √© um texto
que pode ocupar v√°rias
linhas sem problemas"""

# Escape characters (caracteres especiais)
texto_especial = "Ele disse: \"Ol√°!\" e foi embora"
caminho = "C:\\Users\\Nome\\Documentos"  # \\ para barra invertida
quebra_linha = "Primeira linha\nSegunda linha"
tab = "Nome\tIdade\tCidade"

# String methods (m√©todos √∫teis)
nome = "jo√£o silva santos"
print(nome.upper())          # JO√ÉO SILVA SANTOS
print(nome.lower())          # jo√£o silva santos
print(nome.title())          # Jo√£o Silva Santos
print(nome.capitalize())     # Jo√£o silva santos
print(nome.count('a'))       # 4 (conta ocorr√™ncias)
print(nome.find('silva'))    # 5 (posi√ß√£o da substring)
print(nome.replace('silva', 'pedro'))  # jo√£o pedro santos

# Verifica√ß√µes booleanas de strings
print(nome.startswith('jo√£o'))   # True
print(nome.endswith('santos'))   # True
print(nome.isalpha())           # False (tem espa√ßos)
print("12345".isdigit())        # True
print("abc123".isalnum())       # True

# Formata√ß√£o de strings (f-strings - m√©todo moderno)
nome = "Maria"
idade = 30
altura = 1.65
print(f"Ol√°, eu sou {nome}, tenho {idade} anos e {altura:.1f}m de altura")

# Formata√ß√£o com format() (m√©todo cl√°ssico)
template = "Nome: {}, Idade: {}, Profiss√£o: {}"
print(template.format("Pedro", 28, "Programador"))

# Fatiamento de strings (slicing)
palavra = "Python"
print(palavra[0])      # P (primeiro caractere)
print(palavra[-1])     # n (√∫ltimo caractere)
print(palavra[0:3])    # Pyt (do 0 ao 2)
print(palavra[2:])     # thon (do 2 ao final)
print(palavra[:4])     # Pyth (do in√≠cio ao 3)
print(palavra[::2])    # Pto (pula de 2 em 2)
print(palavra[::-1])   # nohtyP (inverte a string)</code></pre>
            </div>
            
            <h6>üîÑ Booleanos e L√≥gica:</h6>
            <div class="code-example">
                <pre><code># Valores booleanos
verdadeiro = True
falso = False

# Operadores de compara√ß√£o
print(5 > 3)    # True
print(5 < 3)    # False
print(5 == 5)   # True (igual)
print(5 != 3)   # True (diferente)
print(5 >= 5)   # True (maior ou igual)
print(3 <= 5)   # True (menor ou igual)

# Operadores l√≥gicos
print(True and True)   # True
print(True and False)  # False
print(True or False)   # True
print(not True)        # False

# Valores que s√£o considerados False em Python
print(bool(0))         # False
print(bool(""))        # False (string vazia)
print(bool([]))        # False (lista vazia)
print(bool(None))      # False

# Valores que s√£o considerados True
print(bool(1))         # True
print(bool("texto"))   # True
print(bool([1, 2]))    # True</code></pre>
            </div>
            
            <h5>4. Vari√°veis e Conven√ß√µes</h5>
            <div class="code-example">
                <pre><code># Conven√ß√µes de nomenclatura (PEP 8)
# ‚úÖ CORRETO:
nome_usuario = "Jo√£o"        # snake_case para vari√°veis
CONSTANTE_MAXIMA = 100       # UPPER_CASE para constantes
idade_minima = 18

# ‚ùå EVITE:
nomeUsuario = "Jo√£o"         # camelCase (reservado para classes)
nome-usuario = "Jo√£o"        # h√≠fen n√£o √© permitido
2nome = "Jo√£o"               # n√£o pode come√ßar com n√∫mero

# M√∫ltiplas atribui√ß√µes
x, y, z = 1, 2, 3
a = b = c = 0

# Troca de vari√°veis (pyth√¥nico!)
a, b = b, a

# Atribui√ß√£o com operadores
contador = 0
contador += 1    # equivale a: contador = contador + 1
contador -= 1    # equivale a: contador = contador - 1
contador *= 2    # equivale a: contador = contador * 2</code></pre>
            </div>
            
            <h5>5. Entrada e Sa√≠da de Dados</h5>
            <div class="code-example">
                <pre><code># Fun√ß√£o input() sempre retorna string
nome = input("Digite seu nome: ")
print(f"Ol√°, {nome}!")

# Convertendo entrada para n√∫meros
idade = int(input("Digite sua idade: "))
altura = float(input("Digite sua altura (em metros): "))
salario = float(input("Digite seu sal√°rio: "))

# Valida√ß√£o b√°sica de entrada
try:
    numero = int(input("Digite um n√∫mero: "))
    print(f"Voc√™ digitou: {numero}")
except ValueError:
    print("Erro: Isso n√£o √© um n√∫mero v√°lido!")

# Formata√ß√£o avan√ßada de sa√≠da
preco = 29.99
print(f"Pre√ßo: R$ {preco:.2f}")           # R$ 29.99
print(f"Pre√ßo: R$ {preco:>10.2f}")        # R$     29.99 (alinhado √† direita)
print(f"Produto: {'Notebook':<15} R$ {preco:>8.2f}")  # Notebook          R$    29.99

# Sa√≠da com separadores personalizados
print("A", "B", "C", sep=" - ")           # A - B - C
print("Primeira linha", end=" ")          # N√£o quebra linha
print("mesma linha")                      # Primeira linha mesma linha</code></pre>
            </div>
            
            <h5>6. Coment√°rios e Documenta√ß√£o</h5>
            <div class="code-example">
                <pre><code># Coment√°rio de linha simples
nome = "Jo√£o"  # Coment√°rio no final da linha

"""
Coment√°rio de m√∫ltiplas linhas
Usado para documenta√ß√£o extensa
ou para desabilitar blocos de c√≥digo
"""

# Docstrings - documenta√ß√£o de fun√ß√µes (veremos mais adiante)
def saudacao(nome):
    """
    Exibe uma sauda√ß√£o personalizada.
    
    Args:
        nome (str): O nome da pessoa a ser cumprimentada
        
    Returns:
        None
    """
    print(f"Ol√°, {nome}!")

# Coment√°rios informativos
valor_em_reais = 100
taxa_dolar = 5.20  # Taxa do d√≥lar em 27/08/2025
valor_em_dolares = valor_em_reais / taxa_dolar</code></pre>
            </div>
            
            <h5>7. Primeiro Programa Completo</h5>
            <div class="code-example">
                <pre><code># Programa: Calculadora de IMC
print("=" * 40)
print("    CALCULADORA DE IMC")
print("=" * 40)

# Coletando dados do usu√°rio
nome = input("Digite seu nome: ")
peso = float(input("Digite seu peso (kg): "))
altura = float(input("Digite sua altura (m): "))

# Calculando o IMC
imc = peso / (altura ** 2)

# Determinando a classifica√ß√£o
if imc < 18.5:
    classificacao = "Abaixo do peso"
elif imc < 25:
    classificacao = "Peso normal"
elif imc < 30:
    classificacao = "Sobrepeso"
else:
    classificacao = "Obesidade"

# Exibindo resultado
print(f"\n{nome}, seu IMC √© {imc:.1f}")
print(f"Classifica√ß√£o: {classificacao}")
print("=" * 40)</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Dicas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Use f-strings</strong> para formata√ß√£o (mais leg√≠vel que .format())</li>
                    <li><strong>Siga o PEP 8</strong> para conven√ß√µes de c√≥digo Python</li>
                    <li><strong>Python √© case-sensitive:</strong> 'nome' ‚â† 'Nome'</li>
                    <li><strong>Use nomes descritivos:</strong> 'idade_usuario' > 'x'</li>
                    <li><strong>Teste sempre:</strong> Use print() para verificar valores</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Erros Comuns:</h6>
                <ul class="mb-0">
                    <li>Esquecer de converter input() para int/float</li>
                    <li>Usar = ao inv√©s de == para compara√ß√£o</li>
                    <li>N√£o considerar espa√ßos em branco em strings</li>
                    <li>Dividir por zero sem verifica√ß√£o</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a fun√ß√£o usada para exibir texto na tela em Python?',
                'options': ['show()', 'display()', 'print()', 'output()'],
                'correct_answer': 'print()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar uma vari√°vel em Python?',
                'options': ['var nome = "Jo√£o"', 'nome = "Jo√£o"', 'string nome = "Jo√£o"', 'nome := "Jo√£o"'],
                'correct_answer': 'nome = "Jo√£o"'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual tipo de dado representa n√∫meros inteiros?',
                'options': ['float', 'string', 'int', 'number'],
                'correct_answer': 'int'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como capturar dados do usu√°rio?',
                'options': ['get()', 'input()', 'read()', 'scan()'],
                'correct_answer': 'input()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual s√≠mbolo √© usado para coment√°rios em Python?',
                'options': ['//', '/* */', '#', '--'],
                'correct_answer': '#'
            }
        ]
    },
    2: {
        'title': 'Estruturas Condicionais e Loops',
        'description': 'Aprenda a usar if, elif, else, for e while para controlar o fluxo do programa',
        'content': '''<div class="module-header">
            <h3>üéØ M√≥dulo 2 - Estruturas Condicionais e Loops</h3>
            <p class="module-intro"><strong>D√™ intelig√™ncia aos seus programas!</strong> Aprenda a tomar decis√µes complexas e criar repeti√ß√µes eficientes. Este m√≥dulo transformar√° seus programas de simples para verdadeiramente inteligentes!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Estruturas condicionais avan√ßadas (if, elif, else aninhados)</li>
                <li>Operadores de compara√ß√£o, l√≥gicos e de identidade</li>
                <li>Loops for e while com controle total</li>
                <li>Fun√ß√£o range() em todos os cen√°rios</li>
                <li>Controle de fluxo avan√ßado (break, continue, else)</li>
                <li>Loops aninhados e otimiza√ß√£o</li>
                <li>Condi√ß√µes complexas e operadores tern√°rios</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Estruturas Condicionais Detalhadas</h5>
            <p>As estruturas condicionais s√£o o c√©rebro dos seus programas, permitindo tomar decis√µes baseadas em dados e situa√ß√µes espec√≠ficas.</p>
            
            <div class="code-example">
                <h6>üî∏ If Simples - Tomando uma decis√£o:</h6>
                <pre><code># Sintaxe b√°sica
idade = 18
if idade >= 18:
    print("Voc√™ pode votar!")
    print("Voc√™ tem direitos plenos!")

# M√∫ltiplas a√ß√µes no if
salario = 5000
if salario > 3000:
    print("Sal√°rio acima da m√©dia")
    desconto_ir = salario * 0.275
    print(f"Desconto do IR: R$ {desconto_ir:.2f}")
    salario_liquido = salario - desconto_ir
    print(f"Sal√°rio l√≠quido: R$ {salario_liquido:.2f}")</code></pre>
                
                <h6>üî∏ If-Else - Duas possibilidades:</h6>
                <pre><code>nota = float(input("Digite sua nota: "))

if nota >= 7:
    print("üéâ Parab√©ns! Voc√™ foi aprovado!")
    if nota >= 9:
        print("üëë Nota excelente! Voc√™ est√° entre os melhores!")
else:
    print("üòî Infelizmente voc√™ foi reprovado")
    print(f"Voc√™ precisava de {7 - nota:.1f} pontos a mais")
    print("N√£o desista! Estude mais e tente novamente!")</code></pre>
                
                <h6>üî∏ If-Elif-Else - M√∫ltiplas condi√ß√µes:</h6>
                <pre><code>nota = float(input("Digite sua nota (0-10): "))

if nota >= 9:
    conceito = "A"
    mensagem = "Excelente! Performance excepcional!"
elif nota >= 8:
    conceito = "B"
    mensagem = "Muito bom! Continue assim!"
elif nota >= 7:
    conceito = "C"
    mensagem = "Bom trabalho! Aprovado!"
elif nota >= 5:
    conceito = "D"
    mensagem = "Regular. Precisa melhorar"
else:
    conceito = "F"
    mensagem = "Insuficiente. Reprovado"

print(f"Conceito: {conceito} - {mensagem}")</code></pre>
            </div>
            
            <h5>2. Operadores de Compara√ß√£o e L√≥gicos</h5>
            
            <div class="alert alert-info">
                <h6>üîç Operadores de Compara√ß√£o:</h6>
                <ul class="mb-0">
                    <li><code>==</code> - Igual a (aten√ß√£o: n√£o confundir com =)</li>
                    <li><code>!=</code> - Diferente de</li>
                    <li><code>&gt;</code> - Maior que</li>
                    <li><code>&lt;</code> - Menor que</li>
                    <li><code>&gt;=</code> - Maior ou igual</li>
                    <li><code>&lt;=</code> - Menor ou igual</li>
                    <li><code>in</code> - Pertence √† sequ√™ncia</li>
                    <li><code>not in</code> - N√£o pertence √† sequ√™ncia</li>
                    <li><code>is</code> - Identidade de objeto</li>
                    <li><code>is not</code> - N√£o √© o mesmo objeto</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>üî∏ Operadores L√≥gicos - Combinando Condi√ß√µes:</h6>
                <pre><code># AND - Todas as condi√ß√µes devem ser verdadeiras
idade = 25
salario = 4000
tem_carteira = True

if idade >= 21 and salario >= 3000 and tem_carteira:
    print("Aprovado para financiamento do carro!")
else:
    print("N√£o atende aos crit√©rios do financiamento")

# OR - Pelo menos uma condi√ß√£o deve ser verdadeira
dia_semana = "s√°bado"
feriado = False

if dia_semana in ["s√°bado", "domingo"] or feriado:
    print("Hoje n√£o √© dia de trabalho!")
else:
    print("Dia de trabalho!")

# NOT - Inverte o valor l√≥gico
usuario_logado = False

if not usuario_logado:
    print("Por favor, fa√ßa login para continuar")
else:
    print("Bem-vindo ao sistema!")

# Combina√ß√µes complexas
temperatura = 25
chuva = False
vento_forte = False

if temperatura > 20 and not chuva and not vento_forte:
    print("Dia perfeito para atividades ao ar livre!")
elif temperatura > 15 and not chuva:
    print("Dia bom para uma caminhada")
else:
    print("Melhor ficar em casa hoje")</code></pre>
            </div>
            
            <h5>3. Operadores de Pertencimento e Identidade</h5>
            <div class="code-example">
                <pre><code># Operador IN - verifica se elemento est√° em sequ√™ncia
frutas = ["ma√ß√£", "banana", "laranja", "uva"]
fruta_escolhida = input("Digite uma fruta: ").lower()

if fruta_escolhida in frutas:
    print(f"Temos {fruta_escolhida} dispon√≠vel!")
else:
    print(f"Desculpe, n√£o temos {fruta_escolhida}")
    print(f"Frutas dispon√≠veis: {', '.join(frutas)}")

# Verificando caracteres em string
email = input("Digite seu email: ")
if "@" in email and "." in email:
    print("Email parece v√°lido")
else:
    print("Email inv√°lido")

# Operador IS - verifica identidade de objeto
a = None
if a is None:
    print("Vari√°vel 'a' n√£o foi definida")
    
lista1 = [1, 2, 3]
lista2 = [1, 2, 3]
lista3 = lista1

print(lista1 == lista2)    # True (mesmo conte√∫do)
print(lista1 is lista2)    # False (objetos diferentes)
print(lista1 is lista3)    # True (mesmo objeto)</code></pre>
            </div>
            
            <h5>4. Loops - Repeti√ß√µes Inteligentes</h5>
            
            <h6>üîÑ Loop FOR - Quando sabemos quantas repeti√ß√µes:</h6>
            <div class="code-example">
                <pre><code># Range b√°sico
print("Contando de 0 a 4:")
for i in range(5):
    print(f"N√∫mero: {i}")

# Range com in√≠cio e fim
print("\nContando de 1 a 10:")
for numero in range(1, 11):
    print(f"N√∫mero: {numero}")

# Range com passo (step)
print("\nN√∫meros pares de 0 a 20:")
for par in range(0, 21, 2):
    print(par, end=" ")

print("\n\nContagem regressiva:")
for i in range(10, 0, -1):
    print(i, end=" ")
print("üöÄ Decolagem!")

# Loop em strings
nome = "Python"
print("\nLetras da palavra Python:")
for letra in nome:
    print(f"Letra: {letra}")

# Loop em listas
frutas = ["ma√ß√£", "banana", "laranja"]
print("\nFrutas dispon√≠veis:")
for fruta in frutas:
    print(f"- {fruta.title()}")

# Enumerate - obter √≠ndice e valor
print("\nFrutas com posi√ß√£o:")
for indice, fruta in enumerate(frutas, 1):
    print(f"{indice}. {fruta.title()}")

# Calculando a tabuada
numero = int(input("\nDigite um n√∫mero para a tabuada: "))
print(f"\nTabuada do {numero}:")
for i in range(1, 11):
    resultado = numero * i
    print(f"{numero} x {i:2d} = {resultado:2d}")</code></pre>
            </div>
            
            <h6>üîÑ Loop WHILE - Quando a condi√ß√£o define o fim:</h6>
            <div class="code-example">
                <pre><code># While b√°sico
contador = 0
print("Contando at√© 5:")
while contador <= 5:
    print(f"Contador: {contador}")
    contador += 1

# Loop at√© entrada v√°lida
while True:
    idade = input("Digite sua idade (ou 'sair'): ")
    if idade.lower() == 'sair':
        break
    try:
        idade = int(idade)
        if idade < 0:
            print("Idade n√£o pode ser negativa!")
        elif idade > 150:
            print("Idade muito alta!")
        else:
            print(f"Idade v√°lida: {idade} anos")
            break
    except ValueError:
        print("Por favor, digite um n√∫mero v√°lido!")

# Acumulador - somando n√∫meros
soma = 0
contador = 0
print("\nDigite n√∫meros para somar (0 para parar):")

while True:
    try:
        numero = float(input("N√∫mero: "))
        if numero == 0:
            break
        soma += numero
        contador += 1
        print(f"Soma atual: {soma}")
    except ValueError:
        print("Digite um n√∫mero v√°lido!")

if contador > 0:
    media = soma / contador
    print(f"\nEstat√≠sticas:")
    print(f"Total de n√∫meros: {contador}")
    print(f"Soma: {soma}")
    print(f"M√©dia: {media:.2f}")</code></pre>
            </div>
            
            <h5>5. Controle de Fluxo Avan√ßado</h5>
            
            <div class="code-example">
                <h6>üî∏ BREAK - Saindo do loop:</h6>
                <pre><code># Procurando um n√∫mero espec√≠fico
numeros = [1, 5, 3, 8, 2, 7, 4]
procurado = 8

for i, numero in enumerate(numeros):
    print(f"Verificando posi√ß√£o {i}: {numero}")
    if numero == procurado:
        print(f"‚úÖ Encontrei o n√∫mero {procurado} na posi√ß√£o {i}!")
        break
else:
    print(f"‚ùå N√∫mero {procurado} n√£o encontrado na lista")

# Sistema de login com tentativas limitadas
tentativas = 3
senha_correta = "python123"

while tentativas > 0:
    senha = input(f"Digite a senha ({tentativas} tentativas restantes): ")
    if senha == senha_correta:
        print("üéâ Login realizado com sucesso!")
        break
    else:
        tentativas -= 1
        if tentativas > 0:
            print(f"‚ùå Senha incorreta! {tentativas} tentativas restantes")
        else:
            print("üö´ Muitas tentativas inv√°lidas. Acesso bloqueado!")
            break</code></pre>
                
                <h6>üî∏ CONTINUE - Pular para pr√≥xima itera√ß√£o:</h6>
                <pre><code># Processando apenas n√∫meros pares
print("N√∫meros pares de 1 a 20:")
for numero in range(1, 21):
    if numero % 2 != 0:  # Se √© √≠mpar
        continue  # Pula para pr√≥xima itera√ß√£o
    print(f"Par: {numero}")

# Validando dados de uma lista
nomes = ["Jo√£o", "", "Maria", "123", "Pedro", "Ana"]
nomes_validos = []

for nome in nomes:
    if not nome:  # Nome vazio
        print("‚ùå Nome vazio ignorado")
        continue
    if nome.isdigit():  # Nome s√≥ com n√∫meros
        print(f"‚ùå '{nome}' n√£o √© um nome v√°lido")
        continue
    if len(nome) < 2:  # Nome muito curto
        print(f"‚ùå '{nome}' √© muito curto")
        continue
    
    # Se chegou aqui, o nome √© v√°lido
    nomes_validos.append(nome.title())
    print(f"‚úÖ '{nome.title()}' adicionado")

print(f"\nNomes v√°lidos: {nomes_validos}")</code></pre>
                
                <h6>üî∏ ELSE em Loops - Executado se n√£o houver break:</h6>
                <pre><code># Verificando se uma lista cont√©m apenas n√∫meros positivos
numeros = [1, 5, 3, 8, 2, 7, 4]

for numero in numeros:
    if numero <= 0:
        print(f"‚ùå Encontrado n√∫mero n√£o positivo: {numero}")
        break
else:
    print("‚úÖ Todos os n√∫meros s√£o positivos!")

# Procurando usu√°rio em sistema
usuarios = ["admin", "jo√£o", "maria", "pedro"]
usuario_procurado = input("Digite o nome do usu√°rio: ").lower()

for usuario in usuarios:
    if usuario == usuario_procurado:
        print(f"‚úÖ Usu√°rio '{usuario}' encontrado!")
        break
else:
    print(f"‚ùå Usu√°rio '{usuario_procurado}' n√£o est√° cadastrado")</code></pre>
            </div>
            
            <h5>6. Loops Aninhados - Loops dentro de Loops</h5>
            <div class="code-example">
                <pre><code># Tabuada completa (1 a 10)
print("TABUADA COMPLETA")
print("=" * 40)

for numero in range(1, 11):
    print(f"\nTabuada do {numero}:")
    for multiplicador in range(1, 11):
        resultado = numero * multiplicador
        print(f"{numero} x {multiplicador:2d} = {resultado:2d}")

# Padr√£o de estrelas
print("\nPadr√£o de estrelas:")
for linha in range(1, 6):
    for estrela in range(linha):
        print("*", end="")
    print()  # Quebra de linha

# Sistema de coordenadas
print("\nMapa de coordenadas 5x5:")
for y in range(5):
    for x in range(5):
        print(f"({x},{y})", end=" ")
    print()  # Nova linha ap√≥s cada linha</code></pre>
            </div>
            
            <h5>7. Operador Tern√°rio - If em Uma Linha</h5>
            <div class="code-example">
                <pre><code># Sintaxe: valor_se_verdadeiro if condi√ß√£o else valor_se_falso

idade = 20
status = "Maior de idade" if idade >= 18 else "Menor de idade"
print(status)

# Comparando com if normal
if idade >= 18:
    status = "Maior de idade"
else:
    status = "Menor de idade"

# Exemplos pr√°ticos
nota = 8.5
resultado = "Aprovado" if nota >= 7 else "Reprovado"

numero = -5
absoluto = numero if numero >= 0 else -numero

salario = 3000
categoria = "Alto" if salario > 5000 else "M√©dio" if salario > 2000 else "Baixo"

# Em fun√ß√£o
def classificar_temperatura(temp):
    return "Quente" if temp > 30 else "Agrad√°vel" if temp > 20 else "Frio"

print(classificar_temperatura(25))  # Agrad√°vel</code></pre>
            </div>
            
            <h5>8. Projeto Pr√°tico Completo</h5>
            <div class="code-example">
                <pre><code># JOGO DE ADIVINHA√á√ÉO AVAN√áADO
import random

print("üéØ JOGO DE ADIVINHA√á√ÉO")
print("=" * 40)

# Configura√ß√µes do jogo
numero_secreto = random.randint(1, 100)
tentativas_maximas = 7
tentativas = 0
acertou = False

print("Pensei em um n√∫mero entre 1 e 100!")
print(f"Voc√™ tem {tentativas_maximas} tentativas para acertar.")
print("üí° Dicas: 'maior' ou 'menor' te ajudar√£o!")

while tentativas < tentativas_maximas and not acertou:
    try:
        # Entrada do usu√°rio
        chute = int(input(f"\nTentativa {tentativas + 1}: "))
        tentativas += 1
        
        # Verifica√ß√£o
        if chute == numero_secreto:
            acertou = True
            print(f"üéâ PARAB√âNS! Voc√™ acertou em {tentativas} tentativas!")
            
            # Classifica√ß√£o da performance
            if tentativas <= 3:
                print("üëë Performance EXCEPCIONAL!")
            elif tentativas <= 5:
                print("‚≠ê Performance √ìTIMA!")
            else:
                print("üëç Performance BOA!")
        
        elif chute < numero_secreto:
            print("üìà O n√∫mero √© MAIOR que", chute)
        else:
            print("üìâ O n√∫mero √© MENOR que", chute)
        
        # Dicas baseadas na proximidade
        diferenca = abs(chute - numero_secreto)
        if diferenca <= 5 and not acertou:
            print("üî• MUITO QUENTE! Voc√™ est√° bem pr√≥ximo!")
        elif diferenca <= 15 and not acertou:
            print("üå°Ô∏è Quente! Est√° no caminho certo!")
        
        # Aviso de tentativas restantes
        if tentativas < tentativas_maximas and not acertou:
            restantes = tentativas_maximas - tentativas
            print(f"‚è∞ Restam {restantes} tentativas")
    
    except ValueError:
        print("‚ùå Por favor, digite apenas n√∫meros!")

# Resultado final
if not acertou:
    print(f"\nüíî Game Over! O n√∫mero era {numero_secreto}")
    print("üîÑ Tente novamente!")

print("\nüìä ESTAT√çSTICAS DO JOGO:")
print(f"N√∫mero secreto: {numero_secreto}")
print(f"Tentativas usadas: {tentativas}")
print(f"Taxa de acerto: {(1/tentativas)*100:.1f}%")
print("=" * 40)</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Dicas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Use elif</strong> ao inv√©s de m√∫ltiplos if quando as condi√ß√µes s√£o mutuamente exclusivas</li>
                    <li><strong>Combine condi√ß√µes</strong> com and/or para l√≥gica mais complexa</li>
                    <li><strong>For vs While:</strong> Use for quando souber o n√∫mero de itera√ß√µes, while quando depender de condi√ß√£o</li>
                    <li><strong>Evite loops infinitos:</strong> Sempre garanta que a condi√ß√£o do while eventualmente seja False</li>
                    <li><strong>Use break e continue</strong> para controlar o fluxo com precis√£o</li>
                    <li><strong>Operador tern√°rio</strong> torna o c√≥digo mais conciso para condi√ß√µes simples</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Armadilhas Comuns:</h6>
                <ul class="mb-0">
                    <li><strong>= vs ==:</strong> = √© atribui√ß√£o, == √© compara√ß√£o</li>
                    <li><strong>Indenta√ß√£o:</strong> Python usa indenta√ß√£o para definir blocos</li>
                    <li><strong>range(10):</strong> vai de 0 a 9, n√£o at√© 10</li>
                    <li><strong>input() sempre retorna string:</strong> converta com int() ou float()</li>
                    <li><strong>Loop infinito:</strong> certifique-se de que a condi√ß√£o mude dentro do loop</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave √© usada para estruturas condicionais?',
                'options': ['when', 'if', 'check', 'condition'],
                'correct_answer': 'if'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar um loop que repete 5 vezes?',
                'options': ['for i in range(5):', 'loop 5 times:', 'repeat(5):', 'while 5:'],
                'correct_answer': 'for i in range(5):'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual a diferen√ßa entre "if" e "elif"?',
                'options': ['S√£o iguais', 'elif √© usado para condi√ß√µes adicionais', 'elif √© mais r√°pido', 'if √© obrigat√≥rio'],
                'correct_answer': 'elif √© usado para condi√ß√µes adicionais'
            },
            {
                'type': 'multiple_choice',
                'question': 'Quando usar while ao inv√©s de for?',
                'options': ['Sempre', 'Nunca', 'Quando n√£o sabemos quantas repeti√ß√µes', 'When √© mais r√°pido'],
                'correct_answer': 'Quando n√£o sabemos quantas repeti√ß√µes'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que faz range(1, 6)?',
                'options': ['N√∫meros de 1 a 6', 'N√∫meros de 1 a 5', 'N√∫meros de 0 a 6', 'N√∫meros de 0 a 5'],
                'correct_answer': 'N√∫meros de 1 a 5'
            }
        ]
    },
    3: {
        'title': 'Manipula√ß√£o de Arquivos',
        'description': 'Domine leitura, escrita e processamento de arquivos e formatos como CSV e JSON',
        'content': '''<div class="module-header">
            <h3>üìÅ M√≥dulo 3 - Manipula√ß√£o de Arquivos</h3>
            <p class="module-intro"><strong>Domine a persist√™ncia de dados!</strong> Aprenda a ler, escrever e processar arquivos de forma profissional. Transforme seus programas em sistemas que lembram e processam informa√ß√µes!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Manipula√ß√£o avan√ßada de arquivos de texto</li>
                <li>Todos os modos de abertura e suas aplica√ß√µes</li>
                <li>Gerenciamento seguro e tratamento de erros</li>
                <li>Processamento completo de CSV e planilhas</li>
                <li>Trabalhando com JSON e configura√ß√µes</li>
                <li>Opera√ß√µes com diret√≥rios e caminhos</li>
                <li>Encoding e arquivos internacionais</li>
                <li>Backup autom√°tico e versionamento</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Avan√ßado:</h4>
            
            <h5>1. Fundamentos de Arquivos</h5>
            <p>Arquivos s√£o a ponte entre seus programas e o mundo real. Dominar sua manipula√ß√£o √© essencial para qualquer aplica√ß√£o profissional.</p>
            
            <div class="alert alert-info">
                <h6>üîß Modos de Abertura Completos:</h6>
                <ul class="mb-0">
                    <li><code>'r'</code> - Leitura (padr√£o, arquivo deve existir)</li>
                    <li><code>'w'</code> - Escrita (sobrescreve ou cria novo)</li>
                    <li><code>'a'</code> - Anexar (adiciona ao final)</li>
                    <li><code>'x'</code> - Cria√ß√£o exclusiva (falha se j√° existir)</li>
                    <li><code>'r+'</code> - Leitura e escrita</li>
                    <li><code>'w+'</code> - Escrita e leitura (trunca arquivo)</li>
                    <li><code>'a+'</code> - Anexar e leitura</li>
                    <li><code>'b'</code> - Modo bin√°rio (combina com outros)</li>
                    <li><code>'t'</code> - Modo texto (padr√£o)</li>
                </ul>
            </div>
            
            <h5>2. Leitura Avan√ßada de Arquivos</h5>
            <div class="code-example">
                <pre><code># Diferentes formas de ler arquivos
import os

# Verificando se arquivo existe
if os.path.exists('dados.txt'):
    print("Arquivo encontrado!")
else:
    print("Arquivo n√£o existe")

# Lendo arquivo completo
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    conteudo_completo = arquivo.read()
    print("Conte√∫do completo:")
    print(conteudo_completo)

# Lendo linha por linha (economiza mem√≥ria)
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    numero_linha = 1
    for linha in arquivo:
        print(f"Linha {numero_linha}: {linha.strip()}")
        numero_linha += 1

# Lendo todas as linhas em uma lista
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    linhas = arquivo.readlines()
    print(f"Total de linhas: {len(linhas)}")
    for i, linha in enumerate(linhas, 1):
        print(f"{i:2d}: {linha.strip()}")

# Lendo quantidade espec√≠fica de caracteres
with open('dados.txt', 'r', encoding='utf-8') as arquivo:
    primeiros_100_chars = arquivo.read(100)
    print(f"Primeiros 100 caracteres: {primeiros_100_chars}")

# Lendo com tratamento de erro robusto
def ler_arquivo_seguro(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            return arquivo.read()
    except FileNotFoundError:
        print(f"‚ùå Arquivo '{nome_arquivo}' n√£o encontrado")
        return None
    except PermissionError:
        print(f"‚ùå Sem permiss√£o para ler '{nome_arquivo}'")
        return None
    except UnicodeDecodeError:
        print(f"‚ùå Erro de codifica√ß√£o em '{nome_arquivo}'")
        try:
            # Tenta com encoding diferente
            with open(nome_arquivo, 'r', encoding='latin-1') as arquivo:
                return arquivo.read()
        except:
            return None

conteudo = ler_arquivo_seguro('exemplo.txt')</code></pre>
            </div>
            
            <h5>3. Escrita Profissional de Arquivos</h5>
            <div class="code-example">
                <pre><code># Escrevendo dados estruturados
import datetime

def criar_log(mensagem, nivel="INFO"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {nivel}: {mensagem}\n"
    
    with open('sistema.log', 'a', encoding='utf-8') as arquivo:
        arquivo.write(log_entry)

# Salvando dados de usu√°rios
usuarios = [
    {"nome": "Jo√£o", "idade": 30, "email": "joao@email.com"},
    {"nome": "Maria", "idade": 25, "email": "maria@email.com"},
    {"nome": "Pedro", "idade": 35, "email": "pedro@email.com"}
]

# Salvando como texto formatado
with open('usuarios.txt', 'w', encoding='utf-8') as arquivo:
    arquivo.write("RELAT√ìRIO DE USU√ÅRIOS\n")
    arquivo.write("=" * 50 + "\n")
    arquivo.write(f"Gerado em: {datetime.datetime.now()}\n\n")
    
    for i, usuario in enumerate(usuarios, 1):
        arquivo.write(f"{i}. Nome: {usuario['nome']}\n")
        arquivo.write(f"   Idade: {usuario['idade']} anos\n")
        arquivo.write(f"   Email: {usuario['email']}\n")
        arquivo.write("-" * 30 + "\n")

# Backup autom√°tico
def criar_backup(arquivo_original):
    import shutil
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    nome_backup = f"{arquivo_original}.backup_{timestamp}"
    try:
        shutil.copy2(arquivo_original, nome_backup)
        print(f"‚úÖ Backup criado: {nome_backup}")
        return nome_backup
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return None

# Escrevendo com backup autom√°tico
def escrever_com_backup(nome_arquivo, conteudo):
    # Cria backup se arquivo j√° existe
    if os.path.exists(nome_arquivo):
        criar_backup(nome_arquivo)
    
    # Escreve novo conteudo
    with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
        arquivo.write(conteudo)
    print(f"‚úÖ Arquivo '{nome_arquivo}' atualizado")</code></pre>
            </div>
            
            <h5>4. Trabalhando com CSV - Dados Tabulares</h5>
            <div class="code-example">
                <pre><code>import csv

# Lendo arquivo CSV
def ler_vendas_csv(nome_arquivo):
    vendas = []
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            leitor = csv.DictReader(arquivo)
            for linha in leitor:
                # Convertendo tipos apropriados
                venda = {
                    'produto': linha['produto'],
                    'quantidade': int(linha['quantidade']),
                    'preco': float(linha['preco']),
                    'data': linha['data']
                }
                vendas.append(venda)
    except FileNotFoundError:
        print("‚ùå Arquivo de vendas n√£o encontrado")
    except ValueError as e:
        print(f"‚ùå Erro de convers√£o: {e}")
    
    return vendas

# Criando arquivo CSV com dados
def salvar_vendas_csv(vendas, nome_arquivo):
    with open(nome_arquivo, 'w', newline='', encoding='utf-8') as arquivo:
        campos = ['produto', 'quantidade', 'preco', 'data', 'total']
        escritor = csv.DictWriter(arquivo, fieldnames=campos)
        
        # Escreve cabe√ßalho
        escritor.writeheader()
        
        # Escreve dados com c√°lculo autom√°tico
        for venda in vendas:
            venda['total'] = venda['quantidade'] * venda['preco']
            escritor.writerow(venda)

# Exemplo de uso
vendas_exemplo = [
    {'produto': 'Notebook', 'quantidade': 2, 'preco': 2500.00, 'data': '2025-01-15'},
    {'produto': 'Mouse', 'quantidade': 5, 'preco': 45.00, 'data': '2025-01-15'},
    {'produto': 'Teclado', 'quantidade': 3, 'preco': 120.00, 'data': '2025-01-16'}
]

salvar_vendas_csv(vendas_exemplo, 'vendas.csv')

# Analisando dados CSV
def analisar_vendas(nome_arquivo):
    vendas = ler_vendas_csv(nome_arquivo)
    
    if not vendas:
        return
    
    # Estat√≠sticas
    total_vendas = sum(v['quantidade'] * v['preco'] for v in vendas)
    total_produtos = sum(v['quantidade'] for v in vendas)
    ticket_medio = total_vendas / len(vendas)
    
    print(f"üìä AN√ÅLISE DE VENDAS")
    print(f"Total de transa√ß√µes: {len(vendas)}")
    print(f"Total em vendas: R$ {total_vendas:,.2f}")
    print(f"Total de produtos: {total_produtos}")
    print(f"Ticket m√©dio: R$ {ticket_medio:.2f}")
    
    # Produto mais vendido
    produtos = {}
    for venda in vendas:
        produto = venda['produto']
        quantidade = venda['quantidade']
        produtos[produto] = produtos.get(produto, 0) + quantidade
    
    mais_vendido = max(produtos.items(), key=lambda x: x[1])
    print(f"Produto mais vendido: {mais_vendido[0]} ({mais_vendido[1]} unidades)")

analisar_vendas('vendas.csv')</code></pre>
            </div>
            
            <h5>5. JSON - Formato Moderno de Dados</h5>
            <div class="code-example">
                <pre><code>import json
from datetime import datetime

# Estrutura de dados complexa
sistema_config = {
    "aplicacao": {
        "nome": "Sistema de Vendas",
        "versao": "2.1.0",
        "desenvolvedor": "Python Dev Team"
    },
    "database": {
        "host": "localhost",
        "porta": 5432,
        "nome": "vendas_db",
        "ssl": True
    },
    "usuarios": [
        {"id": 1, "nome": "Admin", "perfil": "administrador", "ativo": True},
        {"id": 2, "nome": "Jo√£o", "perfil": "vendedor", "ativo": True},
        {"id": 3, "nome": "Maria", "perfil": "gerente", "ativo": False}
    ],
    "configuracoes": {
        "tema": "escuro",
        "idioma": "pt-BR",
        "timezone": "America/Sao_Paulo",
        "backup_automatico": True,
        "ultima_atualizacao": datetime.now().isoformat()
    }
}

# Salvando JSON formatado
def salvar_config(config, nome_arquivo):
    try:
        with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:
            json.dump(config, arquivo, indent=4, ensure_ascii=False)
        print(f"‚úÖ Configura√ß√£o salva em '{nome_arquivo}'")
    except Exception as e:
        print(f"‚ùå Erro ao salvar: {e}")

salvar_config(sistema_config, 'config.json')

# Carregando e modificando JSON
def carregar_config(nome_arquivo):
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            return json.load(arquivo)
    except FileNotFoundError:
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado")
        return {}
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON inv√°lido: {e}")
        return {}

# Sistema de configura√ß√£o din√¢mica
class ConfigManager:
    def __init__(self, arquivo_config):
        self.arquivo = arquivo_config
        self.config = carregar_config(arquivo_config)
    
    def get(self, chave, padrao=None):
        """Obt√©m valor de configura√ß√£o usando nota√ß√£o de ponto"""
        keys = chave.split('.')
        valor = self.config
        
        for key in keys:
            if isinstance(valor, dict) and key in valor:
                valor = valor[key]
            else:
                return padrao
        return valor
    
    def set(self, chave, valor):
        """Define valor de configura√ß√£o"""
        keys = chave.split('.')
        config_atual = self.config
        
        for key in keys[:-1]:
            if key not in config_atual:
                config_atual[key] = {}
            config_atual = config_atual[key]
        
        config_atual[keys[-1]] = valor
        self.salvar()
    
    def salvar(self):
        """Salva configura√ß√µes no arquivo"""
        salvar_config(self.config, self.arquivo)

# Usando o gerenciador
config = ConfigManager('config.json')
print(f"Nome da aplica√ß√£o: {config.get('aplicacao.nome')}")
print(f"Porta do banco: {config.get('database.porta')}")

# Modificando configura√ß√£o
config.set('configuracoes.tema', 'claro')
config.set('aplicacao.versao', '2.1.1')</code></pre>
            </div>
            
            <h5>6. Opera√ß√µes com Diret√≥rios</h5>
            <div class="code-example">
                <pre><code>import os
import glob
from pathlib import Path

# Trabalhando com caminhos
def organizar_arquivos():
    # Criando estrutura de diret√≥rios
    diretorios = ['documentos', 'imagens', 'videos', 'arquivos']
    
    for diretorio in diretorios:
        if not os.path.exists(diretorio):
            os.makedirs(diretorio)
            print(f"üìÅ Diret√≥rio '{diretorio}' criado")
    
    # Listando arquivos por extens√£o
    arquivos_txt = glob.glob("*.txt")
    arquivos_csv = glob.glob("*.csv")
    arquivos_json = glob.glob("*.json")
    
    print(f"Arquivos .txt encontrados: {len(arquivos_txt)}")
    print(f"Arquivos .csv encontrados: {len(arquivos_csv)}")
    print(f"Arquivos .json encontrados: {len(arquivos_json)}")
    
    # Movendo arquivos (simula√ß√£o)
    import shutil
    for arquivo in arquivos_txt:
        destino = os.path.join('documentos', arquivo)
        print(f"Moveria {arquivo} para {destino}")
        # shutil.move(arquivo, destino)  # Descomente para mover de verdade

# Informa√ß√µes detalhadas de arquivos
def info_arquivo(nome_arquivo):
    if os.path.exists(nome_arquivo):
        stat = os.stat(nome_arquivo)
        tamanho = stat.st_size
        
        # Convertendo tamanho para formato leg√≠vel
        if tamanho < 1024:
            tamanho_str = f"{tamanho} bytes"
        elif tamanho < 1024**2:
            tamanho_str = f"{tamanho/1024:.1f} KB"
        elif tamanho < 1024**3:
            tamanho_str = f"{tamanho/(1024**2):.1f} MB"
        else:
            tamanho_str = f"{tamanho/(1024**3):.1f} GB"
        
        modificado = datetime.fromtimestamp(stat.st_mtime)
        
        print(f"üìã Informa√ß√µes do arquivo '{nome_arquivo}':")
        print(f"   Tamanho: {tamanho_str}")
        print(f"   Modificado: {modificado.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"   Leg√≠vel: {'Sim' if os.access(nome_arquivo, os.R_OK) else 'N√£o'}")
        print(f"   Escrev√≠vel: {'Sim' if os.access(nome_arquivo, os.W_OK) else 'N√£o'}")

organizar_arquivos()
info_arquivo('config.json')</code></pre>
            </div>
            
            <h5>7. Sistema Completo de Logs</h5>
            <div class="code-example">
                <pre><code>import logging
from datetime import datetime
import os

class SistemaLog:
    def __init__(self, nome_arquivo="sistema.log", nivel=logging.INFO):
        # Cria diret√≥rio de logs se n√£o existir
        if not os.path.exists('logs'):
            os.makedirs('logs')
        
        # Configura o sistema de log
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(nivel)
        
        # Formato das mensagens
        formato = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Handler para arquivo
        arquivo_handler = logging.FileHandler(
            f'logs/{nome_arquivo}', 
            encoding='utf-8'
        )
        arquivo_handler.setFormatter(formato)
        self.logger.addHandler(arquivo_handler)
        
        # Handler para console
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formato)
        self.logger.addHandler(console_handler)
    
    def info(self, mensagem):
        self.logger.info(mensagem)
    
    def erro(self, mensagem):
        self.logger.error(mensagem)
    
    def aviso(self, mensagem):
        self.logger.warning(mensagem)
    
    def debug(self, mensagem):
        self.logger.debug(mensagem)

# Usando o sistema de log
log = SistemaLog("aplicacao.log")

log.info("Sistema iniciado")
log.aviso("Configura√ß√£o de rede n√£o encontrada")
log.erro("Falha ao conectar com banco de dados")
log.info("Sistema finalizado")</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Boas Pr√°ticas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Sempre use 'with open()'</strong> para garantir fechamento autom√°tico</li>
                    <li><strong>Especifique encoding='utf-8'</strong> para caracteres especiais</li>
                    <li><strong>Trate erros espec√≠ficos</strong> (FileNotFoundError, PermissionError)</li>
                    <li><strong>Fa√ßa backup</strong> antes de modificar arquivos importantes</li>
                    <li><strong>Use pathlib</strong> para opera√ß√µes modernas com caminhos</li>
                    <li><strong>Implemente logs</strong> para rastrear opera√ß√µes importantes</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Cuidados Importantes:</h6>
                <ul class="mb-0">
                    <li><strong>Modo 'w' apaga</strong> todo o conte√∫do do arquivo</li>
                    <li><strong>Verifique permiss√µes</strong> antes de tentar acessar arquivos</li>
                    <li><strong>Cuidado com encoding</strong> ao trabalhar com caracteres especiais</li>
                    <li><strong>Grandes arquivos</strong> podem consumir muita mem√≥ria com read()</li>
                    <li><strong>Sempre valide dados</strong> ao ler de arquivos externos</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como abrir um arquivo para leitura em Python?',
                'options': ['open("file.txt", "r")', 'read("file.txt")', 'file.open("r")', 'load("file.txt")'],
                'correct_answer': 'open("file.txt", "r")'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a vantagem de usar "with open()"?',
                'options': ['√â mais r√°pido', 'Fecha o arquivo automaticamente', 'Usa menos mem√≥ria', '√â obrigat√≥rio'],
                'correct_answer': 'Fecha o arquivo automaticamente'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual modo de abertura sobrescreve um arquivo existente?',
                'options': ['"r"', '"a"', '"w"', '"x"'],
                'correct_answer': '"w"'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual biblioteca √© usada para trabalhar com arquivos CSV?',
                'options': ['json', 'csv', 'pandas', 'file'],
                'correct_answer': 'csv'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como converter um dicion√°rio Python para JSON?',
                'options': ['json.loads()', 'json.dump()', 'json.save()', 'json.convert()'],
                'correct_answer': 'json.dump()'
            }
        ]
    },
    4: {
        'title': 'Fun√ß√µes e M√≥dulos',
        'description': 'Organize seu c√≥digo com fun√ß√µes reutiliz√°veis e modulariza√ß√£o',
        'content': '''<div class="module-header">
            <h3>‚ö° M√≥dulo 4 - Fun√ß√µes e M√≥dulos</h3>
            <p class="module-intro"><strong>Transforme-se em um arquiteto de c√≥digo!</strong> Domine fun√ß√µes avan√ßadas, escopo, decoradores e modulariza√ß√£o. Construa c√≥digo profissional, reutiliz√°vel e elegante!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Fun√ß√µes avan√ßadas com argumentos flex√≠veis</li>
                <li>Escopo de vari√°veis e closures</li>
                <li>Fun√ß√µes lambda e funcionais</li>
                <li>Decoradores e metaprograma√ß√£o</li>
                <li>M√≥dulos personalizados e packages</li>
                <li>Geradores e fun√ß√µes ass√≠ncronas</li>
                <li>Documenta√ß√£o profissional de c√≥digo</li>
                <li>Testes unit√°rios b√°sicos</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Fun√ß√µes Fundamentais e Avan√ßadas</h5>
            
            <div class="code-example">
                <h6>üî∏ Fun√ß√µes B√°sicas - Construindo Blocos:</h6>
                <pre><code># Fun√ß√£o simples sem par√¢metros
def saudacao():
    """Exibe uma sauda√ß√£o padr√£o"""
    print("üéâ Bem-vindo ao Sistema Python!")
    print("Vamos programar juntos!")

# Fun√ß√£o com par√¢metro √∫nico
def saudacao_personalizada(nome):
    """Exibe sauda√ß√£o personalizada"""
    print(f"Ol√°, {nome}! Que bom te ver aqui! üòä")

# Fun√ß√£o com m√∫ltiplos par√¢metros
def calcular_area_retangulo(largura, altura):
    """
    Calcula a √°rea de um ret√¢ngulo
    
    Args:
        largura (float): Largura do ret√¢ngulo
        altura (float): Altura do ret√¢ngulo
    
    Returns:
        float: √Årea calculada
    """
    area = largura * altura
    perimetro = 2 * (largura + altura)
    
    print(f"üìê Dimens√µes: {largura} x {altura}")
    print(f"üìè √Årea: {area}")
    print(f"‚≠ï Per√≠metro: {perimetro}")
    
    return area

# Chamando as fun√ß√µes
saudacao()
saudacao_personalizada("Maria")
resultado = calcular_area_retangulo(5.0, 3.0)</code></pre>
            </div>
            
            <h5>2. Par√¢metros Avan√ßados e Flexibilidade</h5>
            <div class="code-example">
                <pre><code># Par√¢metros com valores padr√£o
def criar_perfil(nome, idade=25, cidade="S√£o Paulo", ativo=True):
    """Cria perfil de usu√°rio com valores padr√£o"""
    perfil = {
        'nome': nome,
        'idade': idade,
        'cidade': cidade,
        'ativo': ativo,
        'id': hash(nome) % 10000  # ID simples baseado no nome
    }
    return perfil

# Diferentes formas de chamar
perfil1 = criar_perfil("Jo√£o")  # Usa valores padr√£o
perfil2 = criar_perfil("Maria", 30)  # Sobrescreve idade
perfil3 = criar_perfil("Pedro", cidade="Rio de Janeiro")  # Argumentos nomeados
perfil4 = criar_perfil(nome="Ana", idade=28, ativo=False)  # Todos nomeados

# *args - Argumentos posicionais vari√°veis
def calcular_media(*numeros):
    """Calcula m√©dia de qualquer quantidade de n√∫meros"""
    if not numeros:
        return 0
    
    total = sum(numeros)
    quantidade = len(numeros)
    media = total / quantidade
    
    print(f"üìä N√∫meros: {numeros}")
    print(f"üìà Soma: {total}")
    print(f"üéØ M√©dia: {media:.2f}")
    
    return media

# Exemplos de uso
media1 = calcular_media(10, 20, 30)
media2 = calcular_media(5, 7, 9, 11, 13, 15)
media3 = calcular_media(100)

# **kwargs - Argumentos nomeados vari√°veis
def criar_relatorio(**dados):
    """Cria relat√≥rio com informa√ß√µes din√¢micas"""
    print("üìã RELAT√ìRIO GERADO")
    print("=" * 30)
    
    for chave, valor in dados.items():
        chave_formatada = chave.replace('_', ' ').title()
        print(f"{chave_formatada}: {valor}")
    
    print("=" * 30)
    return dados

# Exemplos de uso
relatorio1 = criar_relatorio(
    vendas_hoje=1500,
    clientes_novos=23,
    ticket_medio=65.50
)

relatorio2 = criar_relatorio(
    temperatura_maxima=32,
    umidade=75,
    pressao_atmosferica=1013
)

# Combinando *args e **kwargs
def funcao_completa(obrigatorio, padrao=10, *args, **kwargs):
    """Demonstra todos os tipos de par√¢metros"""
    print(f"Obrigat√≥rio: {obrigatorio}")
    print(f"Padr√£o: {padrao}")
    print(f"Args extras: {args}")
    print(f"Kwargs: {kwargs}")

funcao_completa("teste", 20, "extra1", "extra2", nome="Jo√£o", idade=30)</code></pre>
            </div>
            
            <h5>3. Escopo de Vari√°veis e Closures</h5>
            <div class="code-example">
                <pre><code># Escopo local vs global
contador_global = 0  # Vari√°vel global

def incrementar_contador():
    global contador_global  # Modifica vari√°vel global
    contador_global += 1
    contador_local = 100  # Vari√°vel local
    print(f"Local: {contador_local}, Global: {contador_global}")

def demonstrar_escopo():
    x = "local"  # Vari√°vel local
    
    def funcao_interna():
        nonlocal x  # Modifica vari√°vel do escopo envolvente
        x = "modificada"
        y = "muito local"  # S√≥ existe aqui
        print(f"Dentro da fun√ß√£o interna: x={x}, y={y}")
    
    print(f"Antes: x={x}")
    funcao_interna()
    print(f"Depois: x={x}")

# Closures - Fun√ß√µes que "lembram" do ambiente
def criar_multiplicador(fator):
    """Cria fun√ß√£o que multiplica por um fator espec√≠fico"""
    def multiplicar(numero):
        return numero * fator  # 'fator' √© "lembrado"
    return multiplicar

# Criando multiplicadores espec√≠ficos
dobrar = criar_multiplicador(2)
triplicar = criar_multiplicador(3)
multiplicar_por_10 = criar_multiplicador(10)

print(f"Dobrar 5: {dobrar(5)}")  # 10
print(f"Triplicar 4: {triplicar(4)}")  # 12
print(f"Multiplicar 7 por 10: {multiplicar_por_10(7)}")  # 70

# Closure pr√°tico - Contador privado
def criar_contador():
    """Cria contador com estado privado"""
    count = 0
    
    def incrementar():
        nonlocal count
        count += 1
        return count
    
    def decrementar():
        nonlocal count
        count -= 1
        return count
    
    def obter_valor():
        return count
    
    def resetar():
        nonlocal count
        count = 0
        return count
    
    return {
        'incrementar': incrementar,
        'decrementar': decrementar,
        'valor': obter_valor,
        'resetar': resetar
    }

# Usando o contador
contador = criar_contador()
print(f"Valor inicial: {contador['valor']()}")  # 0
print(f"Incrementar: {contador['incrementar']()}")  # 1
print(f"Incrementar: {contador['incrementar']()}")  # 2
print(f"Decrementar: {contador['decrementar']()}")  # 1</code></pre>
            </div>
            
            <h5>4. Fun√ß√µes Lambda e Programa√ß√£o Funcional</h5>
            <div class="code-example">
                <pre><code># Fun√ß√µes lambda - Fun√ß√µes an√¥nimas
# Sintaxe: lambda argumentos: express√£o

# Lambda simples
quadrado = lambda x: x ** 2
print(f"Quadrado de 5: {quadrado(5)}")  # 25

# Lambda com m√∫ltiplos argumentos
somar = lambda a, b: a + b
print(f"Soma 3 + 7: {somar(3, 7)}")  # 10

# Usando lambda com fun√ß√µes built-in
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# map() - Aplica fun√ß√£o a cada elemento
quadrados = list(map(lambda x: x**2, numeros))
print(f"Quadrados: {quadrados}")

# filter() - Filtra elementos com base em condi√ß√£o
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(f"N√∫meros pares: {pares}")

# Exemplo mais complexo com dados estruturados
funcionarios = [
    {'nome': 'Jo√£o', 'salario': 5000, 'departamento': 'TI'},
    {'nome': 'Maria', 'salario': 6000, 'departamento': 'Vendas'},
    {'nome': 'Pedro', 'salario': 4500, 'departamento': 'TI'},
    {'nome': 'Ana', 'salario': 7000, 'departamento': 'Ger√™ncia'}
]

# Filtrando funcion√°rios de TI
funcionarios_ti = list(filter(
    lambda f: f['departamento'] == 'TI', 
    funcionarios
))

# Calculando sal√°rios com aumento de 10%
salarios_aumento = list(map(
    lambda f: {**f, 'salario_novo': f['salario'] * 1.1},
    funcionarios
))

# Ordenando por sal√°rio (descendente)
funcionarios_ordenados = sorted(
    funcionarios,
    key=lambda f: f['salario'],
    reverse=True
)

print("Funcion√°rios de TI:", funcionarios_ti)
print("Primeiro funcion√°rio ordenado:", funcionarios_ordenados[0])</code></pre>
            </div>
            
            <h5>5. Decoradores - Metaprograma√ß√£o</h5>
            <div class="code-example">
                <pre><code>import time
import functools

# Decorador simples para medir tempo de execu√ß√£o
def medir_tempo(func):
    """Decorador que mede tempo de execu√ß√£o de fun√ß√£o"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        inicio = time.time()
        resultado = func(*args, **kwargs)
        fim = time.time()
        print(f"‚è±Ô∏è {func.__name__} executou em {fim - inicio:.4f} segundos")
        return resultado
    return wrapper

# Decorador para log de fun√ß√£o
def log_funcao(func):
    """Decorador que registra chamadas de fun√ß√£o"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        args_str = ', '.join(map(str, args))
        kwargs_str = ', '.join(f"{k}={v}" for k, v in kwargs.items())
        params = ', '.join(filter(None, [args_str, kwargs_str]))
        
        print(f"üìù Chamando {func.__name__}({params})")
        resultado = func(*args, **kwargs)
        print(f"‚úÖ {func.__name__} retornou: {resultado}")
        return resultado
    return wrapper

# Decorador com par√¢metros
def repetir(vezes):
    """Decorador que repete execu√ß√£o de fun√ß√£o"""
    def decorador(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            for i in range(vezes):
                print(f"üîÑ Execu√ß√£o {i+1}/{vezes}")
                resultado = func(*args, **kwargs)
            return resultado
        return wrapper
    return decorador

# Usando os decoradores
@medir_tempo
@log_funcao
def calcular_fibonacci(n):
    """Calcula n√∫mero de Fibonacci"""
    if n <= 1:
        return n
    return calcular_fibonacci(n-1) + calcular_fibonacci(n-2)

@repetir(3)
def saudacao_especial(nome):
    """Sauda√ß√£o que ser√° repetida"""
    print(f"üéâ Ol√°, {nome}!")

# Testando decoradores
resultado_fib = calcular_fibonacci(10)
saudacao_especial("Python")

# Decorador de cache para otimiza√ß√£o
def cache(func):
    """Decorador que cacheia resultados de fun√ß√£o"""
    cache_dict = {}
    
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        # Cria chave √∫nica para argumentos
        chave = str(args) + str(sorted(kwargs.items()))
        
        if chave in cache_dict:
            print(f"üíæ Cache hit para {func.__name__}")
            return cache_dict[chave]
        
        print(f"üîÑ Calculando {func.__name__}")
        resultado = func(*args, **kwargs)
        cache_dict[chave] = resultado
        return resultado
    
    return wrapper

@cache
@medir_tempo
def fibonacci_otimizado(n):
    """Fibonacci com cache para melhor performance"""
    if n <= 1:
        return n
    return fibonacci_otimizado(n-1) + fibonacci_otimizado(n-2)

print(f"Fibonacci de 35: {fibonacci_otimizado(35)}")</code></pre>
            </div>
            
            <h5>6. M√≥dulos e Packages</h5>
            <div class="code-example">
                <pre><code># Criando m√≥dulo personalizado (salvar como 'calculadora.py')
# ===========================================

"""
M√≥dulo de Calculadora Avan√ßada
Cont√©m fun√ß√µes matem√°ticas √∫teis para c√°lculos diversos
"""

import math

# Constantes do m√≥dulo
PI = 3.14159265359
E = 2.71828182846

def somar(a, b):
    """Soma dois n√∫meros"""
    return a + b

def subtrair(a, b):
    """Subtrai dois n√∫meros"""
    return a - b

def multiplicar(a, b):
    """Multiplica dois n√∫meros"""
    return a * b

def dividir(a, b):
    """Divide dois n√∫meros com tratamento de erro"""
    if b == 0:
        raise ValueError("Divis√£o por zero n√£o √© permitida")
    return a / b

def calcular_imc(peso, altura):
    """
    Calcula o √çndice de Massa Corporal
    
    Args:
        peso (float): Peso em quilogramas
        altura (float): Altura em metros
    
    Returns:
        dict: IMC e classifica√ß√£o
    """
    imc = peso / (altura ** 2)
    
    if imc < 18.5:
        classificacao = "Abaixo do peso"
    elif imc < 25:
        classificacao = "Peso normal"
    elif imc < 30:
        classificacao = "Sobrepeso"
    else:
        classificacao = "Obesidade"
    
    return {
        'imc': round(imc, 2),
        'classificacao': classificacao
    }

def calcular_juros_compostos(capital, taxa, tempo):
    """
    Calcula juros compostos
    
    Args:
        capital (float): Valor inicial
        taxa (float): Taxa de juros (decimal)
        tempo (int): Per√≠odo em anos
    
    Returns:
        dict: Montante final e juros ganhos
    """
    montante = capital * (1 + taxa) ** tempo
    juros = montante - capital
    
    return {
        'capital_inicial': capital,
        'montante_final': round(montante, 2),
        'juros_ganhos': round(juros, 2),
        'rentabilidade': round((juros / capital) * 100, 2)
    }

class Calculadora:
    """Classe calculadora com hist√≥rico"""
    
    def __init__(self):
        self.historico = []
    
    def calcular(self, operacao, a, b=None):
        """Executa opera√ß√£o e salva no hist√≥rico"""
        try:
            if operacao == '+':
                resultado = a + b
                expressao = f"{a} + {b} = {resultado}"
            elif operacao == '-':
                resultado = a - b
                expressao = f"{a} - {b} = {resultado}"
            elif operacao == '*':
                resultado = a * b
                expressao = f"{a} * {b} = {resultado}"
            elif operacao == '/':
                resultado = dividir(a, b)
                expressao = f"{a} / {b} = {resultado}"
            elif operacao == '^':
                resultado = a ** b
                expressao = f"{a} ^ {b} = {resultado}"
            elif operacao == 'sqrt':
                resultado = math.sqrt(a)
                expressao = f"‚àö{a} = {resultado}"
            else:
                raise ValueError(f"Opera√ß√£o '{operacao}' n√£o reconhecida")
            
            self.historico.append(expressao)
            return resultado
            
        except Exception as e:
            error_msg = f"Erro: {e}"
            self.historico.append(error_msg)
            raise
    
    def obter_historico(self):
        """Retorna hist√≥rico de c√°lculos"""
        return self.historico.copy()
    
    def limpar_historico(self):
        """Limpa hist√≥rico de c√°lculos"""
        self.historico.clear()

# Vari√°vel global para demonstra√ß√£o
versao_modulo = "1.0.0"

if __name__ == "__main__":
    # C√≥digo que s√≥ executa se m√≥dulo for executado diretamente
    print("Testando m√≥dulo calculadora...")
    
    calc = Calculadora()
    print(f"5 + 3 = {calc.calcular('+', 5, 3)}")
    print(f"10 / 2 = {calc.calcular('/', 10, 2)}")
    print(f"Hist√≥rico: {calc.obter_historico()}")

# ===========================================
# Usando o m√≥dulo (em outro arquivo)

# import calculadora
# from calculadora import Calculadora, calcular_imc
# import calculadora as calc

# # Usando fun√ß√µes do m√≥dulo
# resultado = calculadora.somar(10, 20)
# imc_info = calcular_imc(70, 1.75)

# # Usando classe do m√≥dulo
# minha_calc = Calculadora()
# resultado = minha_calc.calcular('+', 15, 25)</code></pre>
            </div>
            
            <h5>7. Geradores e Fun√ß√µes Avan√ßadas</h5>
            <div class="code-example">
                <pre><code># Geradores - Fun√ß√µes que produzem valores sob demanda
def fibonacci_generator():
    """Gerador infinito de n√∫meros de Fibonacci"""
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Usando o gerador
fib = fibonacci_generator()
primeiros_10_fib = [next(fib) for _ in range(10)]
print(f"Primeiros 10 Fibonacci: {primeiros_10_fib}")

# Gerador com par√¢metros
def gerar_numeros_pares(limite):
    """Gera n√∫meros pares at√© o limite"""
    numero = 0
    while numero <= limite:
        if numero % 2 == 0:
            yield numero
        numero += 1

pares_ate_20 = list(gerar_numeros_pares(20))
print(f"Pares at√© 20: {pares_ate_20}")

# Generator expression
quadrados = (x**2 for x in range(10))
print(f"Soma dos quadrados: {sum(quadrados)}")

# Fun√ß√£o recursiva
def fatorial(n):
    """Calcula fatorial de forma recursiva"""
    if n == 0 or n == 1:
        return 1
    return n * fatorial(n - 1)

print(f"Fatorial de 5: {fatorial(5)}")

# Fun√ß√£o que retorna m√∫ltiplos valores
def analisar_numeros(lista):
    """Analisa lista de n√∫meros e retorna estat√≠sticas"""
    if not lista:
        return 0, 0, 0, 0
    
    total = sum(lista)
    media = total / len(lista)
    maximo = max(lista)
    minimo = min(lista)
    
    return total, media, maximo, minimo

# Desempacotando retorno m√∫ltiplo
numeros = [10, 20, 30, 40, 50]
soma, media, max_val, min_val = analisar_numeros(numeros)
print(f"Soma: {soma}, M√©dia: {media}, Max: {max_val}, Min: {min_val}")</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6><i class="fas fa-lightbulb"></i> Boas Pr√°ticas Profissionais:</h6>
                <ul class="mb-0">
                    <li><strong>Princ√≠pio DRY:</strong> "Don't Repeat Yourself" - Evite duplica√ß√£o</li>
                    <li><strong>Fun√ß√£o √∫nica:</strong> Cada fun√ß√£o deve ter uma responsabilidade espec√≠fica</li>
                    <li><strong>Nomes descritivos:</strong> Use nomes que expliquem o que a fun√ß√£o faz</li>
                    <li><strong>Docstrings:</strong> Documente todas as fun√ß√µes importantes</li>
                    <li><strong>Par√¢metros padr√£o:</strong> Use valores padr√£o para maior flexibilidade</li>
                    <li><strong>Type hints:</strong> Use anota√ß√µes de tipo para clareza</li>
                    <li><strong>Testes:</strong> Teste suas fun√ß√µes com diferentes entradas</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-exclamation-triangle"></i> Armadilhas Comuns:</h6>
                <ul class="mb-0">
                    <li><strong>Mut√°veis como padr√£o:</strong> Evite listas/dicts como valores padr√£o</li>
                    <li><strong>Escopo global:</strong> Minimize uso de vari√°veis globais</li>
                    <li><strong>Fun√ß√µes muito grandes:</strong> Divida fun√ß√µes complexas em menores</li>
                    <li><strong>Recurs√£o infinita:</strong> Sempre defina caso base</li>
                    <li><strong>Efeitos colaterais:</strong> Fun√ß√µes devem ser previs√≠veis</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como definir uma fun√ß√£o em Python?',
                'options': ['def funcao():', 'function funcao():', 'create funcao():', 'func funcao():'],
                'correct_answer': 'def funcao():'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que a palavra-chave "return" faz em uma fun√ß√£o?',
                'options': ['Inicia a fun√ß√£o', 'Retorna um valor', 'Para a execu√ß√£o', 'Imprime na tela'],
                'correct_answer': 'Retorna um valor'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como importar uma fun√ß√£o espec√≠fica de um m√≥dulo?',
                'options': ['import modulo.funcao', 'from modulo import funcao', 'get modulo.funcao', 'use modulo.funcao'],
                'correct_answer': 'from modulo import funcao'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a diferen√ßa entre par√¢metros e argumentos?',
                'options': ['S√£o a mesma coisa', 'Par√¢metros s√£o na defini√ß√£o, argumentos na chamada', 'Argumentos s√£o na defini√ß√£o, par√¢metros na chamada', 'Par√¢metros s√£o obrigat√≥rios'],
                'correct_answer': 'Par√¢metros s√£o na defini√ß√£o, argumentos na chamada'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar um par√¢metro com valor padr√£o?',
                'options': ['def func(x=10):', 'def func(x:10):', 'def func(x->10):', 'def func(x default 10):'],
                'correct_answer': 'def func(x=10):'
            }
        ]
    },
    5: {
        'title': 'Estruturas de Dados',
        'description': 'Domine listas, tuplas, dicion√°rios e conjuntos para organizar dados de forma eficiente',
        'content': '''<div class="module-header">
            <h3>üìä M√≥dulo 5 - Estruturas de Dados</h3>
            <p class="module-intro"><strong>Organize dados como um profissional!</strong> Descubra as estruturas fundamentais do Python: listas, tuplas, dicion√°rios e conjuntos. Aprenda a escolher a estrutura ideal para cada situa√ß√£o!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Listas avan√ßadas: cria√ß√£o, manipula√ß√£o e m√©todos especiais</li>
                <li>Tuplas e imutabilidade: quando e como usar</li>
                <li>Dicion√°rios: chaves, valores e aplica√ß√µes pr√°ticas</li>
                <li>Conjuntos (sets): opera√ß√µes matem√°ticas e unicidade</li>
                <li>List comprehensions e gera√ß√£o din√¢mica</li>
                <li>Aninhamento e estruturas complexas</li>
                <li>Performance e escolha da estrutura ideal</li>
                <li>Itera√ß√£o avan√ßada e enumerate/zip</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Listas - A Estrutura Mais Vers√°til</h5>
            <p>Listas s√£o cole√ß√µes ordenadas e mut√°veis que podem armazenar qualquer tipo de dado. S√£o a estrutura mais usada em Python!</p>
            
            <div class="code-example">
                <h6>üî∏ Cria√ß√£o e Manipula√ß√£o B√°sica:</h6>
                <pre><code># Diferentes formas de criar listas
numeros = [1, 2, 3, 4, 5]
frutas = ["ma√ß√£", "banana", "laranja"]
mista = [1, "texto", 3.14, True, [1, 2, 3]]  # Lista com tipos diferentes
vazia = []  # Lista vazia
gerada = list(range(1, 11))  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(f"N√∫meros: {numeros}")
print(f"Primeira fruta: {frutas[0]}")
print(f"√öltima fruta: {frutas[-1]}")
print(f"Tamanho da lista: {len(frutas)}")

# Modificando elementos
frutas[1] = "uva"  # Substituir banana por uva
print(f"Lista modificada: {frutas}")

# Fatiamento (slicing) avan√ßado
print(f"Primeiros 3 n√∫meros: {numeros[:3]}")
print(f"√öltimos 2 n√∫meros: {numeros[-2:]}")
print(f"N√∫meros pares (passo 2): {numeros[::2]}")
print(f"Lista invertida: {numeros[::-1]}")</code></pre>
                
                <h6>üî∏ M√©todos Essenciais de Listas:</h6>
                <pre><code># Adicionando elementos
compras = ["leite", "p√£o"]
compras.append("ovos")  # Adiciona no final
compras.insert(1, "manteiga")  # Adiciona na posi√ß√£o 1
compras.extend(["caf√©", "a√ß√∫car"])  # Adiciona m√∫ltiplos elementos
print(f"Lista de compras: {compras}")

# Removendo elementos
compras.remove("p√£o")  # Remove a primeira ocorr√™ncia
ultimo_item = compras.pop()  # Remove e retorna o √∫ltimo
segundo_item = compras.pop(1)  # Remove e retorna da posi√ß√£o 1
print(f"Removido: {ultimo_item}, {segundo_item}")

# Encontrando elementos
if "leite" in compras:
    posicao = compras.index("leite")
    print(f"Leite est√° na posi√ß√£o: {posicao}")

# Contando e organizando
numeros_repetidos = [1, 2, 2, 3, 2, 4, 2]
print(f"O n√∫mero 2 aparece {numeros_repetidos.count(2)} vezes")

numeros_repetidos.sort()  # Ordena a lista original
print(f"Ordenada: {numeros_repetidos}")

numeros_ordenados = sorted(numeros, reverse=True)  # Cria nova lista ordenada
print(f"Decrescente: {numeros_ordenados}")</code></pre>
            </div>
            
            <h5>2. Tuplas - Dados Imut√°veis e Seguros</h5>
            <p>Tuplas s√£o cole√ß√µes ordenadas e <strong>imut√°veis</strong>. Ideais para dados que n√£o devem mudar, como coordenadas, configura√ß√µes ou retorno de m√∫ltiplos valores de fun√ß√µes.</p>
            
            <div class="code-example">
                <pre><code># Criando tuplas
coordenadas = (10, 20)  # Ponto no plano cartesiano
dados_pessoa = ("Jo√£o", 25, "Engenheiro", True)  # Nome, idade, profiss√£o, ativo
cores_rgb = (255, 128, 0)  # Cor laranja em RGB
tupla_unitaria = ("√∫nico",)  # Note a v√≠rgula obrigat√≥ria!

# Acessando elementos (igual √†s listas)
nome = dados_pessoa[0]
profissao = dados_pessoa[2]
print(f"{nome} trabalha como {profissao}")

# Desempacotamento (unpacking) - muito √∫til!
x, y = coordenadas  # x=10, y=20
nome, idade, prof, status = dados_pessoa
r, g, b = cores_rgb
print(f"Coordenadas: x={x}, y={y}")
print(f"Cor RGB: R={r}, G={g}, B={b}")

# Tuplas como chaves de dicion√°rios (listas n√£o podem!)
pontos_mapa = {
    (0, 0): "origem",
    (10, 20): "ponto A", 
    (30, 40): "ponto B"
}
print(f"No ponto (10, 20) temos: {pontos_mapa[(10, 20)]}")

# Fun√ß√£o retornando m√∫ltiplos valores
def calcular_circulo(raio):
    import math
    area = math.pi * raio ** 2
    perimetro = 2 * math.pi * raio
    return area, perimetro  # Retorna uma tupla!

area_resultado, perimetro_resultado = calcular_circulo(5)
print(f"C√≠rculo raio 5: √Årea={area_resultado:.2f}, Per√≠metro={perimetro_resultado:.2f}")</code></pre>
            </div>
            
            <h5>3. Dicion√°rios - Mapeamento Chave-Valor</h5>
            <p>Dicion√°rios s√£o cole√ß√µes que armazenam pares chave-valor. Extremamente eficientes para busca e fundamentais em programa√ß√£o moderna!</p>
            
            <div class="code-example">
                <pre><code># Criando dicion√°rios
pessoa = {
    "nome": "Ana Silva",
    "idade": 28,
    "profissao": "Desenvolvedora",
    "salario": 8500.00,
    "ativo": True
}

# Diferentes formas de criar
vazio = {}
usando_dict = dict(a=1, b=2, c=3)
de_listas = dict([("x", 10), ("y", 20)])

print(f"Pessoa: {pessoa['nome']}, {pessoa['idade']} anos")

# Acessando com seguran√ßa
salario = pessoa.get("salario", 0)  # Retorna 0 se n√£o existir
bonus = pessoa.get("bonus", "N√£o definido")
print(f"Sal√°rio: R$ {salario}, B√¥nus: {bonus}")

# Modificando e adicionando
pessoa["idade"] = 29  # Modificar existente
pessoa["cidade"] = "S√£o Paulo"  # Adicionar novo
pessoa.update({"telefone": "11999999999", "email": "ana@email.com"})

# Removendo elementos
departamento = pessoa.pop("departamento", "TI")  # Remove e retorna, ou valor padr√£o
print(f"Departamento: {departamento}")

# Iterando sobre dicion√°rios
print("\n=== Dados da Pessoa ===")
for chave, valor in pessoa.items():
    print(f"{chave.capitalize()}: {valor}")

print(f"\nChaves dispon√≠veis: {list(pessoa.keys())}")
print(f"Valores: {list(pessoa.values())}")

# Dicion√°rio aninhado - estruturas complexas
empresa = {
    "nome": "TechCorp",
    "funcionarios": {
        "001": {"nome": "Jo√£o", "cargo": "Dev", "salario": 7000},
        "002": {"nome": "Maria", "cargo": "Designer", "salario": 6500},
        "003": {"nome": "Pedro", "cargo": "Manager", "salario": 12000}
    },
    "departamentos": ["TI", "RH", "Vendas"]
}

# Acessando dados aninhados
funcionario_001 = empresa["funcionarios"]["001"]
print(f"\nFuncion√°rio 001: {funcionario_001['nome']} - {funcionario_001['cargo']}")

# Calculando estat√≠sticas
salarios = [func["salario"] for func in empresa["funcionarios"].values()]
salario_medio = sum(salarios) / len(salarios)
print(f"Sal√°rio m√©dio da empresa: R$ {salario_medio:.2f}")</code></pre>
            </div>
            
            <h5>4. Conjuntos (Sets) - Valores √önicos</h5>
            <p>Sets s√£o cole√ß√µes de elementos √∫nicos, ideais para eliminar duplicatas e realizar opera√ß√µes matem√°ticas como uni√£o, interse√ß√£o e diferen√ßa.</p>
            
            <div class="code-example">
                <pre><code># Criando conjuntos
numeros_unicos = {1, 2, 3, 4, 5}
frutas_set = {"ma√ß√£", "banana", "laranja"}
de_lista = set([1, 2, 2, 3, 3, 4])  # Remove duplicatas automaticamente!
print(f"De lista com duplicatas: {de_lista}")  # {1, 2, 3, 4}

# Adicionando e removendo
frutas_set.add("uva")
frutas_set.discard("banana")  # Remove se existir
# frutas_set.remove("banana")  # Erro se n√£o existir
print(f"Frutas: {frutas_set}")

# Opera√ß√µes de conjuntos - muito poderosas!
funcionarios_ti = {"Ana", "Bruno", "Carlos", "Diana"}
funcionarios_vendas = {"Bruno", "Elena", "Fabio", "Ana"}

# Uni√£o - todos os funcion√°rios
todos = funcionarios_ti | funcionarios_vendas
# ou: todos = funcionarios_ti.union(funcionarios_vendas)
print(f"Todos os funcion√°rios: {todos}")

# Interse√ß√£o - funcion√°rios que trabalham nos dois departamentos
ambos_depto = funcionarios_ti & funcionarios_vendas
print(f"Trabalham em ambos: {ambos_depto}")

# Diferen√ßa - s√≥ em TI
so_ti = funcionarios_ti - funcionarios_vendas
print(f"Apenas em TI: {so_ti}")

# Diferen√ßa sim√©trica - em um ou outro, mas n√£o ambos
xor_depto = funcionarios_ti ^ funcionarios_vendas
print(f"Apenas em um departamento: {xor_depto}")

# Verifica√ß√µes √∫teis
print(f"Ana trabalha em TI? {'Ana' in funcionarios_ti}")
print(f"TI √© subconjunto de todos? {funcionarios_ti.issubset(todos)}")

# Removendo duplicatas de listas grandes
lista_com_duplicatas = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]
lista_unica = list(set(lista_com_duplicatas))
print(f"Lista sem duplicatas: {lista_unica}")</code></pre>
            </div>
            
            <h5>5. List Comprehensions - Gera√ß√£o Elegante</h5>
            <p>List comprehensions permitem criar listas de forma concisa e pyth√¥nica, combinando cria√ß√£o e filtros em uma linha!</p>
            
            <div class="code-example">
                <pre><code># Forma tradicional vs List Comprehension
# Tradicional
quadrados_tradicional = []
for x in range(10):
    quadrados_tradicional.append(x ** 2)

# List Comprehension - muito mais elegante!
quadrados = [x ** 2 for x in range(10)]
print(f"Quadrados: {quadrados}")

# Com condi√ß√µes (filtros)
pares = [x for x in range(20) if x % 2 == 0]
numeros_grandes = [x for x in range(100) if x > 50 and x % 3 == 0]
print(f"Pares: {pares}")
print(f"Grandes m√∫ltiplos de 3: {numeros_grandes}")

# Transforma√ß√µes de strings
nomes = ["jo√£o", "maria", "pedro", "ana"]
nomes_formatados = [nome.title() for nome in nomes]
iniciais = [nome[0].upper() for nome in nomes]
print(f"Nomes formatados: {nomes_formatados}")
print(f"Iniciais: {iniciais}")

# List comprehensions aninhadas
matriz = [[i + j for j in range(3)] for i in range(3)]
print(f"Matriz 3x3: {matriz}")

# Achatando listas aninhadas
listas_aninhadas = [[1, 2], [3, 4], [5, 6]]
achatada = [item for sublista in listas_aninhadas for item in sublista]
print(f"Lista achatada: {achatada}")

# Dict e Set comprehensions tamb√©m existem!
quadrados_dict = {x: x**2 for x in range(5)}
print(f"Dicion√°rio de quadrados: {quadrados_dict}")

letras_unicas = {letra for palavra in ["python", "programacao"] for letra in palavra}
print(f"Letras √∫nicas: {letras_unicas}")</code></pre>
            </div>
            
            <h5>6. T√©cnicas Avan√ßadas de Itera√ß√£o</h5>
            <div class="code-example">
                <pre><code># Enumerate - √≠ndice + valor
frutas = ["ma√ß√£", "banana", "laranja"]
for indice, fruta in enumerate(frutas):
    print(f"{indice}: {fruta}")

# Enumerate com in√≠cio personalizado
for indice, fruta in enumerate(frutas, start=1):
    print(f"Fruta #{indice}: {fruta}")

# Zip - combinando listas
nomes = ["Ana", "Bruno", "Carlos"]
idades = [25, 30, 35]
cidades = ["SP", "RJ", "BH"]

for nome, idade, cidade in zip(nomes, idades, cidades):
    print(f"{nome}, {idade} anos, mora em {cidade}")

# Criando dicion√°rio com zip
pessoas_info = dict(zip(nomes, idades))
print(f"Idades: {pessoas_info}")

# Itera√ß√£o paralela em dicion√°rios
pontuacoes = {"Ana": 95, "Bruno": 87, "Carlos": 92}
posicoes = {"Ana": 1, "Bruno": 3, "Carlos": 2}

for nome in pontuacoes:
    print(f"{nome}: {pontuacoes[nome]} pontos, posi√ß√£o {posicoes[nome]}")</code></pre>
            </div>
            
            <div class="alert alert-info">
                <h6>üéØ Guia de Escolha: Qual Estrutura Usar?</h6>
                <ul class="mb-0">
                    <li><strong>Lista:</strong> Quando precisar de ordem, modifica√ß√£o e permitir duplicatas</li>
                    <li><strong>Tupla:</strong> Para dados imut√°veis, coordenadas, retorno de fun√ß√µes</li>
                    <li><strong>Dicion√°rio:</strong> Para mapeamento chave-valor, busca r√°pida por identificador</li>
                    <li><strong>Set:</strong> Para eliminar duplicatas e opera√ß√µes matem√°ticas de conjuntos</li>
                </ul>
            </div>
            
            <div class="alert alert-success">
                <h6>üí° Dicas de Performance:</h6>
                <ul class="mb-0">
                    <li>Dicion√°rios t√™m busca O(1) - muito r√°pidos para chaves</li>
                    <li>Sets t√™m verifica√ß√£o O(1) para membership (in)</li>
                    <li>Listas t√™m busca O(n) - evite em listas muito grandes</li>
                    <li>Use list comprehensions - s√£o mais r√°pidas que loops tradicionais</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6>‚ö†Ô∏è Pegadinhas Comuns:</h6>
                <ul class="mb-0">
                    <li>Dicion√°rios mant√™m ordem de inser√ß√£o (Python 3.7+)</li>
                    <li>Sets n√£o t√™m ordem garantida</li>
                    <li>Tupla de um elemento precisa de v√≠rgula: (1,)</li>
                    <li>Chaves de dicion√°rio devem ser imut√°veis (int, str, tupla)</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como adicionar um elemento ao final de uma lista?',
                'options': ['lista.add(elemento)', 'lista.append(elemento)', 'lista.insert(elemento)', 'lista.push(elemento)'],
                'correct_answer': 'lista.append(elemento)'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a principal diferen√ßa entre listas e tuplas?',
                'options': ['Listas s√£o maiores', 'Tuplas s√£o imut√°veis', 'Listas s√£o mais r√°pidas', 'Tuplas n√£o t√™m m√©todos'],
                'correct_answer': 'Tuplas s√£o imut√°veis'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como acessar um valor em um dicion√°rio de forma segura?',
                'options': ['dict[chave]', 'dict.get(chave)', 'dict.value(chave)', 'dict.access(chave)'],
                'correct_answer': 'dict.get(chave)'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual estrutura elimina automaticamente elementos duplicados?',
                'options': ['Lista', 'Tupla', 'Dicion√°rio', 'Conjunto (set)'],
                'correct_answer': 'Conjunto (set)'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a sa√≠da de: [x**2 for x in range(3)]?',
                'options': ['[0, 1, 4]', '[1, 4, 9]', '[0, 2, 4]', '[1, 2, 3]'],
                'correct_answer': '[0, 1, 4]'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como verificar se uma chave existe em um dicion√°rio?',
                'options': ['chave in dict', 'dict.has(chave)', 'dict.exists(chave)', 'dict.contains(chave)'],
                'correct_answer': 'chave in dict'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo une duas listas em Python?',
                'options': ['lista.join(outra)', 'lista.concat(outra)', 'lista.extend(outra)', 'lista.merge(outra)'],
                'correct_answer': 'lista.extend(outra)'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como criar uma tupla com apenas um elemento?',
                'options': ['(elemento)', '(elemento,)', '[elemento]', '{elemento}'],
                'correct_answer': '(elemento,)'
            }
        ]
    },
    6: {
        'title': 'Programa√ß√£o Orientada a Objetos',
        'description': 'Domine classes, objetos, heran√ßa e encapsulamento para criar c√≥digo profissional e reutiliz√°vel',
        'content': '''<div class="module-header">
            <h3>üè¢ M√≥dulo 6 - Programa√ß√£o Orientada a Objetos</h3>
            <p class="module-intro"><strong>Construa c√≥digo como um arquiteto profissional!</strong> Domine os pilares da POO: classes, objetos, heran√ßa, encapsulamento e polimorfismo. Transforme-se em um desenvolvedor que pensa em objetos!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Conceitos fundamentais de classes e objetos</li>
                <li>Atributos de inst√¢ncia e de classe</li>
                <li>M√©todos especiais e m√°gicos (__init__, __str__, etc.)</li>
                <li>Heran√ßa simples e m√∫ltipla</li>
                <li>Encapsulamento e propriedades</li>
                <li>Polimorfismo e sobrescrita de m√©todos</li>
                <li>Composi√ß√£o vs Heran√ßa</li>
                <li>Design patterns b√°sicos</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Fundamentos de Classes e Objetos</h5>
            <p>A Programa√ß√£o Orientada a Objetos √© um paradigma que organiza c√≥digo em "objetos" que representam entidades do mundo real, cada uma com caracter√≠sticas (atributos) e comportamentos (m√©todos).</p>
            
            <div class="alert alert-info">
                <h6>üß† Conceitos Essenciais:</h6>
                <ul class="mb-0">
                    <li><strong>Classe:</strong> Um molde/template para criar objetos</li>
                    <li><strong>Objeto:</strong> Uma inst√¢ncia espec√≠fica de uma classe</li>
                    <li><strong>Atributo:</strong> Caracter√≠sticas/dados do objeto</li>
                    <li><strong>M√©todo:</strong> A√ß√µes/comportamentos que o objeto pode realizar</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>üî∏ Criando sua Primeira Classe:</h6>
                <pre><code># Definindo uma classe Pessoa
class Pessoa:
    """Classe que representa uma pessoa com nome, idade e profiss√£o"""
    
    # Atributo de classe (compartilhado por todas as inst√¢ncias)
    especie = "Homo sapiens"
    
    def __init__(self, nome, idade, profissao="Estudante"):
        """Construtor da classe - inicializa os atributos de inst√¢ncia"""
        self.nome = nome
        self.idade = idade
        self.profissao = profissao
        self.energia = 100
    
    def apresentar(self):
        """M√©todo que faz a pessoa se apresentar"""
        return f"Ol√°! Eu sou {self.nome}, tenho {self.idade} anos e sou {self.profissao}."
    
    def fazer_aniversario(self):
        """M√©todo que aumenta a idade em 1 ano"""
        self.idade += 1
        print(f"üéâ Parab√©ns, {self.nome}! Agora voc√™ tem {self.idade} anos!")
    
    def trabalhar(self, horas):
        """M√©todo que simula trabalho e reduz energia"""
        if self.energia >= horas * 10:
            self.energia -= horas * 10
            print(f"{self.nome} trabalhou {horas} horas. Energia restante: {self.energia}")
        else:
            print(f"{self.nome} est√° muito cansado para trabalhar!")
    
    def dormir(self):
        """M√©todo que restaura a energia"""
        self.energia = 100
        print(f"{self.nome} dormiu e est√° revigorado!")

# Criando objetos (inst√¢ncias da classe)
pessoa1 = Pessoa("Maria Silva", 28, "Engenheira")
pessoa2 = Pessoa("Jo√£o Santos", 35, "Professor")
pessoa3 = Pessoa("Ana Costa", 22)  # Usa valor padr√£o "Estudante"

# Usando os objetos
print(pessoa1.apresentar())
print(f"Esp√©cie: {pessoa1.especie}")  # Atributo de classe

pessoa1.trabalhar(8)
pessoa1.fazer_aniversario()
pessoa1.dormir()</code></pre>
                
                <h6>üî∏ Atributos de Inst√¢ncia vs Classe:</h6>
                <pre><code>class Contador:
    """Classe que demonstra atributos de inst√¢ncia e classe"""
    
    # Atributo de classe - compartilhado por todas as inst√¢ncias
    total_objetos = 0
    
    def __init__(self, valor_inicial=0):
        # Atributo de inst√¢ncia - √∫nico para cada objeto
        self.valor = valor_inicial
        
        # Incrementa contador global
        Contador.total_objetos += 1
        self.id_objeto = Contador.total_objetos
    
    def incrementar(self, quantidade=1):
        self.valor += quantidade
    
    def info(self):
        return f"Contador #{self.id_objeto}: valor={self.valor}"
    
    @classmethod
    def quantos_objetos(cls):
        """M√©todo de classe - opera sobre a classe, n√£o inst√¢ncia"""
        return f"Total de contadores criados: {cls.total_objetos}"

# Testando atributos de classe
c1 = Contador(10)
c2 = Contador(20)
c3 = Contador()

print(c1.info())  # Contador #1: valor=10
print(c2.info())  # Contador #2: valor=20
print(Contador.quantos_objetos())  # Total de contadores criados: 3

c1.incrementar(5)
print(c1.info())  # Contador #1: valor=15</code></pre>
            </div>
            
            <h5>2. M√©todos Especiais (Magic Methods)</h5>
            <p>Python possui m√©todos especiais que come√ßam e terminam com duplo underscore (__). Eles definem como objetos se comportam em opera√ß√µes espec√≠ficas.</p>
            
            <div class="code-example">
                <pre><code>class ContaBancaria:
    """Classe que demonstra m√©todos especiais importantes"""
    
    def __init__(self, titular, saldo_inicial=0):
        self.titular = titular
        self.saldo = saldo_inicial
        self.historico = []
    
    def __str__(self):
        """Como o objeto aparece em print()"""
        return f"Conta de {self.titular}: R$ {self.saldo:.2f}"
    
    def __repr__(self):
        """Representa√ß√£o t√©cnica do objeto para desenvolvedores"""
        return f"ContaBancaria('{self.titular}', {self.saldo})"
    
    def __len__(self):
        """Define comportamento para len(objeto)"""
        return len(self.historico)
    
    def __eq__(self, outra):
        """Define igualdade entre objetos"""
        return self.titular == outra.titular and self.saldo == outra.saldo
    
    def __lt__(self, outra):
        """Define compara√ß√£o menor que (<)"""
        return self.saldo < outra.saldo
    
    def __add__(self, valor):
        """Define soma com + """
        if isinstance(valor, (int, float)):
            return ContaBancaria(self.titular, self.saldo + valor)
        return NotImplemented
    
    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.historico.append(f"Dep√≥sito: +R$ {valor:.2f}")
        else:
            raise ValueError("Valor de dep√≥sito deve ser positivo")
    
    def sacar(self, valor):
        if valor > 0 and valor <= self.saldo:
            self.saldo -= valor
            self.historico.append(f"Saque: -R$ {valor:.2f}")
        else:
            raise ValueError("Saldo insuficiente ou valor inv√°lido")

# Testando m√©todos especiais
conta1 = ContaBancaria("Maria", 1000)
conta2 = ContaBancaria("Jo√£o", 1500)

print(conta1)  # Usa __str__: Conta de Maria: R$ 1000.00
print(repr(conta1))  # Usa __repr__: ContaBancaria('Maria', 1000)

conta1.depositar(500)
conta1.sacar(200)
print(f"Hist√≥rico tem {len(conta1)} transa√ß√µes")  # Usa __len__

# Compara√ß√µes
print(f"Conta1 < Conta2? {conta1 < conta2}")  # Usa __lt__
print(f"Contas iguais? {conta1 == conta2}")   # Usa __eq__

# Soma
conta3 = conta1 + 100  # Usa __add__
print(f"Nova conta: {conta3}")</code></pre>
            </div>
            
            <h5>3. Heran√ßa - Reutilizando e Especializando C√≥digo</h5>
            <p>Heran√ßa permite criar novas classes baseadas em classes existentes, reutilizando c√≥digo e adicionando funcionalidades espec√≠ficas.</p>
            
            <div class="code-example">
                <pre><code># Classe base (superclasse)
class Veiculo:
    """Classe base para todos os ve√≠culos"""
    
    def __init__(self, marca, modelo, ano):
        self.marca = marca
        self.modelo = modelo
        self.ano = ano
        self.ligado = False
        self.velocidade = 0
    
    def ligar(self):
        if not self.ligado:
            self.ligado = True
            print(f"{self.marca} {self.modelo} foi ligado!")
        else:
            print("Ve√≠culo j√° est√° ligado!")
    
    def desligar(self):
        if self.ligado and self.velocidade == 0:
            self.ligado = False
            print(f"{self.marca} {self.modelo} foi desligado!")
        else:
            print("Pare o ve√≠culo antes de desligar!")
    
    def acelerar(self, incremento):
        if self.ligado:
            self.velocidade += incremento
            print(f"Velocidade: {self.velocidade} km/h")
        else:
            print("Ligue o ve√≠culo primeiro!")
    
    def info(self):
        status = "Ligado" if self.ligado else "Desligado"
        return f"{self.marca} {self.modelo} ({self.ano}) - {status} - {self.velocidade} km/h"

# Classes filhas (subclasses)
class Carro(Veiculo):
    """Classe espec√≠fica para carros"""
    
    def __init__(self, marca, modelo, ano, portas):
        super().__init__(marca, modelo, ano)  # Chama construtor da classe pai
        self.portas = portas
        self.combustivel = 100
    
    def acelerar(self, incremento):
        """Sobrescreve m√©todo da classe pai com comportamento espec√≠fico"""
        if self.combustivel > 0:
            super().acelerar(incremento)  # Chama m√©todo da classe pai
            self.combustivel -= incremento * 0.1  # Consome combust√≠vel
            print(f"Combust√≠vel: {self.combustivel:.1f}%")
        else:
            print("Sem combust√≠vel!")
    
    def abastecer(self):
        self.combustivel = 100
        print("Tanque cheio!")
    
    def info(self):
        base_info = super().info()
        return f"{base_info} - {self.portas} portas - Combust√≠vel: {self.combustivel:.1f}%"

class Bicicleta(Veiculo):
    """Classe espec√≠fica para bicicletas"""
    
    def __init__(self, marca, modelo, ano, marchas):
        super().__init__(marca, modelo, ano)
        self.marchas = marchas
        self.marcha_atual = 1
    
    def ligar(self):
        """Bicicleta n√£o tem motor - sobrescreve comportamento"""
        print("Bicicletas n√£o precisam ser ligadas! Apenas pedale!")
        self.ligado = True
    
    def trocar_marcha(self, nova_marcha):
        if 1 <= nova_marcha <= self.marchas:
            self.marcha_atual = nova_marcha
            print(f"Marcha alterada para {nova_marcha}")
        else:
            print(f"Marcha inv√°lida! Use 1-{self.marchas}")
    
    def info(self):
        base_info = super().info()
        return f"{base_info} - {self.marchas} marchas - Marcha atual: {self.marcha_atual}"

# Usando heran√ßa
carro = Carro("Toyota", "Corolla", 2022, 4)
bike = Bicicleta("Caloi", "Mountain", 2021, 21)

print("=== CARRO ===")
print(carro.info())
carro.ligar()
carro.acelerar(50)
carro.abastecer()

print("\n=== BICICLETA ===")
print(bike.info())
bike.ligar()  # Comportamento diferente!
bike.trocar_marcha(5)
bike.acelerar(15)</code></pre>
            </div>
            
            <h5>4. Encapsulamento e Propriedades</h5>
            <p>Encapsulamento protege dados internos e controla como s√£o acessados e modificados, usando conven√ß√µes de nomenclatura e propriedades.</p>
            
            <div class="code-example">
                <pre><code>class Produto:
    """Classe que demonstra encapsulamento com propriedades"""
    
    def __init__(self, nome, preco, categoria):
        self._nome = nome  # Conven√ß√£o: _ indica "privado"
        self._preco = 0
        self._categoria = categoria
        self.__codigo = self._gerar_codigo()  # __ √© "muito privado"
        self.preco = preco  # Usa o setter para validar
    
    def _gerar_codigo(self):
        """M√©todo privado para gerar c√≥digo interno"""
        import random
        return f"{self._categoria[:3].upper()}{random.randint(1000, 9999)}"
    
    @property
    def nome(self):
        """Getter para nome"""
        return self._nome.title()
    
    @nome.setter
    def nome(self, valor):
        """Setter para nome com valida√ß√£o"""
        if isinstance(valor, str) and len(valor) >= 2:
            self._nome = valor
        else:
            raise ValueError("Nome deve ser string com pelo menos 2 caracteres")
    
    @property
    def preco(self):
        """Getter para pre√ßo"""
        return self._preco
    
    @preco.setter
    def preco(self, valor):
        """Setter para pre√ßo com valida√ß√£o"""
        if isinstance(valor, (int, float)) and valor >= 0:
            self._preco = float(valor)
        else:
            raise ValueError("Pre√ßo deve ser n√∫mero positivo")
    
    @property
    def codigo(self):
        """Propriedade somente leitura"""
        return self.__codigo
    
    def aplicar_desconto(self, percentual):
        """M√©todo p√∫blico para aplicar desconto"""
        if 0 <= percentual <= 50:  # M√°ximo 50% desconto
            desconto = self._preco * (percentual / 100)
            self._preco -= desconto
            print(f"Desconto de {percentual}% aplicado! Novo pre√ßo: R$ {self._preco:.2f}")
        else:
            raise ValueError("Desconto deve estar entre 0% e 50%")
    
    def __str__(self):
        return f"{self.nome} ({self.codigo}) - R$ {self.preco:.2f}"

# Demonstrando encapsulamento
produto = Produto("notebook gamer", 2500.00, "eletr√¥nicos")

print(produto)  # notebook gamer (ELE1234) - R$ 2500.00
print(f"C√≥digo: {produto.codigo}")  # Acesso somente leitura

# Usando setters com valida√ß√£o
produto.nome = "Notebook Gamer RGB"
produto.preco = 2200.00

# Tentativas inv√°lidas causar√£o erros
try:
    produto.preco = -100  # ValueError!
except ValueError as e:
    print(f"Erro: {e}")

produto.aplicar_desconto(10)  # M√©todo controlado para mudan√ßas</code></pre>
            </div>
            
            <h5>5. Polimorfismo - Uma Interface, M√∫ltiplos Comportamentos</h5>
            <p>Polimorfismo permite que objetos de diferentes classes sejam tratados de forma uniforme atrav√©s de uma interface comum.</p>
            
            <div class="code-example">
                <pre><code>class Animal:
    """Classe base para demonstrar polimorfismo"""
    
    def __init__(self, nome, especie):
        self.nome = nome
        self.especie = especie
    
    def fazer_som(self):
        """M√©todo que ser√° sobrescrito pelas subclasses"""
        return "Som gen√©rico de animal"
    
    def mover(self):
        return f"{self.nome} se move"

class Cachorro(Animal):
    def __init__(self, nome, raca):
        super().__init__(nome, "Canino")
        self.raca = raca
    
    def fazer_som(self):
        return "Au au!"
    
    def mover(self):
        return f"{self.nome} corre e pula"

class Gato(Animal):
    def __init__(self, nome, cor):
        super().__init__(nome, "Felino")
        self.cor = cor
    
    def fazer_som(self):
        return "Miau!"
    
    def mover(self):
        return f"{self.nome} caminha silenciosamente"

class Pato(Animal):
    def __init__(self, nome):
        super().__init__(nome, "Ave")
    
    def fazer_som(self):
        return "Quack!"
    
    def mover(self):
        return f"{self.nome} nada e voa"

# Lista com diferentes tipos de animais
animais = [
    Cachorro("Rex", "Labrador"),
    Gato("Mimi", "Branco"),
    Pato("Donald"),
    Cachorro("Bolt", "Pastor Alem√£o")
]

# Polimorfismo em a√ß√£o - mesmo c√≥digo, comportamentos diferentes
print("=== FAZENDO SONS ===")
for animal in animais:
    print(f"{animal.nome}: {animal.fazer_som()}")

print("\n=== MOVIMENTOS ===")
for animal in animais:
    print(animal.mover())

# Fun√ß√£o que aceita qualquer animal (polimorfismo)
def apresentar_animal(animal):
    """Fun√ß√£o polim√≥rfica - funciona com qualquer subclasse de Animal"""
    print(f"Este √© {animal.nome}, um {animal.especie}")
    print(f"Ele faz: {animal.fazer_som()}")
    print(f"Movimento: {animal.mover()}")
    print("-" * 30)

# Testando polimorfismo
for animal in animais:
    apresentar_animal(animal)</code></pre>
            </div>
            
            <h5>6. Composi√ß√£o vs Heran√ßa</h5>
            <p>Nem sempre heran√ßa √© a melhor solu√ß√£o. Composi√ß√£o permite construir objetos complexos combinando objetos mais simples.</p>
            
            <div class="code-example">
                <pre><code># Composi√ß√£o - "tem um" relacionamento
class Motor:
    def __init__(self, potencia, tipo_combustivel):
        self.potencia = potencia
        self.tipo_combustivel = tipo_combustivel
        self.ligado = False
    
    def ligar(self):
        self.ligado = True
        return f"Motor {self.potencia}HP ligado!"
    
    def desligar(self):
        self.ligado = False
        return "Motor desligado!"

class GPS:
    def __init__(self):
        self.destino = None
    
    def definir_destino(self, local):
        self.destino = local
        return f"Destino definido: {local}"
    
    def navegar(self):
        if self.destino:
            return f"Navegando para {self.destino}..."
        return "Defina um destino primeiro!"

class CarroCompleto:
    """Classe que usa composi√ß√£o em vez de heran√ßa"""
    
    def __init__(self, marca, modelo, potencia_motor):
        self.marca = marca
        self.modelo = modelo
        # Composi√ß√£o - carro "tem um" motor e "tem um" GPS
        self.motor = Motor(potencia_motor, "Gasolina")
        self.gps = GPS()
        self.velocidade = 0
    
    def ligar(self):
        return self.motor.ligar()
    
    def acelerar(self, incremento):
        if self.motor.ligado:
            self.velocidade += incremento
            return f"Acelerando... Velocidade: {self.velocidade} km/h"
        return "Ligue o motor primeiro!"
    
    def navegar_para(self, destino):
        self.gps.definir_destino(destino)
        return self.gps.navegar()
    
    def info_completa(self):
        motor_status = "Ligado" if self.motor.ligado else "Desligado"
        gps_info = f"GPS: {self.gps.destino}" if self.gps.destino else "GPS sem destino"
        return f"{self.marca} {self.modelo} - Motor: {motor_status} - {gps_info}"

# Usando composi√ß√£o
carro = CarroCompleto("Honda", "Civic", 150)
print(carro.info_completa())
print(carro.ligar())
print(carro.acelerar(30))
print(carro.navegar_para("Shopping Center"))
print(carro.info_completa())</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6>üéØ Vantagens da POO:</h6>
                <ul class="mb-0">
                    <li><strong>Reutiliza√ß√£o:</strong> Classes podem ser reutilizadas em diferentes projetos</li>
                    <li><strong>Manutenibilidade:</strong> C√≥digo organizado √© mais f√°cil de manter</li>
                    <li><strong>Modularidade:</strong> Cada classe tem responsabilidade espec√≠fica</li>
                    <li><strong>Extensibilidade:</strong> F√°cil adicionar novas funcionalidades</li>
                </ul>
            </div>
            
            <div class="alert alert-info">
                <h6>üß≠ Quando Usar Heran√ßa vs Composi√ß√£o:</h6>
                <ul class="mb-0">
                    <li><strong>Heran√ßa:</strong> Quando h√° relacionamento "√© um" (Carro √© um Ve√≠culo)</li>
                    <li><strong>Composi√ß√£o:</strong> Quando h√° relacionamento "tem um" (Carro tem um Motor)</li>
                    <li><strong>Regra geral:</strong> Prefira composi√ß√£o quando poss√≠vel</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como definir uma classe em Python?',
                'options': ['class MinhaClasse:', 'create MinhaClasse:', 'def MinhaClasse:', 'object MinhaClasse:'],
                'correct_answer': 'class MinhaClasse:'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo √© chamado automaticamente ao criar um objeto?',
                'options': ['__create__', '__init__', '__new__', '__start__'],
                'correct_answer': '__init__'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que significa "self" em Python?',
                'options': ['Refer√™ncia ao objeto atual', 'Nome da classe', 'M√©todo especial', 'Vari√°vel global'],
                'correct_answer': 'Refer√™ncia ao objeto atual'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© heran√ßa em POO?',
                'options': ['Copiar c√≥digo', 'Uma classe filha herda caracter√≠sticas da classe pai', 'Deletar classes', 'Renomear m√©todos'],
                'correct_answer': 'Uma classe filha herda caracter√≠sticas da classe pai'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como indicar que um atributo √© "privado" por conven√ß√£o?',
                'options': ['Usar mai√∫scula', 'Come√ßar com _', 'Usar @private', 'Come√ßar com #'],
                'correct_answer': 'Come√ßar com _'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo especial define como um objeto aparece em print()?',
                'options': ['__repr__', '__str__', '__print__', '__show__'],
                'correct_answer': '__str__'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como chamar o construtor da classe pai?',
                'options': ['parent().__init__()', 'super().__init__()', 'base().__init__()', 'father().__init__()'],
                'correct_answer': 'super().__init__()'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© polimorfismo?',
                'options': ['M√∫ltiplos construtores', 'M√∫ltiplas heran√ßas', 'Mesma interface, comportamentos diferentes', 'M√©todos privados'],
                'correct_answer': 'Mesma interface, comportamentos diferentes'
            }
        ]
    },
    7: {
        'title': 'Tratamento de Exce√ß√µes',
        'description': 'Aprenda a lidar com erros de forma profissional usando try, except, finally e raise',
        'content': '''<div class="module-header">
            <h3>‚ö†Ô∏è M√≥dulo 7 - Tratamento de Exce√ß√µes</h3>
            <p class="module-intro"><strong>Torne seus programas √† prova de erros!</strong> Domine o tratamento profissional de exce√ß√µes, antecipe problemas e crie aplica√ß√µes robustas que nunca quebram inesperadamente!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Tipos de exce√ß√µes e hierarquia completa</li>
                <li>Blocos try, except, else, finally avan√ßados</li>
                <li>Captura espec√≠fica vs gen√©rica de exce√ß√µes</li>
                <li>Lan√ßamento controlado com raise</li>
                <li>Cria√ß√£o de exce√ß√µes personalizadas</li>
                <li>Context managers e with statement</li>
                <li>Debugging e logging de erros</li>
                <li>Estrat√©gias de recupera√ß√£o de erros</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Por que Tratar Exce√ß√µes √© Fundamental?</h5>
            <p>Exce√ß√µes s√£o eventos que interrompem o fluxo normal do programa. Em aplica√ß√µes profissionais, tratar exce√ß√µes adequadamente √© a diferen√ßa entre um software confi√°vel e um que "quebra" constantemente.</p>
            
            <div class="alert alert-warning">
                <h6>üö® Exce√ß√µes Comuns e Suas Causas:</h6>
                <ul class="mb-0">
                    <li><code>ZeroDivisionError</code> - Divis√£o por zero</li>
                    <li><code>ValueError</code> - Valor inadequado para o tipo</li>
                    <li><code>TypeError</code> - Opera√ß√£o com tipo incorreto</li>
                    <li><code>FileNotFoundError</code> - Arquivo n√£o encontrado</li>
                    <li><code>KeyError</code> - Chave inexistente em dicion√°rio</li>
                    <li><code>IndexError</code> - √çndice fora dos limites</li>
                    <li><code>AttributeError</code> - Atributo inexistente</li>
                    <li><code>ImportError</code> - M√≥dulo n√£o encontrado</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>üî∏ Tratamento B√°sico vs Avan√ßado:</h6>
                <pre><code># ‚ùå C√≥digo sem tratamento - PERIGOSO!
def dividir_perigoso(a, b):
    return a / b  # Pode gerar ZeroDivisionError!

# ‚úÖ C√≥digo com tratamento b√°sico
def dividir_basico(a, b):
    try:
        resultado = a / b
        return resultado
    except ZeroDivisionError:
        print("Erro: Divis√£o por zero!")
        return None

# üéØ C√≥digo com tratamento profissional
def dividir_profissional(a, b):
    """
    Divis√£o segura com tratamento completo de exce√ß√µes
    
    Args:
        a: Dividendo (n√∫mero)
        b: Divisor (n√∫mero) 
        
    Returns:
        float: Resultado da divis√£o ou None se inv√°lida
        
    Raises:
        TypeError: Se argumentos n√£o forem n√∫meros
        ValueError: Se divisor for zero
    """
    # Valida√ß√£o de tipos
    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):
        raise TypeError("Argumentos devem ser n√∫meros")
    
    # Valida√ß√£o de valor
    if b == 0:
        raise ValueError("Divisor n√£o pode ser zero")
    
    try:
        resultado = a / b
        print(f"‚úÖ Divis√£o realizada: {a} √∑ {b} = {resultado}")
        return resultado
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return None

# Testando as vers√µes
print(dividir_profissional(10, 2))   # ‚úÖ 5.0
print(dividir_profissional(10, 0))   # ‚ùå ValueError
print(dividir_profissional("10", 2)) # ‚ùå TypeError</code></pre>
            </div>
            
            <h5>2. Blocos Try-Except Avan√ßados</h5>
            <p>Domine todas as possibilidades dos blocos de tratamento para criar c√≥digo robusto e informativo.</p>
            
            <div class="code-example">
                <pre><code># Estrutura completa do tratamento de exce√ß√µes
def processar_arquivo_completo(nome_arquivo):
    """Demonstra tratamento completo com try-except-else-finally"""
    
    arquivo = None
    dados_processados = 0
    
    try:
        print(f"üîç Tentando abrir arquivo: {nome_arquivo}")
        arquivo = open(nome_arquivo, 'r', encoding='utf-8')
        
        print("üìñ Lendo conte√∫do...")
        conteudo = arquivo.read()
        
        print("üî¢ Processando dados...")
        linhas = conteudo.split('\n')
        dados_processados = len([linha for linha in linhas if linha.strip()])
        
        # Simular poss√≠vel erro de processamento
        if dados_processados == 0:
            raise ValueError("Arquivo vazio ou apenas com linhas em branco")
            
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo '{nome_arquivo}' n√£o encontrado!")
        return None
        
    except PermissionError:
        print(f"‚ùå Erro: Sem permiss√£o para ler '{nome_arquivo}'!")
        return None
        
    except UnicodeDecodeError:
        print(f"‚ùå Erro: Problema de encoding no arquivo '{nome_arquivo}'!")
        return None
        
    except ValueError as e:
        print(f"‚ùå Erro de valor: {e}")
        return None
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {type(e).__name__}: {e}")
        return None
        
    else:
        # Executado APENAS se N√ÉO houve exce√ß√µes
        print(f"‚úÖ Arquivo processado com sucesso!")
        print(f"üìä Total de linhas v√°lidas: {dados_processados}")
        
    finally:
        # Executado SEMPRE, independente de exce√ß√µes
        if arquivo and not arquivo.closed:
            arquivo.close()
            print("üîí Arquivo fechado com seguran√ßa")
        
        print("üèÅ Processamento finalizado")
    
    return dados_processados

# Testando diferentes cen√°rios
print("=== Teste 1: Arquivo existente ===")
resultado1 = processar_arquivo_completo("dados.txt")

print("\n=== Teste 2: Arquivo inexistente ===")
resultado2 = processar_arquivo_completo("inexistente.txt")</code></pre>
                
                <h6>üî∏ Capturando M√∫ltiplas Exce√ß√µes:</h6>
                <pre><code>def converter_numero_robusto(entrada):
    """Converte string para n√∫mero com m√∫ltiplas valida√ß√µes"""
    
    try:
        # Tentativa 1: Converter para inteiro
        if entrada.isdigit() or (entrada.startswith('-') and entrada[1:].isdigit()):
            return int(entrada)
        
        # Tentativa 2: Converter para float
        return float(entrada)
        
    except (ValueError, TypeError) as e:
        # Capturando m√∫ltiplas exce√ß√µes em uma linha
        print(f"‚ùå Erro de convers√£o: {e}")
        return None
        
    except AttributeError:
        # entrada n√£o √© string (n√£o tem m√©todo isdigit)
        print("‚ùå Entrada deve ser uma string")
        return None

# Fun√ß√£o mais complexa com valida√ß√µes aninhadas
def calcular_media_notas():
    """Calcula m√©dia de notas com tratamento robusto"""
    
    notas = []
    
    while True:
        try:
            entrada = input("Digite uma nota (ou 'fim' para calcular): ")
            
            if entrada.lower() == 'fim':
                break
                
            nota = float(entrada)
            
            # Valida√ß√£o de range
            if not 0 <= nota <= 10:
                raise ValueError(f"Nota deve estar entre 0 e 10, recebido: {nota}")
            
            notas.append(nota)
            print(f"‚úÖ Nota {nota} adicionada")
            
        except ValueError as e:
            if "could not convert" in str(e):
                print("‚ùå Digite um n√∫mero v√°lido!")
            else:
                print(f"‚ùå {e}")
                
        except KeyboardInterrupt:
            print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio")
            return None
            
        except EOFError:
            print("\n‚ùå Entrada finalizada inesperadamente")
            break
    
    if not notas:
        print("‚ùå Nenhuma nota foi inserida")
        return None
    
    try:
        media = sum(notas) / len(notas)
        print(f"üìä M√©dia das {len(notas)} notas: {media:.2f}")
        return media
        
    except ZeroDivisionError:  # Teoricamente imposs√≠vel aqui, mas boa pr√°tica
        print("‚ùå Erro: Divis√£o por zero (sem notas)")
        return None

# Exemplo de uso (comentado para n√£o interromper execu√ß√£o)
# calcular_media_notas()</code></pre>
            </div>
            
            <h5>3. Lan√ßamento Controlado de Exce√ß√µes</h5>
            <p>Use <code>raise</code> para lan√ßar exce√ß√µes em situa√ß√µes espec√≠ficas, controlando o fluxo do programa.</p>
            
            <div class="code-example">
                <pre><code>class ValidadorDados:
    """Classe que demonstra uso profissional de raise"""
    
    @staticmethod
    def validar_email(email):
        """Valida formato de email"""
        if not isinstance(email, str):
            raise TypeError("Email deve ser uma string")
        
        if not email:
            raise ValueError("Email n√£o pode estar vazio")
        
        if '@' not in email:
            raise ValueError("Email deve conter @")
        
        if email.count('@') != 1:
            raise ValueError("Email deve conter exatamente um @")
        
        partes = email.split('@')
        if not partes[0] or not partes[1]:
            raise ValueError("Email deve ter usu√°rio e dom√≠nio")
        
        if '.' not in partes[1]:
            raise ValueError("Dom√≠nio deve conter pelo menos um ponto")
        
        return True
    
    @staticmethod  
    def validar_idade(idade):
        """Valida idade com regras espec√≠ficas"""
        if not isinstance(idade, int):
            raise TypeError(f"Idade deve ser inteiro, recebido {type(idade).__name__}")
        
        if idade < 0:
            raise ValueError("Idade n√£o pode ser negativa")
        
        if idade > 150:
            raise ValueError("Idade n√£o pode ser maior que 150 anos")
        
        return True
    
    @staticmethod
    def validar_senha(senha):
        """Valida for√ßa da senha"""
        if not isinstance(senha, str):
            raise TypeError("Senha deve ser string")
        
        if len(senha) < 8:
            raise ValueError("Senha deve ter pelo menos 8 caracteres")
        
        if not any(c.isupper() for c in senha):
            raise ValueError("Senha deve ter pelo menos uma mai√∫scula")
        
        if not any(c.islower() for c in senha):
            raise ValueError("Senha deve ter pelo menos uma min√∫scula")
        
        if not any(c.isdigit() for c in senha):
            raise ValueError("Senha deve ter pelo menos um n√∫mero")
        
        return True

# Sistema de cadastro usando valida√ß√µes
def cadastrar_usuario(email, idade, senha):
    """Cadastra usu√°rio com valida√ß√µes completas"""
    
    try:
        print("üîç Validando dados...")
        
        ValidadorDados.validar_email(email)
        print("‚úÖ Email v√°lido")
        
        ValidadorDados.validar_idade(idade)
        print("‚úÖ Idade v√°lida")
        
        ValidadorDados.validar_senha(senha)
        print("‚úÖ Senha v√°lida")
        
        # Simular salvamento no banco
        print(f"üíæ Usu√°rio cadastrado: {email}, {idade} anos")
        return True
        
    except (TypeError, ValueError) as e:
        print(f"‚ùå Erro de valida√ß√£o: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

# Testando valida√ß√µes
print("=== Teste de Cadastro ===")
sucesso = cadastrar_usuario("user@email.com", 25, "MinhaSenh@123")
print(f"Cadastro {'bem-sucedido' if sucesso else 'falhou'}")

print("\n=== Teste com Dados Inv√°lidos ===")
sucesso = cadastrar_usuario("email_invalido", -5, "123")</code></pre>
            </div>
            
            <h5>4. Exce√ß√µes Personalizadas</h5>
            <p>Crie suas pr√≥prias exce√ß√µes para situa√ß√µes espec√≠ficas do seu dom√≠nio de aplica√ß√£o.</p>
            
            <div class="code-example">
                <pre><code># Hierarquia de exce√ß√µes personalizadas
class ErroSistemaFinanceiro(Exception):
    """Exce√ß√£o base para sistema financeiro"""
    pass

class ErroContaInexistente(ErroSistemaFinanceiro):
    """Exce√ß√£o para conta n√£o encontrada"""
    pass

class ErroSaldoInsuficiente(ErroSistemaFinanceiro):
    """Exce√ß√£o para saldo insuficiente"""
    
    def __init__(self, saldo_atual, valor_tentativa):
        self.saldo_atual = saldo_atual
        self.valor_tentativa = valor_tentativa
        super().__init__(f"Saldo insuficiente: R$ {saldo_atual:.2f}, tentativa: R$ {valor_tentativa:.2f}")

class ErroLimiteCredito(ErroSistemaFinanceiro):
    """Exce√ß√£o para limite de cr√©dito excedido"""
    
    def __init__(self, limite, valor_tentativa):
        self.limite = limite
        self.valor_tentativa = valor_tentativa
        mensagem = f"Limite de cr√©dito excedido. Limite: R$ {limite:.2f}, Tentativa: R$ {valor_tentativa:.2f}"
        super().__init__(mensagem)

class ContaBancaria:
    """Sistema banc√°rio com exce√ß√µes personalizadas"""
    
    def __init__(self, numero, titular, saldo_inicial=0, limite_credito=1000):
        self.numero = numero
        self.titular = titular
        self.saldo = saldo_inicial
        self.limite_credito = limite_credito
        self.historico = []
    
    def depositar(self, valor):
        """Deposita valor na conta"""
        if valor <= 0:
            raise ValueError("Valor de dep√≥sito deve ser positivo")
        
        self.saldo += valor
        self.historico.append(f"Dep√≥sito: +R$ {valor:.2f}")
        print(f"‚úÖ Dep√≥sito realizado: R$ {valor:.2f}")
        
    def sacar(self, valor):
        """Saca valor da conta com verifica√ß√µes"""
        if valor <= 0:
            raise ValueError("Valor de saque deve ser positivo")
        
        # Verificar se h√° saldo suficiente
        if valor > self.saldo:
            raise ErroSaldoInsuficiente(self.saldo, valor)
        
        self.saldo -= valor
        self.historico.append(f"Saque: -R$ {valor:.2f}")
        print(f"‚úÖ Saque realizado: R$ {valor:.2f}")
    
    def usar_credito(self, valor):
        """Usa cr√©dito pr√©-aprovado"""
        if valor <= 0:
            raise ValueError("Valor deve ser positivo")
        
        # Verificar limite de cr√©dito
        if valor > self.limite_credito:
            raise ErroLimiteCredito(self.limite_credito, valor)
        
        # Usar cr√©dito (saldo pode ficar negativo)
        self.saldo -= valor
        self.historico.append(f"Cr√©dito usado: -R$ {valor:.2f}")
        print(f"‚úÖ Cr√©dito utilizado: R$ {valor:.2f}")
    
    def extrato(self):
        """Exibe extrato da conta"""
        print(f"\n=== EXTRATO - Conta {self.numero} ===")
        print(f"Titular: {self.titular}")
        print(f"Saldo atual: R$ {self.saldo:.2f}")
        print(f"Limite de cr√©dito: R$ {self.limite_credito:.2f}")
        print("\nHist√≥rico:")
        for transacao in self.historico:
            print(f"  {transacao}")

# Sistema banc√°rio usando exce√ß√µes personalizadas
def simular_operacoes_bancarias():
    """Simula opera√ß√µes banc√°rias com tratamento de exce√ß√µes"""
    
    conta = ContaBancaria("12345", "Jo√£o Silva", 1000, 500)
    
    operacoes = [
        ("depositar", 200),
        ("sacar", 300),
        ("sacar", 1500),      # Vai dar erro de saldo
        ("usar_credito", 400),
        ("usar_credito", 200), # Vai dar erro de limite
    ]
    
    for operacao, valor in operacoes:
        try:
            print(f"\nüîÑ Tentando {operacao} R$ {valor:.2f}")
            
            if operacao == "depositar":
                conta.depositar(valor)
            elif operacao == "sacar":
                conta.sacar(valor)
            elif operacao == "usar_credito":
                conta.usar_credito(valor)
                
        except ErroSaldoInsuficiente as e:
            print(f"‚ùå Erro espec√≠fico: {e}")
            print(f"üí° Sugest√£o: Use cr√©dito ou deposite R$ {e.valor_tentativa - e.saldo_atual:.2f}")
            
        except ErroLimiteCredito as e:
            print(f"‚ùå Erro de limite: {e}")
            print(f"üí° Dispon√≠vel no cr√©dito: R$ {e.limite:.2f}")
            
        except ErroSistemaFinanceiro as e:
            print(f"‚ùå Erro financeiro: {e}")
            
        except ValueError as e:
            print(f"‚ùå Erro de valor: {e}")
    
    conta.extrato()

# Executar simula√ß√£o
simular_operacoes_bancarias()</code></pre>
            </div>
            
            <h5>5. Context Managers e With Statement</h5>
            <p>Use context managers para garantir limpeza de recursos, mesmo quando exce√ß√µes ocorrem.</p>
            
            <div class="code-example">
                <pre><code># Context manager para arquivos - autom√°tico
def processar_arquivo_seguro(nome_arquivo):
    """Usando with para garantir fechamento do arquivo"""
    
    try:
        with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:
            print(f"üìñ Arquivo {nome_arquivo} aberto")
            conteudo = arquivo.read()
            
            # Arquivo √© fechado automaticamente, mesmo se houver exce√ß√£o
            if not conteudo.strip():
                raise ValueError("Arquivo est√° vazio")
            
            return len(conteudo.split('\n'))
            
    except FileNotFoundError:
        print(f"‚ùå Arquivo {nome_arquivo} n√£o encontrado")
        return 0
    except ValueError as e:
        print(f"‚ùå Erro de conte√∫do: {e}")
        return 0

# Context manager personalizado
class GerenciadorConexao:
    """Simula uma conex√£o que precisa ser fechada"""
    
    def __init__(self, servidor):
        self.servidor = servidor
        self.conectado = False
    
    def __enter__(self):
        """M√©todo chamado ao entrar no bloco with"""
        print(f"üîå Conectando ao servidor {self.servidor}")
        self.conectado = True
        return self
    
    def __exit__(self, exc_type, exc_value, traceback):
        """M√©todo chamado ao sair do bloco with (sempre executado)"""
        if self.conectado:
            print(f"üîå Desconectando do servidor {self.servidor}")
            self.conectado = False
        
        # Se retornar True, suprime a exce√ß√£o
        if exc_type:
            print(f"‚ùå Exce√ß√£o capturada: {exc_type.__name__}: {exc_value}")
            return False  # N√£o suprimir exce√ß√£o
    
    def enviar_dados(self, dados):
        """Simula envio de dados"""
        if not self.conectado:
            raise RuntimeError("N√£o conectado ao servidor")
        
        if not dados:
            raise ValueError("Dados n√£o podem estar vazios")
        
        print(f"üì§ Enviando: {dados}")

# Usando context manager personalizado
def exemplo_context_manager():
    """Demonstra uso de context manager personalizado"""
    
    try:
        with GerenciadorConexao("servidor-api.com") as conexao:
            conexao.enviar_dados("Dados importantes")
            conexao.enviar_dados("")  # Vai gerar erro
            
    except (RuntimeError, ValueError) as e:
        print(f"‚ùå Erro durante opera√ß√£o: {e}")
    
    print("‚úÖ Context manager garantiu limpeza")

exemplo_context_manager()</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6>üéØ Melhores Pr√°ticas para Exce√ß√µes:</h6>
                <ul class="mb-0">
                    <li><strong>Seja espec√≠fico:</strong> Capture exce√ß√µes espec√≠ficas, n√£o Exception gen√©rica</li>
                    <li><strong>Falhe r√°pido:</strong> Valide entrada no in√≠cio das fun√ß√µes</li>
                    <li><strong>Documente:</strong> Use docstrings para documentar exce√ß√µes poss√≠veis</li>
                    <li><strong>Log erros:</strong> Registre exce√ß√µes para debugging futuro</li>
                    <li><strong>Recupere-se:</strong> Ofere√ßa alternativas quando poss√≠vel</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6>‚ö†Ô∏è Armadilhas Comuns:</h6>
                <ul class="mb-0">
                    <li>Nunca use <code>except:</code> sem especificar a exce√ß√£o</li>
                    <li>N√£o ignore exce√ß√µes silenciosamente (<code>pass</code>)</li>
                    <li>Cuidado com <code>except Exception</code> - muito gen√©rico</li>
                    <li>Sempre feche recursos manualmente ou use context managers</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave inicia um bloco de tratamento de exce√ß√£o?',
                'options': ['try', 'catch', 'except', 'handle'],
                'correct_answer': 'try'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual palavra-chave captura uma exce√ß√£o?',
                'options': ['catch', 'except', 'handle', 'grab'],
                'correct_answer': 'except'
            },
            {
                'type': 'multiple_choice',
                'question': 'Quando o bloco "finally" √© executado?',
                'options': ['Apenas se houver erro', 'Apenas se n√£o houver erro', 'Sempre', 'Nunca'],
                'correct_answer': 'Sempre'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como lan√ßar uma exce√ß√£o manualmente?',
                'options': ['throw Exception', 'raise Exception', 'error Exception', 'exception Exception'],
                'correct_answer': 'raise Exception'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que acontece se uma exce√ß√£o n√£o for tratada?',
                'options': ['O programa continua', 'O programa para com erro', 'O erro √© ignorado', 'Nada acontece'],
                'correct_answer': 'O programa para com erro'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual exce√ß√£o ocorre ao tentar dividir por zero?',
                'options': ['ValueError', 'TypeError', 'ZeroDivisionError', 'ArithmeticError'],
                'correct_answer': 'ZeroDivisionError'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como capturar m√∫ltiplas exce√ß√µes em um bloco except?',
                'options': ['except ValueError, TypeError:', 'except (ValueError, TypeError):', 'except ValueError and TypeError:', 'except ValueError or TypeError:'],
                'correct_answer': 'except (ValueError, TypeError):'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual a principal vantagem de usar "with" para abrir arquivos?',
                'options': ['√â mais r√°pido', 'Garante fechamento autom√°tico', 'Permite m√∫ltiplos arquivos', 'Evita erros de sintaxe'],
                'correct_answer': 'Garante fechamento autom√°tico'
            }
        ]
    },
    8: {
        'title': 'Bibliotecas e APIs',
        'description': 'Expanda o poder do Python com bibliotecas externas e integra√ß√£o com APIs para criar aplica√ß√µes modernas',
        'content': '''<div class="module-header">
            <h3>üìö M√≥dulo 8 - Bibliotecas e APIs</h3>
            <p class="module-intro"><strong>Desbloqueie o poder infinito do Python!</strong> Descubra como usar milhares de bibliotecas externas e integrar com APIs para criar aplica√ß√µes incr√≠veis. Do b√°sico ao avan√ßado!</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai dominar:</h4>
            <ul class="learning-objectives">
                <li>Gerenciamento avan√ßado de pacotes com pip</li>
                <li>Requisi√ß√µes HTTP profissionais com requests</li>
                <li>Consumo e cria√ß√£o de APIs REST</li>
                <li>Autentica√ß√£o e tokens de API</li>
                <li>Processamento avan√ßado de JSON</li>
                <li>Bibliotecas essenciais do ecossistema Python</li>
                <li>Web scraping √©tico e respons√°vel</li>
                <li>Cria√ß√£o de clientes para APIs populares</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico Completo:</h4>
            
            <h5>1. Ecossistema Python e Gerenciamento de Pacotes</h5>
            <p>O Python possui um dos maiores ecossistemas de bibliotecas do mundo, com mais de 400.000 pacotes no PyPI. Saber gerenci√°-los √© fundamental!</p>
            
            <div class="alert alert-info">
                <h6>üåü Principais Reposit√≥rios:</h6>
                <ul class="mb-0">
                    <li><strong>PyPI:</strong> Python Package Index - reposit√≥rio oficial</li>
                    <li><strong>Anaconda:</strong> Foco em ci√™ncia de dados</li>
                    <li><strong>GitHub:</strong> Desenvolvimento colaborativo</li>
                    <li><strong>pip:</strong> Gerenciador padr√£o de pacotes</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h6>üî∏ Gerenciamento Avan√ßado com pip:</h6>
                <pre><code># Comandos essenciais do pip
# Instalar bibliotecas
pip install requests                    # Vers√£o mais recente
pip install requests==2.28.1           # Vers√£o espec√≠fica
pip install requests>=2.25.0           # Vers√£o m√≠nima
pip install requests~=2.28.0           # Vers√£o compat√≠vel

# Instalar m√∫ltiplas bibliotecas
pip install requests pandas numpy matplotlib

# Instalar de arquivo requirements.txt
pip install -r requirements.txt

# Gerar arquivo de depend√™ncias
pip freeze > requirements.txt

# Atualizar bibliotecas
pip install --upgrade requests         # Atualizar espec√≠fica
pip list --outdated                   # Listar desatualizadas
pip install --upgrade pip             # Atualizar o pr√≥prio pip

# Informa√ß√µes sobre pacotes
pip show requests                      # Detalhes do pacote
pip list                              # Todos os pacotes instalados
pip check                             # Verificar depend√™ncias

# Desinstalar
pip uninstall requests
pip uninstall -r requirements.txt     # Desinstalar do arquivo

# Buscar pacotes
pip search machine-learning           # Buscar por termo (depreciado)

# Instalar de reposit√≥rios Git
pip install git+https://github.com/user/repo.git</code></pre>
                
                <h6>üî∏ Ambiente Virtual (Melhor Pr√°tica):</h6>
                <pre><code># Criar ambiente virtual
python -m venv meu_projeto_env

# Ativar ambiente virtual
# Windows:
meu_projeto_env\Scripts\activate
# Linux/Mac:
source meu_projeto_env/bin/activate

# Instalar depend√™ncias no ambiente isolado
pip install requests pandas

# Desativar ambiente
deactivate

# Exemplo de estrutura de projeto profissional
meu_projeto/
‚îú‚îÄ‚îÄ requirements.txt          # Depend√™ncias
‚îú‚îÄ‚îÄ requirements-dev.txt      # Depend√™ncias de desenvolvimento
‚îú‚îÄ‚îÄ src/                      # C√≥digo fonte
‚îú‚îÄ‚îÄ tests/                    # Testes
‚îú‚îÄ‚îÄ docs/                     # Documenta√ß√£o
‚îî‚îÄ‚îÄ venv/                     # Ambiente virtual</code></pre>
            </div>
            
            <h5>2. Biblioteca Requests - HTTP para Humanos</h5>
            <p>A biblioteca requests √© o padr√£o para fazer requisi√ß√µes HTTP em Python. Simples, elegante e poderosa!</p>
            
            <div class="code-example">
                <pre><code>import requests
import json
from datetime import datetime

# GET - Buscar dados
def exemplo_get_basico():
    """Requisi√ß√£o GET b√°sica"""
    url = "https://jsonplaceholder.typicode.com/posts/1"
    
    try:
        response = requests.get(url)
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        response.raise_for_status()  # Lan√ßa exce√ß√£o para c√≥digos 4xx/5xx
        
        # Acessar dados JSON
        data = response.json()
        print(f"üìÑ Post ID: {data['id']}")
        print(f"üìù T√≠tulo: {data['title']}")
        print(f"‚úçÔ∏è Autor: Usu√°rio {data['userId']}")
        
        return data
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

# GET com par√¢metros
def buscar_posts_por_usuario(user_id):
    """Busca posts de um usu√°rio espec√≠fico"""
    url = "https://jsonplaceholder.typicode.com/posts"
    
    # Par√¢metros da URL
    params = {
        'userId': user_id,
        '_limit': 5  # Limitar resultados
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        
        posts = response.json()
        print(f"üìä Encontrados {len(posts)} posts do usu√°rio {user_id}")
        
        for post in posts:
            print(f"  üìå [{post['id']}] {post['title'][:50]}...")
            
        return posts
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro: {e}")
        return []

# POST - Criar dados
def criar_post(titulo, conteudo, user_id):
    """Cria um novo post"""
    url = "https://jsonplaceholder.typicode.com/posts"
    
    # Dados para enviar
    data = {
        'title': titulo,
        'body': conteudo,
        'userId': user_id
    }
    
    # Headers para JSON
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'MeuApp/1.0'
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        response.raise_for_status()
        
        novo_post = response.json()
        print(f"‚úÖ Post criado com ID: {novo_post['id']}")
        return novo_post
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao criar post: {e}")
        return None

# PUT - Atualizar dados
def atualizar_post(post_id, titulo, conteudo):
    """Atualiza um post existente"""
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    
    data = {
        'id': post_id,
        'title': titulo,
        'body': conteudo,
        'userId': 1
    }
    
    try:
        response = requests.put(url, json=data)
        response.raise_for_status()
        
        post_atualizado = response.json()
        print(f"‚úÖ Post {post_id} atualizado com sucesso")
        return post_atualizado
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao atualizar: {e}")
        return None

# DELETE - Remover dados
def deletar_post(post_id):
    """Remove um post"""
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    
    try:
        response = requests.delete(url)
        response.raise_for_status()
        
        print(f"‚úÖ Post {post_id} removido com sucesso")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao deletar: {e}")
        return False

# Sess√µes - Reutilizar conex√µes
def exemplo_sessao():
    """Usando sess√µes para m√∫ltiplas requisi√ß√µes"""
    
    with requests.Session() as session:
        # Configurar headers padr√£o para toda a sess√£o
        session.headers.update({
            'User-Agent': 'MeuApp/1.0',
            'Accept': 'application/json'
        })
        
        # M√∫ltiplas requisi√ß√µes reutilizando a conex√£o
        urls = [
            "https://jsonplaceholder.typicode.com/posts/1",
            "https://jsonplaceholder.typicode.com/posts/2",
            "https://jsonplaceholder.typicode.com/posts/3"
        ]
        
        results = []
        for url in urls:
            try:
                response = session.get(url, timeout=5)
                response.raise_for_status()
                results.append(response.json())
                print(f"‚úÖ Dados obtidos de {url}")
            except requests.exceptions.RequestException as e:
                print(f"‚ùå Erro em {url}: {e}")
        
        return results

# Testando as fun√ß√µes
print("=== Testando Requests ===")
exemplo_get_basico()
buscar_posts_por_usuario(1)
criar_post("Meu Post Python", "Conte√∫do incr√≠vel sobre Python!", 1)</code></pre>
            </div>
            
            <h5>3. Trabalhando com APIs Reais</h5>
            <p>Vamos integrar com APIs populares para criar aplica√ß√µes √∫teis e pr√°ticas!</p>
            
            <div class="code-example">
                <pre><code>import requests
import os
from datetime import datetime

class ViaCEPClient:
    """Cliente para API ViaCEP - busca informa√ß√µes de CEP"""
    
    BASE_URL = "https://viacep.com.br/ws"
    
    def buscar_cep(self, cep):
        """Busca informa√ß√µes de um CEP"""
        # Limpar CEP (remover caracteres especiais)
        cep_limpo = ''.join(filter(str.isdigit, cep))
        
        if len(cep_limpo) != 8:
            raise ValueError("CEP deve ter 8 d√≠gitos")
        
        url = f"{self.BASE_URL}/{cep_limpo}/json/"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # Verificar se CEP foi encontrado
            if 'erro' in data:
                raise ValueError(f"CEP {cep} n√£o encontrado")
            
            return {
                'cep': data['cep'],
                'logradouro': data['logradouro'],
                'bairro': data['bairro'],
                'cidade': data['localidade'],
                'uf': data['uf'],
                'ddd': data['ddd']
            }
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erro ao consultar CEP: {e}")

class GitHubClient:
    """Cliente para API do GitHub"""
    
    BASE_URL = "https://api.github.com"
    
    def __init__(self, token=None):
        self.session = requests.Session()
        
        # Headers padr√£o
        self.session.headers.update({
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'PythonApp/1.0'
        })
        
        # Autentica√ß√£o opcional
        if token:
            self.session.headers['Authorization'] = f'token {token}'
    
    def buscar_usuario(self, username):
        """Busca informa√ß√µes de um usu√°rio"""
        url = f"{self.BASE_URL}/users/{username}"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            
            user = response.json()
            
            return {
                'nome': user['name'],
                'username': user['login'],
                'bio': user['bio'],
                'repositorios_publicos': user['public_repos'],
                'seguidores': user['followers'],
                'seguindo': user['following'],
                'criado_em': user['created_at'],
                'avatar': user['avatar_url']
            }
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erro ao buscar usu√°rio: {e}")
    
    def listar_repositorios(self, username, limit=10):
        """Lista reposit√≥rios de um usu√°rio"""
        url = f"{self.BASE_URL}/users/{username}/repos"
        
        params = {
            'sort': 'updated',
            'direction': 'desc',
            'per_page': limit
        }
        
        try:
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            repos = response.json()
            
            repositorios = []
            for repo in repos:
                repositorios.append({
                    'nome': repo['name'],
                    'descricao': repo['description'],
                    'linguagem': repo['language'],
                    'estrelas': repo['stargazers_count'],
                    'forks': repo['forks_count'],
                    'url': repo['html_url'],
                    'atualizado_em': repo['updated_at']
                })
            
            return repositorios
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erro ao listar reposit√≥rios: {e}")

class OpenWeatherClient:
    """Cliente para API OpenWeatherMap"""
    
    BASE_URL = "https://api.openweathermap.org/data/2.5"
    
    def __init__(self, api_key):
        if not api_key:
            raise ValueError("API key √© obrigat√≥ria")
        self.api_key = api_key
    
    def clima_atual(self, cidade):
        """Busca clima atual de uma cidade"""
        url = f"{self.BASE_URL}/weather"
        
        params = {
            'q': cidade,
            'appid': self.api_key,
            'units': 'metric',  # Celsius
            'lang': 'pt_br'
        }
        
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            return {
                'cidade': data['name'],
                'pais': data['sys']['country'],
                'temperatura': data['main']['temp'],
                'sensacao_termica': data['main']['feels_like'],
                'humidade': data['main']['humidity'],
                'pressao': data['main']['pressure'],
                'descricao': data['weather'][0]['description'],
                'nuvens': data['clouds']['all'],
                'vento_velocidade': data['wind']['speed'],
                'visibilidade': data.get('visibility', 'N/A')
            }
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Erro ao buscar clima: {e}")

# Exemplo de uso pr√°tico
def demonstrar_apis():
    """Demonstra uso de m√∫ltiplas APIs"""
    
    print("=== Consultando CEP ===")
    via_cep = ViaCEPClient()
    try:
        endereco = via_cep.buscar_cep("01310-100")
        print(f"üìç {endereco['logradouro']}, {endereco['bairro']}")
        print(f"üèôÔ∏è {endereco['cidade']}/{endereco['uf']} - CEP: {endereco['cep']}")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print("\n=== Consultando GitHub ===")
    github = GitHubClient()
    try:
        usuario = github.buscar_usuario("octocat")
        print(f"üë§ {usuario['nome']} (@{usuario['username']})")
        print(f"üìä {usuario['repositorios_publicos']} repos p√∫blicos")
        print(f"üë• {usuario['seguidores']} seguidores")
        
        repos = github.listar_repositorios("octocat", 3)
        print(f"\nüóÇÔ∏è Reposit√≥rios recentes:")
        for repo in repos:
            print(f"  ‚≠ê {repo['nome']} ({repo['estrelas']} estrelas) - {repo['linguagem']}")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")

demonstrar_apis()</code></pre>
            </div>
            
            <h5>4. Bibliotecas Essenciais do Ecossistema Python</h5>
            <p>Conhe√ßa as bibliotecas mais importantes para diferentes dom√≠nios de aplica√ß√£o.</p>
            
            <div class="code-example">
                <pre><code># Principais categorias de bibliotecas Python

# üìä CI√äNCIA DE DADOS
"""
pandas - Manipula√ß√£o de dados tabulares
numpy - Computa√ß√£o num√©rica
matplotlib - Gr√°ficos e visualiza√ß√µes
seaborn - Visualiza√ß√µes estat√≠sticas
scipy - Algoritmos cient√≠ficos
scikit-learn - Machine learning
"""

# üåê WEB DEVELOPMENT
"""
flask - Framework web minimalista
django - Framework web completo
fastapi - APIs modernas e r√°pidas
requests - Cliente HTTP
beautifulsoup4 - Web scraping
scrapy - Framework de scraping
"""

# üóÑÔ∏è BANCO DE DADOS
"""
sqlalchemy - ORM para SQL
pymongo - Cliente MongoDB
redis - Cliente Redis
psycopg2 - Cliente PostgreSQL
"""

# üîß UTILIDADES GERAIS
"""
python-dateutil - Manipula√ß√£o de datas
pillow - Processamento de imagens
openpyxl - Manipula√ß√£o de Excel
python-dotenv - Vari√°veis de ambiente
click - Interfaces de linha de comando
"""

# Exemplo pr√°tico: Manipula√ß√£o de dados com pandas
import pandas as pd
import requests

def exemplo_pandas_com_api():
    """Combina API com an√°lise de dados usando pandas"""
    
    # Buscar dados de uma API
    print("üì• Buscando dados da API...")
    url = "https://jsonplaceholder.typicode.com/users"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        # Converter JSON para DataFrame
        users_data = response.json()
        df = pd.DataFrame(users_data)
        
        print(f"üìä Dados carregados: {len(df)} usu√°rios")
        print(f"üìã Colunas: {list(df.columns)}")
        
        # An√°lises b√°sicas
        print("\n=== An√°lise dos Dados ===")
        print(f"üåê Websites √∫nicos: {df['website'].nunique()}")
        print(f"üè¢ Empresas √∫nicas: {df['company'].apply(lambda x: x['name']).nunique()}")
        
        # Extrair informa√ß√µes aninhadas
        df['empresa_nome'] = df['company'].apply(lambda x: x['name'])
        df['cidade'] = df['address'].apply(lambda x: x['city'])
        
        # Agrupar por cidade
        usuarios_por_cidade = df.groupby('cidade').size()
        print(f"\nüèôÔ∏è Usu√°rios por cidade:")
        for cidade, count in usuarios_por_cidade.items():
            print(f"  {cidade}: {count} usu√°rios")
        
        # Salvar dados processados
        df[['name', 'email', 'empresa_nome', 'cidade']].to_csv('usuarios.csv', index=False)
        print(f"\nüíæ Dados salvos em 'usuarios.csv'")
        
        return df
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na API: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")
        return None

# Exemplo: Web scraping √©tico com BeautifulSoup
from bs4 import BeautifulSoup
import time

def exemplo_web_scraping():
    """Exemplo de web scraping respons√°vel"""
    
    # URL de exemplo (sempre verificar robots.txt!)
    url = "https://quotes.toscrape.com/"
    
    try:
        # Headers para parecer um navegador real
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        # Parsear HTML
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Encontrar cita√ß√µes
        quotes = soup.find_all('div', class_='quote')
        
        print(f"üìú Encontradas {len(quotes)} cita√ß√µes:")
        
        citacoes_data = []
        for quote in quotes[:5]:  # Primeiras 5
            texto = quote.find('span', class_='text').text
            autor = quote.find('small', class_='author').text
            tags = [tag.text for tag in quote.find_all('a', class_='tag')]
            
            citacoes_data.append({
                'texto': texto,
                'autor': autor,
                'tags': ', '.join(tags)
            })
            
            print(f"\nüí≠ \"{texto}\"")
            print(f"‚úçÔ∏è ‚Äî {autor}")
            print(f"üè∑Ô∏è Tags: {', '.join(tags)}")
        
        # Converter para DataFrame
        df_quotes = pd.DataFrame(citacoes_data)
        df_quotes.to_json('citacoes.json', orient='records', indent=2)
        print(f"\nüíæ Cita√ß√µes salvas em 'citacoes.json'")
        
        return citacoes_data
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro no scraping: {e}")
        return None

# Executar exemplos (comentado para n√£o causar erro se depend√™ncias n√£o estiverem instaladas)
# exemplo_pandas_com_api()
# exemplo_web_scraping()</code></pre>
            </div>
            
            <div class="alert alert-success">
                <h6>üéØ Melhores Pr√°ticas para APIs:</h6>
                <ul class="mb-0">
                    <li><strong>Rate Limiting:</strong> Respeite limites de requisi√ß√µes</li>
                    <li><strong>Timeouts:</strong> Sempre defina timeouts para evitar travamentos</li>
                    <li><strong>Tratamento de Erros:</strong> Capture e trate exce√ß√µes adequadamente</li>
                    <li><strong>Autentica√ß√£o:</strong> Mantenha tokens seguros e nunca no c√≥digo</li>
                    <li><strong>Cache:</strong> Cache respostas quando apropriado</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6>‚ö†Ô∏è Considera√ß√µes √âticas:</h6>
                <ul class="mb-0">
                    <li>Sempre leia e respeite o robots.txt</li>
                    <li>N√£o sobrecarregue servidores com muitas requisi√ß√µes</li>
                    <li>Use delays entre requisi√ß√µes em web scraping</li>
                    <li>Respeite termos de uso das APIs</li>
                    <li>Considere custos de APIs pagas</li>
                </ul>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'Como instalar uma biblioteca externa?',
                'options': ['pip install nome_biblioteca', 'python install nome_biblioteca', 'import install nome_biblioteca', 'get nome_biblioteca'],
                'correct_answer': 'pip install nome_biblioteca'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual biblioteca √© popular para fazer requisi√ß√µes HTTP?',
                'options': ['http', 'requests', 'urllib', 'web'],
                'correct_answer': 'requests'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© uma API?',
                'options': ['Um tipo de vari√°vel', 'Interface de Programa√ß√£o de Aplica√ß√µes', 'Uma biblioteca Python', 'Um banco de dados'],
                'correct_answer': 'Interface de Programa√ß√£o de Aplica√ß√µes'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo HTTP √© usado para buscar dados de uma API?',
                'options': ['POST', 'PUT', 'GET', 'DELETE'],
                'correct_answer': 'GET'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como listar todas as bibliotecas instaladas?',
                'options': ['pip show', 'pip list', 'pip install', 'pip check'],
                'correct_answer': 'pip list'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual m√©todo verifica se uma requisi√ß√£o HTTP foi bem-sucedida?',
                'options': ['response.check()', 'response.raise_for_status()', 'response.validate()', 'response.verify()'],
                'correct_answer': 'response.raise_for_status()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Como converter resposta JSON em dicion√°rio Python?',
                'options': ['response.to_dict()', 'response.json()', 'json.loads(response)', 'response.parse()'],
                'correct_answer': 'response.json()'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual header √© importante para enviar dados JSON?',
                'options': ['Content-Type: application/json', 'Data-Type: json', 'Format: json', 'Type: application/json'],
                'correct_answer': 'Content-Type: application/json'
            }
        ]
    },
    9: {
        'title': 'Projeto Final',
        'description': 'Integre todos os conceitos aprendidos em um projeto Python completo',
        'content': '''<div class="module-header">
            <h3>üéÜ M√≥dulo 9 - Projeto Final</h3>
            <p class="module-intro"><strong>Integre todos os conceitos!</strong> Crie um projeto completo que demonstra dom√≠nio em Python.</p>
        </div>
        
        <div class="module-content">
            <h4>üéØ O que voc√™ vai aplicar:</h4>
            <ul class="learning-objectives">
                <li>Planejamento e arquitetura de projeto</li>
                <li>Integra√ß√£o de todos os conceitos aprendidos</li>
                <li>Boas pr√°ticas de programa√ß√£o</li>
                <li>Documenta√ß√£o e testes</li>
                <li>Versionamento com Git</li>
            </ul>
            
            <h4>üìö Conte√∫do Te√≥rico:</h4>
            
            <h5>1. Planejamento do Projeto</h5>
            <p>Antes de come√ßar a programar, √© essencial planejar bem o projeto.</p>
            
            <div class="alert alert-info">
                <strong>Etapas do planejamento:</strong>
                <ol class="mb-0">
                    <li>Definir o problema a ser resolvido</li>
                    <li>Listar funcionalidades principais</li>
                    <li>Escolher tecnologias e bibliotecas</li>
                    <li>Criar estrutura de pastas</li>
                    <li>Definir fluxo de dados</li>
                </ol>
            </div>
            
            <div class="alert alert-success">
                <strong>Princ√≠pios importantes:</strong>
                <ul class="mb-0">
                    <li><strong>DRY:</strong> Don't Repeat Yourself</li>
                    <li><strong>KISS:</strong> Keep It Simple, Stupid</li>
                    <li><strong>SRP:</strong> Single Responsibility Principle</li>
                    <li><strong>Coment√°rios:</strong> Explique o "porqu√™", n√£o o "o qu√™"</li>
                    <li><strong>Nomes:</strong> Use nomes descritivos</li>
                </ul>
            </div>
            
            <div class="alert alert-warning">
                <h6><i class="fas fa-trophy"></i> Desafio Final:</h6>
                <p class="mb-0">Crie um projeto que use pelo menos: classes, arquivos, banco de dados, tratamento de exce√ß√µes e uma API externa. Mostre sua evolu√ß√£o!</p>
            </div>
        </div>''',
        'quiz': [
            {
                'type': 'multiple_choice',
                'question': 'O que √© mais importante em um projeto Python?',
                'options': ['C√≥digo limpo e organizado', 'Usar muitas bibliotecas', 'Ter muitas linhas', 'Ser complexo'],
                'correct_answer': 'C√≥digo limpo e organizado'
            },
            {
                'type': 'multiple_choice',
                'question': 'Qual √© a melhor pr√°tica para organizar um projeto Python?',
                'options': ['Tudo em um arquivo', 'Separar em m√≥dulos tem√°ticos', 'Usar apenas fun√ß√µes', 'Evitar comentarios'],
                'correct_answer': 'Separar em m√≥dulos tem√°ticos'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que significa SOLID em programa√ß√£o?',
                'options': ['Um tipo de banco de dados', 'Princ√≠pios de design de software', 'Uma biblioteca Python', 'Um framework web'],
                'correct_answer': 'Princ√≠pios de design de software'
            },
            {
                'type': 'multiple_choice',
                'question': 'Por que √© importante tratar exce√ß√µes em um projeto?',
                'options': ['Para o programa rodar mais r√°pido', 'Para evitar que o programa pare inesperadamente', 'Para usar menos mem√≥ria', 'N√£o √© importante'],
                'correct_answer': 'Para evitar que o programa pare inesperadamente'
            },
            {
                'type': 'multiple_choice',
                'question': 'O que √© refatora√ß√£o de c√≥digo?',
                'options': ['Deletar o c√≥digo', 'Melhorar a estrutura sem mudar a funcionalidade', 'Adicionar novos recursos', 'Corrigir bugs'],
                'correct_answer': 'Melhorar a estrutura sem mudar a funcionalidade'
            }
        ]
    }
}

# Final exam questions covering all modules
FINAL_EXAM = {
    'title': 'Exame Final - Python Completo',
    'description': 'Teste seus conhecimentos em todos os m√≥dulos do curso',
    'questions': [
        {
            'type': 'multiple_choice',
            'question': 'Qual √© a sa√≠da do c√≥digo: print(type(42))?',
            'options': ['<class "number">', '<class "integer">', '<class "int">', '<class "num">'],
            'correct_answer': '<class "int">'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ criaria uma lista com n√∫meros de 0 a 4?',
            'options': ['list(range(5))', 'list(0,4)', 'range(0,5)', 'list(range(0,4))'],
            'correct_answer': 'list(range(5))'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual m√©todo √© usado para adicionar um elemento ao final de uma lista?',
            'options': ['add()', 'append()', 'insert()', 'push()'],
            'correct_answer': 'append()'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ abriria um arquivo chamado "dados.txt" para escrita?',
            'options': ['open("dados.txt", "w")', 'file("dados.txt", "write")', 'open("dados.txt", "write")', 'write("dados.txt")'],
            'correct_answer': 'open("dados.txt", "w")'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual palavra-chave √© usada para definir uma fun√ß√£o?',
            'options': ['function', 'def', 'func', 'define'],
            'correct_answer': 'def'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ criaria uma classe chamada "Pessoa" em Python?',
            'options': ['class Pessoa():', 'create class Pessoa:', 'def class Pessoa:', 'new Pessoa():'],
            'correct_answer': 'class Pessoa():'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual bloco de c√≥digo √© executado quando uma exce√ß√£o N√ÉO ocorre?',
            'options': ['except', 'finally', 'else', 'catch'],
            'correct_answer': 'else'
        },
        {
            'type': 'multiple_choice',
            'question': 'Como voc√™ instalaria a biblioteca "requests"?',
            'options': ['python install requests', 'pip install requests', 'install requests', 'get requests'],
            'correct_answer': 'pip install requests'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual biblioteca Python √© padr√£o para trabalhar com bancos SQLite?',
            'options': ['sqlite', 'sqlite3', 'database', 'sql'],
            'correct_answer': 'sqlite3'
        },
        {
            'type': 'multiple_choice',
            'question': 'Qual √© uma caracter√≠stica importante de um c√≥digo bem escrito?',
            'options': ['Ser o mais longo poss√≠vel', 'Usar vari√°veis com nomes confusos', 'Ser leg√≠vel e bem documentado', 'Evitar coment√°rios'],
            'correct_answer': 'Ser leg√≠vel e bem documentado'
        }
    ]
}